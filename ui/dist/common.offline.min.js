'use strict';

var Bahmni = Bahmni || {};
Bahmni.Common = Bahmni.Common || {};

(function () {
    var hostUrl = localStorage.getItem('host') ? ("https://" + localStorage.getItem('host')) : "";
    var offlineRootDir = localStorage.getItem('offlineRootDir') || "";
    var RESTWS = hostUrl + "/openmrs/ws/rest";
    var RESTWS_V1 = hostUrl + "/openmrs/ws/rest/v1";
    var BAHMNI_CORE = RESTWS_V1 + "/bahmnicore";
    var EMRAPI = RESTWS + "/emrapi";
    var BACTERIOLOGY = RESTWS_V1;
    var BASE_URL = hostUrl + "/bahmni_config/openmrs/apps/";
    var CUSTOM_URL = hostUrl + "/implementation_config/openmrs/apps/";
    var CUSTOM_LOCALE_URL = hostUrl + "/bahmni_config/openmrs/i18n/";
    var syncButtonConfiguration = {
        delay: 1000,
        repeat: 1
    };

    var serverErrorMessages = [
        {
            serverMessage: "Cannot have more than one active order for the same orderable and care setting at same time",
            clientMessage: "One or more drugs you are trying to order are already active. Please change the start date of the conflicting drug or remove them from the new prescription."
        },
        {
            serverMessage: "[Order.cannot.have.more.than.one]",
            clientMessage: "One or more drugs you are trying to order are already active. Please change the start date of the conflicting drug or remove them from the new prescription."
        }
    ];

    var offlineErrorMessages = {
        networkError: "The network connectivity is bad and not able to connect to the server. Please ensure minimum network condition to sync the device",
        openmrsServerError: "OpenMRS is down and the device not able to communicate to the server. Please make sure the server is up before Syncing the device",
        openmrsServerDownError: "OpenMRS is down and the device not able to communicate to the server. Please ensure the server is up for the first time login and setup.",
        networkErrorForFirstTimeLogin: "The device is not connected to the internet. Please ensure minimal connectivity for the first time login and setup.",
        dbNameConditionNotPresent: "dbNameCondition.json is not present in config"
    };

    var syncStatusMessages = {
        syncFailed: "Sync Failed, Press sync button to try again",
        syncSuccess: "Data Synced Successfully",
        syncPending: "Sync Pending, Press Sync button to Sync"
    };

    var representation = "custom:(uuid,name,names,conceptClass," +
        "setMembers:(uuid,name,names,conceptClass," +
        "setMembers:(uuid,name,names,conceptClass," +
        "setMembers:(uuid,name,names,conceptClass))))";

    var unAuthenticatedReferenceDataMap = {
        "/openmrs/ws/rest/v1/location?tags=Login+Location&s=byTags&v=default": "LoginLocations",
        "/openmrs/ws/rest/v1/bahmnicore/sql/globalproperty?property=locale.allowed.list": "LocaleList"
    };

    var authenticatedReferenceDataMap = {
        "/openmrs/ws/rest/v1/idgen/identifiertype": "IdentifierTypes",
        "/openmrs/module/addresshierarchy/ajax/getOrderedAddressHierarchyLevels.form": "AddressHierarchyLevels",
        "/openmrs/ws/rest/v1/bahmnicore/sql/globalproperty?property=mrs.genders": "Genders",
        "/openmrs/ws/rest/v1/bahmnicore/sql/globalproperty?property=bahmni.encountersession.duration": "encounterSessionDuration",
        "/openmrs/ws/rest/v1/bahmnicore/sql/globalproperty?property=bahmni.relationshipTypeMap": "RelationshipTypeMap",
        "/openmrs/ws/rest/v1/bahmnicore/config/bahmniencounter?callerContext=REGISTRATION_CONCEPTS": "RegistrationConcepts",
        "/openmrs/ws/rest/v1/relationshiptype?v=custom:(aIsToB,bIsToA,uuid)": "RelationshipType",
        "/openmrs/ws/rest/v1/personattributetype?v=custom:(uuid,name,sortWeight,description,format,concept)": "PersonAttributeType",
        "/openmrs/ws/rest/v1/entitymapping?mappingType=loginlocation_visittype&s=byEntityAndMappingType": "LoginLocationToVisitTypeMapping",
        "/openmrs/ws/rest/v1/bahmnicore/config/patient": "PatientConfig",
        "/openmrs/ws/rest/v1/concept?s=byFullySpecifiedName&name=Consultation+Note&v=custom:(uuid,name,answers)": "ConsultationNote",
        "/openmrs/ws/rest/v1/concept?s=byFullySpecifiedName&name=Lab+Order+Notes&v=custom:(uuid,name)": "LabOrderNotes",
        "/openmrs/ws/rest/v1/concept?s=byFullySpecifiedName&name=Impression&v=custom:(uuid,name)": "RadiologyImpressionConfig",
        "/openmrs/ws/rest/v1/concept?s=byFullySpecifiedName&name=All_Tests_and_Panels&v=custom:(uuid,name:(uuid,name),setMembers:(uuid,name:(uuid,name)))": "AllTestsAndPanelsConcept",
        "/openmrs/ws/rest/v1/concept?s=byFullySpecifiedName&name=Dosage+Frequency&v=custom:(uuid,name,answers)": "DosageFrequencyConfig",
        "/openmrs/ws/rest/v1/concept?s=byFullySpecifiedName&name=Dosage+Instructions&v=custom:(uuid,name,answers)": "DosageInstructionConfig",
        "/openmrs/ws/rest/v1/bahmnicore/sql/globalproperty?property=bahmni.encounterType.default": "DefaultEncounterType",
        "/openmrs/ws/rest/v1/concept?s=byFullySpecifiedName&name=Stopped+Order+Reason&v=custom:(uuid,name,answers)": "StoppedOrderReasonConfig",
        "/openmrs/ws/rest/v1/ordertype": "OrderType",
        "/openmrs/ws/rest/v1/bahmnicore/config/drugOrders": "DrugOrderConfig",
        "/openmrs/ws/rest/v1/bahmnicore/sql/globalproperty?property=drugOrder.drugOther": "NonCodedDrugConcept"
    };

    authenticatedReferenceDataMap["/openmrs/ws/rest/v1/entitymapping?mappingType=location_encountertype&s=byEntityAndMappingType&entityUuid=" + (localStorage.getItem("LoginInformation") ? JSON.parse(localStorage.getItem("LoginInformation")).currentLocation.uuid : "")] = "LoginLocationToEncounterTypeMapping";

    Bahmni.Common.Constants = {
        hostURL: hostUrl,
        dateFormat: "dd/mm/yyyy",
        dateDisplayFormat: "DD-MMM-YYYY",
        timeDisplayFormat: "hh:mm",
        emrapiDiagnosisUrl: EMRAPI + "/diagnosis",
        bahmniDiagnosisUrl: BAHMNI_CORE + "/diagnosis/search",
        bahmniDeleteDiagnosisUrl: BAHMNI_CORE + "/diagnosis/delete",
        diseaseTemplateUrl: BAHMNI_CORE + "/diseaseTemplates",
        AllDiseaseTemplateUrl: BAHMNI_CORE + "/diseaseTemplate",
        emrapiConceptUrl: EMRAPI + "/concept",
        encounterConfigurationUrl: BAHMNI_CORE + "/config/bahmniencounter",
        patientConfigurationUrl: BAHMNI_CORE + "/config/patient",
        drugOrderConfigurationUrl: BAHMNI_CORE + "/config/drugOrders",
        emrEncounterUrl: EMRAPI + "/encounter",
        encounterUrl: RESTWS_V1 + "/encounter",
        locationUrl: RESTWS_V1 + "/location",
        bahmniVisitLocationUrl: BAHMNI_CORE + "/visitLocation",
        bahmniOrderUrl: BAHMNI_CORE + "/orders",
        bahmniDrugOrderUrl: BAHMNI_CORE + "/drugOrders",
        bahmniDispositionByVisitUrl: BAHMNI_CORE + "/disposition/visit",
        bahmniDispositionByPatientUrl: BAHMNI_CORE + "/disposition/patient",
        bahmniSearchUrl: BAHMNI_CORE + "/search",
        bahmniLabOrderResultsUrl: BAHMNI_CORE + "/labOrderResults",
        bahmniEncounterUrl: BAHMNI_CORE + "/bahmniencounter",
        conceptUrl: RESTWS_V1 + "/concept",
        bahmniConceptAnswerUrl: RESTWS_V1 + "/bahmniconceptanswer",
        conceptSearchByFullNameUrl: RESTWS_V1 + "/concept?s=byFullySpecifiedName",
        visitUrl: RESTWS_V1 + "/visit",
        endVisitUrl: BAHMNI_CORE + "/visit/endVisit",
        endVisitAndCreateEncounterUrl: BAHMNI_CORE + "/visit/endVisitAndCreateEncounter",
        visitTypeUrl: RESTWS_V1 + "/visittype",
        patientImageUrlByPatientUuid: RESTWS_V1 + "/patientImage?patientUuid=",
        labResultUploadedFileNameUrl: "/uploaded_results/",
        visitSummaryUrl: BAHMNI_CORE + "/visit/summary",
        encounterModifierUrl: BAHMNI_CORE + "/bahmniencountermodifier",
        openmrsUrl: hostUrl + "/openmrs",
        loggingUrl: hostUrl + "/log/",
        idgenConfigurationURL: RESTWS_V1 + "/idgen/identifiertype",
        bahmniRESTBaseURL: BAHMNI_CORE + "",
        observationsUrl: BAHMNI_CORE + "/observations",
        obsRelationshipUrl: BAHMNI_CORE + "/obsrelationships",
        encounterImportUrl: BAHMNI_CORE + "/admin/upload/encounter",
        programImportUrl: BAHMNI_CORE + "/admin/upload/program",
        conceptImportUrl: BAHMNI_CORE + "/admin/upload/concept",
        conceptSetImportUrl: BAHMNI_CORE + "/admin/upload/conceptset",
        drugImportUrl: BAHMNI_CORE + "/admin/upload/drug",
        labResultsImportUrl: BAHMNI_CORE + "/admin/upload/labResults",
        referenceTermsImportUrl: BAHMNI_CORE + "/admin/upload/referenceterms",
        relationshipImportUrl: BAHMNI_CORE + "/admin/upload/relationship",
        conceptSetExportUrl: BAHMNI_CORE + "/admin/export/conceptset?conceptName=:conceptName",
        patientImportUrl: BAHMNI_CORE + "/admin/upload/patient",
        adminImportStatusUrl: BAHMNI_CORE + "/admin/upload/status",
        programUrl: RESTWS_V1 + "/program",
        programEnrollPatientUrl: RESTWS_V1 + "/bahmniprogramenrollment",
        programStateDeletionUrl: RESTWS_V1 + "/programenrollment",
        programEnrollmentDefaultInformation: "default",
        programEnrollmentFullInformation: "full",
        programAttributeTypes: RESTWS_V1 + "/programattributetype",
        relationshipTypesUrl: RESTWS_V1 + "/relationshiptype",
        personAttributeTypeUrl: RESTWS_V1 + "/personattributetype",
        diseaseSummaryPivotUrl: BAHMNI_CORE + "/diseaseSummaryData",
        allTestsAndPanelsConceptName: 'All_Tests_and_Panels',
        dosageFrequencyConceptName: 'Dosage Frequency',
        dosageInstructionConceptName: 'Dosage Instructions',
        stoppedOrderReasonConceptName: 'Stopped Order Reason',
        consultationNoteConceptName: 'Consultation Note',
        diagnosisConceptSet: 'Diagnosis Concept Set',
        radiologyOrderType: 'Radiology Order',
        radiologyResultConceptName: "Radiology Result",
        investigationEncounterType: "INVESTIGATION",
        validationNotesEncounterType: "VALIDATION NOTES",
        labOrderNotesConcept: "Lab Order Notes",
        impressionConcept: "Impression",
        qualifiedByRelationshipType: "qualified-by",
        dispositionConcept: "Disposition",
        dispositionGroupConcept: "Disposition Set",
        dispositionNoteConcept: "Disposition Note",
        ruledOutDiagnosisConceptName: 'Ruled Out Diagnosis',
        emrapiConceptMappingSource: "org.openmrs.module.emrapi",
        abbreviationConceptMappingSource: "Abbreviation",
        includeAllObservations: false,
        openmrsObsUrl: RESTWS_V1 + "/obs",
        openmrsObsRepresentation: "custom:(uuid,obsDatetime,value:(uuid,name:(uuid,name)))",
        admissionCode: 'ADMIT',
        dischargeCode: 'DISCHARGE',
        transferCode: 'TRANSFER',
        undoDischargeCode: 'UNDO_DISCHARGE',
        vitalsConceptName: "Vitals",
        heightConceptName: "HEIGHT",
        weightConceptName: "WEIGHT",
        bmiConceptName: "BMI", // TODO : shruthi : revove this when this logic moved to server side
        bmiStatusConceptName: "BMI STATUS", // TODO : shruthi : revove this when this logic moved to server side
        abnormalObservationConceptName: "IS_ABNORMAL",
        documentsPath: '/document_images',
        documentsConceptName: 'Document',
        miscConceptClassName: 'Misc',
        abnormalConceptClassName: 'Abnormal',
        unknownConceptClassName: 'Unknown',
        durationConceptClassName: 'Duration',
        conceptDetailsClassName: 'Concept Details',
        admissionEncounterTypeName: 'ADMISSION',
        dischargeEncounterTypeName: 'DISCHARGE',
        imageClassName: 'Image',
        videoClassName: 'Video',
        locationCookieName: 'bahmni.user.location',
        retrospectiveEntryEncounterDateCookieName: 'bahmni.clinical.retrospectiveEncounterDate',
        JSESSIONID: "JSESSIONID",
        rootScopeRetrospectiveEntry: 'retrospectiveEntry.encounterDate',
        patientFileConceptName: 'Patient file',
        serverErrorMessages: serverErrorMessages,
        currentUser: 'bahmni.user',
        retrospectivePrivilege: 'app:clinical:retrospective',
        locationPickerPrivilege: 'app:clinical:locationpicker',
        onBehalfOfPrivilege: 'app:clinical:onbehalf',
        nutritionalConceptName: 'Nutritional Values',
        messageForNoObservation: "No observations captured for this visit.",
        messageForNoDisposition: "NO_DISPOSTIONS_AVAILABLE_MESSAGE_KEY",
        messageForNoFulfillment: "No observations captured for this order.",
        reportsUrl: "/bahmnireports",
        uploadReportTemplateUrl: "/bahmnireports/upload",
        ruledOutdiagnosisStatus: "Ruled Out Diagnosis",
        registartionConsultationPrivilege: 'app:common:registration_consultation_link',
        manageIdentifierSequencePrivilege: "Manage Identifier Sequence",
        closeVisitPrivilege: 'app:common:closeVisit',
        deleteDiagnosisPrivilege: 'app:clinical:deleteDiagnosis',
        viewPatientsPrivilege: 'View Patients',
        editPatientsPrivilege: 'Edit Patients',
        addVisitsPrivilege: 'Add Visits',
        deleteVisitsPrivilege: 'Delete Visits',
        grantProviderAccess: "app:clinical:grantProviderAccess",
        grantProviderAccessDataCookieName: "app:clinical:grantProviderAccessData",
        globalPropertyUrl: BAHMNI_CORE + "/sql/globalproperty",
        passwordPolicyUrl: BAHMNI_CORE + "/globalProperty/passwordPolicyProperties",
        fulfillmentConfiguration: "fulfillment",
        fulfillmentFormSuffix: " Fulfillment Form",
        noNavigationLinksMessage: "No navigation links available.",
        conceptSetRepresentationForOrderFulfillmentConfig: representation,
        entityMappingUrl: RESTWS_V1 + "/entitymapping",
        encounterTypeUrl: RESTWS_V1 + "/encountertype",
        defaultExtensionName: "default",
        orderSetMemberAttributeTypeUrl: RESTWS_V1 + "/ordersetmemberattributetype",
        orderSetUrl: RESTWS_V1 + "/bahmniorderset",
        primaryOrderSetMemberAttributeTypeName: "Primary",
        bahmniBacteriologyResultsUrl: BACTERIOLOGY + "/specimen",
        bedFromVisit: RESTWS_V1 + "/beds",
        ordersUrl: RESTWS_V1 + "/order",
        formDataUrl: RESTWS_V1 + "/obs",
        providerUrl: RESTWS_V1 + "/provider",
        drugUrl: RESTWS_V1 + "/drug",
        orderTypeUrl: RESTWS_V1 + "/ordertype",
        userUrl: RESTWS_V1 + "/user",
        passwordUrl: RESTWS_V1 + "/password",
        formUrl: RESTWS_V1 + "/form",
        latestPublishedForms: RESTWS_V1 + "/bahmniie/form/latestPublishedForms",
        formTranslationsUrl: RESTWS_V1 + "/bahmniie/form/translations",
        sqlUrl: BAHMNI_CORE + "/sql",
        patientAttributeDateFieldFormat: "org.openmrs.util.AttributableDate",
        platform: "user.platform",
        RESTWS_V1: RESTWS_V1,
        baseUrl: BASE_URL,
        customUrl: CUSTOM_URL,
        customLocaleUrl: CUSTOM_LOCALE_URL,
        addressEventLogServiceUrl: hostUrl + "/event-log-service/rest/eventlog/getAddressHierarchyEvents",
        eventLogServicePatientUrl: hostUrl + "/event-log-service/rest/eventlog/events/patient",
        eventLogServiceEncounterUrl: hostUrl + "/event-log-service/rest/eventlog/events/encounter",
        preprocessedPatientUrl: RESTWS_V1 + "/bahmniconnect/patient?filename=",
        preprocessedPatientFilesUrl: RESTWS_V1 + "/bahmniconnect/patientfiles?filter=",
        eventLogServiceConceptUrl: hostUrl + "/event-log-service/rest/eventlog/concepts",
        eventLogServiceFormUrl: hostUrl + "/event-log-service/rest/eventlog/forms",
        offlineMetadataUrl: hostUrl + "/offlineMetadata.json",
        faviconUrl: hostUrl + "/bahmni/favicon.ico",
        platformType: {
            chrome: 'chrome',
            android: 'android',
            chromeApp: 'chrome-app',
            other: 'other'
        },
        numericDataType: "Numeric",
        encryptionType: {
            SHA3: 'SHA3'
        },
        LoginInformation: 'LoginInformation',
        // orderSetSpecialUnits:["mg/kg","mg/m2"],
        ServerDateTimeFormat: 'YYYY-MM-DDTHH:mm:ssZZ',
        calculateDose: BAHMNI_CORE + "/calculateDose",
        unAuthenticatedReferenceDataMap: unAuthenticatedReferenceDataMap,
        authenticatedReferenceDataMap: authenticatedReferenceDataMap,
        offlineRootDir: offlineRootDir,
        dischargeUrl: BAHMNI_CORE + "/discharge",
        newOfflineVisitUuid: "newOfflineVisitUuid",
        offlineErrorMessages: offlineErrorMessages,
        syncButtonConfiguration: syncButtonConfiguration,
        syncStatusMessages: syncStatusMessages,
        uuidRegex: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
        offlineBahmniEncounterUrl: "/openmrs/ws/rest/v1/bahmnicore/bahmniencounter/",
        eventlogFilterUrl: hostUrl + "/openmrs/ws/rest/v1/eventlog/filter",
        bahmniConnectMetaDataDb: "metaData",
        bahmniConnectVersion: "0.89",
        defaultBahmniConnectDb: "Bahmni"
    };
})();


/**
 * @license
 * lodash 4.3.0 (Custom Build) lodash.com/license | Underscore.js 1.8.3 underscorejs.org/LICENSE
 * Build: `lodash -o ./dist/lodash.js`
 */
;(function(){function n(n,t){return n.set(t[0],t[1]),n}function t(n,t){return n.add(t),n}function r(n,t,r){switch(r.length){case 0:return n.call(t);case 1:return n.call(t,r[0]);case 2:return n.call(t,r[0],r[1]);case 3:return n.call(t,r[0],r[1],r[2])}return n.apply(t,r)}function e(n,t,r,e){for(var u=-1,o=n.length;++u<o;){var i=n[u];t(e,i,r(i),n)}return e}function u(n,t){for(var r=-1,e=n.length;++r<e&&false!==t(n[r],r,n););return n}function o(n,t){for(var r=-1,e=n.length;++r<e;)if(!t(n[r],r,n))return false;
return true}function i(n,t){for(var r=-1,e=n.length,u=-1,o=[];++r<e;){var i=n[r];t(i,r,n)&&(o[++u]=i)}return o}function f(n,t){return!!n.length&&-1<d(n,t,0)}function c(n,t,r){for(var e=-1,u=n.length;++e<u;)if(r(t,n[e]))return true;return false}function a(n,t){for(var r=-1,e=n.length,u=Array(e);++r<e;)u[r]=t(n[r],r,n);return u}function l(n,t){for(var r=-1,e=t.length,u=n.length;++r<e;)n[u+r]=t[r];return n}function s(n,t,r,e){var u=-1,o=n.length;for(e&&o&&(r=n[++u]);++u<o;)r=t(r,n[u],u,n);return r}function h(n,t,r,e){
var u=n.length;for(e&&u&&(r=n[--u]);u--;)r=t(r,n[u],u,n);return r}function p(n,t){for(var r=-1,e=n.length;++r<e;)if(t(n[r],r,n))return true;return false}function _(n,t,r){for(var e=-1,u=n.length;++e<u;){var o=n[e],i=t(o);if(null!=i&&(f===Z?i===i:r(i,f)))var f=i,c=o}return c}function g(n,t,r,e){var u;return r(n,function(n,r,o){return t(n,r,o)?(u=e?r:n,false):void 0}),u}function v(n,t,r){for(var e=n.length,u=r?e:-1;r?u--:++u<e;)if(t(n[u],u,n))return u;return-1}function d(n,t,r){if(t!==t)return B(n,r);--r;for(var e=n.length;++r<e;)if(n[r]===t)return r;
return-1}function y(n,t,r,e,u){return u(n,function(n,u,o){r=e?(e=false,n):t(r,n,u,o)}),r}function b(n,t){var r=n.length;for(n.sort(t);r--;)n[r]=n[r].c;return n}function x(n,t){for(var r,e=-1,u=n.length;++e<u;){var o=t(n[e]);o!==Z&&(r=r===Z?o:r+o)}return r}function j(n,t){for(var r=-1,e=Array(n);++r<n;)e[r]=t(r);return e}function m(n,t){return a(t,function(t){return[t,n[t]]})}function w(n){return function(t){return n(t)}}function A(n,t){return a(t,function(t){return n[t]})}function O(n,t){for(var r=-1,e=n.length;++r<e&&-1<d(t,n[r],0););
return r}function k(n,t){for(var r=n.length;r--&&-1<d(t,n[r],0););return r}function E(n){return n&&n.Object===Object?n:null}function I(n,t){if(n!==t){var r=null===n,e=n===Z,u=n===n,o=null===t,i=t===Z,f=t===t;if(n>t&&!o||!u||r&&!i&&f||e&&f)return 1;if(t>n&&!r||!f||o&&!e&&u||i&&u)return-1}return 0}function S(n){return Un[n]}function R(n){return zn[n]}function W(n){return"\\"+$n[n]}function B(n,t,r){var e=n.length;for(t+=r?0:-1;r?t--:++t<e;){var u=n[t];if(u!==u)return t}return-1}function C(n){var t=false;
if(null!=n&&typeof n.toString!="function")try{t=!!(n+"")}catch(r){}return t}function U(n,t){return n=typeof n=="number"||yn.test(n)?+n:-1,n>-1&&0==n%1&&(null==t?9007199254740991:t)>n}function z(n){for(var t,r=[];!(t=n.next()).done;)r.push(t.value);return r}function M(n){var t=-1,r=Array(n.size);return n.forEach(function(n,e){r[++t]=[e,n]}),r}function L(n,t){for(var r=-1,e=n.length,u=-1,o=[];++r<e;)n[r]===t&&(n[r]="__lodash_placeholder__",o[++u]=r);return o}function $(n){var t=-1,r=Array(n.size);return n.forEach(function(n){
r[++t]=n}),r}function F(n){if(!n||!En.test(n))return n.length;for(var t=kn.lastIndex=0;kn.test(n);)t++;return t}function N(n){return Mn[n]}function D(E){function yn(n){if(je(n)&&!No(n)&&!(n instanceof An)){if(n instanceof wn)return n;if(cu.call(n,"__wrapped__"))return Zr(n)}return new wn(n)}function mn(){}function wn(n,t){this.__wrapped__=n,this.__actions__=[],this.__chain__=!!t,this.__index__=0,this.__values__=Z}function An(n){this.__wrapped__=n,this.__actions__=[],this.__dir__=1,this.__filtered__=false,
this.__iteratees__=[],this.__takeCount__=4294967295,this.__views__=[]}function Un(){}function zn(n){var t=-1,r=n?n.length:0;for(this.clear();++t<r;){var e=n[t];this.set(e[0],e[1])}}function Mn(n){var t=-1,r=n?n.length:0;for(this.__data__=new zn;++t<r;)this.push(n[t])}function Ln(n,t){var r=n.__data__;return Ur(t)?(r=r.__data__,"__lodash_hash_undefined__"===(typeof t=="string"?r.string:r.hash)[t]):r.has(t)}function $n(n){var t=-1,r=n?n.length:0;for(this.clear();++t<r;){var e=n[t];this.set(e[0],e[1]);
}}function Dn(n,t){var r=qn(n,t);return 0>r?false:(r==n.length-1?n.pop():Ou.call(n,r,1),true)}function Zn(n,t){var r=qn(n,t);return 0>r?Z:n[r][1]}function qn(n,t){for(var r=n.length;r--;)if(se(n[r][0],t))return r;return-1}function Pn(n,t,r){var e=qn(n,t);0>e?n.push([t,r]):n[e][1]=r}function Tn(n,t,r,e){return n===Z||se(n,iu[r])&&!cu.call(e,r)?t:n}function Gn(n,t,r){(r!==Z&&!se(n[t],r)||typeof t=="number"&&r===Z&&!(t in n))&&(n[t]=r)}function Yn(n,t,r){var e=n[t];(!se(e,r)||se(e,iu[t])&&!cu.call(n,t)||r===Z&&!(t in n))&&(n[t]=r);
}function Hn(n,t,r,e){return Ju(n,function(n,u,o){t(e,n,r(n),o)}),e}function Qn(n,t){return n&&Ht(t,Fe(t),n)}function Xn(n,t){for(var r=-1,e=null==n,u=t.length,o=Array(u);++r<u;)o[r]=e?Z:Me(n,t[r]);return o}function nt(n,t,r){return n===n&&(r!==Z&&(n=n>r?r:n),t!==Z&&(n=t>n?t:n)),n}function tt(n,t,r,e,o,i){var f;if(r&&(f=o?r(n,e,o,i):r(n)),f!==Z)return f;if(!xe(n))return n;if(e=No(n)){if(f=Ir(n),!t)return Yt(n,f)}else{var c=kr(n),a="[object Function]"==c||"[object GeneratorFunction]"==c;if(Do(n))return Kt(n,t);
if("[object Object]"!=c&&"[object Arguments]"!=c&&(!a||o))return Cn[c]?Rr(n,c,t):o?n:{};if(C(n))return o?n:{};if(f=Sr(a?{}:n),!t)return Xt(n,Qn(f,n))}return i||(i=new $n),(o=i.get(n))?o:(i.set(n,f),(e?u:at)(n,function(e,u){Yn(f,u,tt(e,t,r,u,n,i))}),e?f:Xt(n,f))}function rt(n){var t=Fe(n),r=t.length;return function(e){if(null==e)return!r;for(var u=r;u--;){var o=t[u],i=n[o],f=e[o];if(f===Z&&!(o in Object(e))||!i(f))return false}return true}}function et(n,t,r){if(typeof n!="function")throw new uu("Expected a function");
return Au(function(){n.apply(Z,r)},t)}function ut(n,t,r,e){var u=-1,o=f,i=true,l=n.length,s=[],h=t.length;if(!l)return s;r&&(t=a(t,w(r))),e?(o=c,i=false):t.length>=200&&(o=Ln,i=false,t=new Mn(t));n:for(;++u<l;){var p=n[u],_=r?r(p):p;if(i&&_===_){for(var g=h;g--;)if(t[g]===_)continue n;s.push(p)}else o(t,_,e)||s.push(p)}return s}function ot(n,t){var r=true;return Ju(n,function(n,e,u){return r=!!t(n,e,u)}),r}function it(n,t){var r=[];return Ju(n,function(n,e,u){t(n,e,u)&&r.push(n)}),r}function ft(n,t,r,e){e||(e=[]);
for(var u=-1,o=n.length;++u<o;){var i=n[u];ge(i)&&(r||No(i)||pe(i))?t?ft(i,t,r,e):l(e,i):r||(e[e.length]=i)}return e}function ct(n,t){return null==n?n:Hu(n,t,Ne)}function at(n,t){return n&&Hu(n,t,Fe)}function lt(n,t){return n&&Qu(n,t,Fe)}function st(n,t){return i(t,function(t){return de(n[t])})}function ht(n,t){t=Cr(t,n)?[t+""]:Nt(t);for(var r=0,e=t.length;null!=n&&e>r;)n=n[t[r++]];return r&&r==e?n:Z}function pt(n,t){return cu.call(n,t)||typeof n=="object"&&t in n&&null===xu(n)}function _t(n,t){return t in Object(n);
}function gt(n,t,r){for(var e=r?c:f,u=n.length,o=u,i=Array(u),l=[];o--;){var s=n[o];o&&t&&(s=a(s,w(t))),i[o]=r||!t&&120>s.length?Z:new Mn(o&&s)}var s=n[0],h=-1,p=s.length,_=i[0];n:for(;++h<p;){var g=s[h],v=t?t(g):g;if(_?!Ln(_,v):!e(l,v,r)){for(o=u;--o;){var d=i[o];if(d?!Ln(d,v):!e(n[o],v,r))continue n}_&&_.push(v),l.push(g)}}return l}function vt(n,t,r,e){return at(n,function(n,u,o){t(e,r(n),u,o)}),e}function dt(n,t,e){return Cr(t,n)||(t=Nt(t),n=$r(n,t),t=Kr(t)),t=null==n?n:n[t],null==t?Z:r(t,n,e);
}function yt(n,t,r,e,u){if(n===t)return true;if(null==n||null==t||!xe(n)&&!je(t))return n!==n&&t!==t;n:{var o=No(n),i=No(t),f="[object Array]",c="[object Array]";o||(f=kr(n),"[object Arguments]"==f?f="[object Object]":"[object Object]"!=f&&(o=Ie(n))),i||(c=kr(t),"[object Arguments]"==c?c="[object Object]":"[object Object]"!=c&&Ie(t));var a="[object Object]"==f&&!C(n),i="[object Object]"==c&&!C(t),c=f==c;if(!c||o||a){if(!(2&e)&&(f=a&&cu.call(n,"__wrapped__"),i=i&&cu.call(t,"__wrapped__"),f||i)){n=yt(f?n.value():n,i?t.value():t,r,e,u);
break n}c?(u||(u=new $n),n=(o?br:jr)(n,t,yt,r,e,u)):n=false}else n=xr(n,t,f,yt,r,e)}return n}function bt(n,t,r,e){var u=r.length,o=u,i=!e;if(null==n)return!o;for(n=Object(n);u--;){var f=r[u];if(i&&f[2]?f[1]!==n[f[0]]:!(f[0]in n))return false}for(;++u<o;){var f=r[u],c=f[0],a=n[c],l=f[1];if(i&&f[2]){if(a===Z&&!(c in n))return false}else if(f=new $n,c=e?e(a,l,c,n,t,f):Z,c===Z?!yt(l,a,e,3,f):!c)return false}return true}function xt(n){var t=typeof n;return"function"==t?n:null==n?Ve:"object"==t?No(n)?At(n[0],n[1]):wt(n):Qe(n);
}function jt(n){n=null==n?n:Object(n);var t,r=[];for(t in n)r.push(t);return r}function mt(n,t){var r=-1,e=_e(n)?Array(n.length):[];return Ju(n,function(n,u,o){e[++r]=t(n,u,o)}),e}function wt(n){var t=Ar(n);if(1==t.length&&t[0][2]){var r=t[0][0],e=t[0][1];return function(n){return null==n?false:n[r]===e&&(e!==Z||r in Object(n))}}return function(r){return r===n||bt(r,n,t)}}function At(n,t){return function(r){var e=Me(r,n);return e===Z&&e===t?$e(r,n):yt(t,e,Z,3)}}function Ot(n,t,r,e,o){if(n!==t){var i=No(t)||Ie(t)?Z:Ne(t);
u(i||t,function(u,f){if(i&&(f=u,u=t[f]),xe(u)){o||(o=new $n);var c=f,a=o,l=n[c],s=t[c],h=a.get(s);if(!h){var h=e?e(l,s,c+"",n,t,a):Z,p=h===Z;p&&(h=s,No(s)||Ie(s)?No(l)?h=r?Yt(l):l:ge(l)?h=Yt(l):(p=false,h=tt(s)):Ae(s)||pe(s)?pe(l)?h=Ue(l):!xe(l)||r&&de(l)?(p=false,h=tt(s)):h=r?tt(l):l:p=false),a.set(s,h),p&&Ot(h,s,r,e,a)}Gn(n,c,h)}else c=e?e(n[f],u,f+"",n,t,o):Z,c===Z&&(c=u),Gn(n,f,c)})}}function kt(n,t,r){var e=-1,u=wr();return t=a(t.length?t:Array(1),function(n){return u(n)}),n=mt(n,function(n,r,u){return{
a:a(t,function(t){return t(n)}),b:++e,c:n}}),b(n,function(n,t){var e;n:{e=-1;for(var u=n.a,o=t.a,i=u.length,f=r.length;++e<i;){var c=I(u[e],o[e]);if(c){if(e>=f){e=c;break n}e=c*("desc"==r[e]?-1:1);break n}}e=n.b-t.b}return e})}function Et(n,t){return n=Object(n),s(t,function(t,r){return r in n&&(t[r]=n[r]),t},{})}function It(n,t){var r={};return ct(n,function(n,e){t(n,e)&&(r[e]=n)}),r}function St(n){return function(t){return null==t?Z:t[n]}}function Rt(n){return function(t){return ht(t,n)}}function Wt(n,t,r){
var e=-1,u=t.length,o=n;for(r&&(o=a(n,function(n){return r(n)}));++e<u;)for(var i=0,f=t[e],f=r?r(f):f;-1<(i=d(o,f,i));)o!==n&&Ou.call(o,i,1),Ou.call(n,i,1);return n}function Bt(n,t){for(var r=n?t.length:0,e=r-1;r--;){var u=t[r];if(e==r||u!=o){var o=u;if(U(u))Ou.call(n,u,1);else if(Cr(u,n))delete n[u];else{var u=Nt(u),i=$r(n,u);null!=i&&delete i[Kr(u)]}}}return n}function Ct(n,t){return n+Eu(Uu()*(t-n+1))}function Ut(n,t,r,e){t=Cr(t,n)?[t+""]:Nt(t);for(var u=-1,o=t.length,i=o-1,f=n;null!=f&&++u<o;){
var c=t[u];if(xe(f)){var a=r;if(u!=i){var l=f[c],a=e?e(l,c,f):Z;a===Z&&(a=null==l?U(t[u+1])?[]:{}:l)}Yn(f,c,a)}f=f[c]}return n}function zt(n,t,r){var e=-1,u=n.length;for(0>t&&(t=-t>u?0:u+t),r=r>u?u:r,0>r&&(r+=u),u=t>r?0:r-t>>>0,t>>>=0,r=Array(u);++e<u;)r[e]=n[e+t];return r}function Mt(n,t){var r;return Ju(n,function(n,e,u){return r=t(n,e,u),!r}),!!r}function Lt(n,t,r){var e=0,u=n?n.length:e;if(typeof t=="number"&&t===t&&2147483647>=u){for(;u>e;){var o=e+u>>>1,i=n[o];(r?t>=i:t>i)&&null!==i?e=o+1:u=o;
}return u}return $t(n,t,Ve,r)}function $t(n,t,r,e){t=r(t);for(var u=0,o=n?n.length:0,i=t!==t,f=null===t,c=t===Z;o>u;){var a=Eu((u+o)/2),l=r(n[a]),s=l!==Z,h=l===l;(i?h||e:f?h&&s&&(e||null!=l):c?h&&(e||s):null==l?0:e?t>=l:t>l)?u=a+1:o=a}return Bu(o,4294967294)}function Ft(n,t){for(var r=0,e=n.length,u=n[0],o=t?t(u):u,i=o,f=0,c=[u];++r<e;)u=n[r],o=t?t(u):u,se(o,i)||(i=o,c[++f]=u);return c}function Nt(n){return No(n)?n:Fr(n)}function Dt(n,t,r){var e=-1,u=f,o=n.length,i=true,a=[],l=a;if(r)i=false,u=c;else if(o<200)l=t?[]:a;else{
if(u=t?null:no(n))return $(u);i=false,u=Ln,l=new Mn}n:for(;++e<o;){var s=n[e],h=t?t(s):s;if(i&&h===h){for(var p=l.length;p--;)if(l[p]===h)continue n;t&&l.push(h),a.push(s)}else u(l,h,r)||(l!==a&&l.push(h),a.push(s))}return a}function Zt(n,t,r,e){for(var u=n.length,o=e?u:-1;(e?o--:++o<u)&&t(n[o],o,n););return r?zt(n,e?0:o,e?o+1:u):zt(n,e?o+1:0,e?u:o)}function qt(n,t){var r=n;return r instanceof An&&(r=r.value()),s(t,function(n,t){return t.func.apply(t.thisArg,l([n],t.args))},r)}function Pt(n,t,r){for(var e=-1,u=n.length;++e<u;)var o=o?l(ut(o,n[e],t,r),ut(n[e],o,t,r)):n[e];
return o&&o.length?Dt(o,t,r):[]}function Tt(n,t,r){for(var e=-1,u=n.length,o=t.length,i={};++e<u;)r(i,n[e],o>e?t[e]:Z);return i}function Kt(n,t){if(t)return n.slice();var r=new n.constructor(n.length);return n.copy(r),r}function Gt(n){var t=new n.constructor(n.byteLength);return new du(t).set(new du(n)),t}function Vt(n,t,r){for(var e=r.length,u=-1,o=Wu(n.length-e,0),i=-1,f=t.length,c=Array(f+o);++i<f;)c[i]=t[i];for(;++u<e;)c[r[u]]=n[u];for(;o--;)c[i++]=n[u++];return c}function Jt(n,t,r){for(var e=-1,u=r.length,o=-1,i=Wu(n.length-u,0),f=-1,c=t.length,a=Array(i+c);++o<i;)a[o]=n[o];
for(i=o;++f<c;)a[i+f]=t[f];for(;++e<u;)a[i+r[e]]=n[o++];return a}function Yt(n,t){var r=-1,e=n.length;for(t||(t=Array(e));++r<e;)t[r]=n[r];return t}function Ht(n,t,r){return Qt(n,t,r)}function Qt(n,t,r,e){r||(r={});for(var u=-1,o=t.length;++u<o;){var i=t[u],f=e?e(r[i],n[i],i,r,n):n[i];Yn(r,i,f)}return r}function Xt(n,t){return Ht(n,eo(n),t)}function nr(n,t){return function(r,u){var o=No(r)?e:Hn,i=t?t():{};return o(r,n,wr(u),i)}}function tr(n){return le(function(t,r){var e=-1,u=r.length,o=u>1?r[u-1]:Z,i=u>2?r[2]:Z,o=typeof o=="function"?(u--,
o):Z;for(i&&Br(r[0],r[1],i)&&(o=3>u?Z:o,u=1),t=Object(t);++e<u;)(i=r[e])&&n(t,i,e,o);return t})}function rr(n,t){return function(r,e){if(null==r)return r;if(!_e(r))return n(r,e);for(var u=r.length,o=t?u:-1,i=Object(r);(t?o--:++o<u)&&false!==e(i[o],o,i););return r}}function er(n){return function(t,r,e){var u=-1,o=Object(t);e=e(t);for(var i=e.length;i--;){var f=e[n?i:++u];if(false===r(o[f],f,o))break}return t}}function ur(n,t,r){function e(){return(this&&this!==Vn&&this instanceof e?o:n).apply(u?r:this,arguments);
}var u=1&t,o=fr(n);return e}function or(n){return function(t){t=ze(t);var r=En.test(t)?t.match(kn):Z,e=r?r[0]:t.charAt(0);return t=r?r.slice(1).join(""):t.slice(1),e[n]()+t}}function ir(n){return function(t){return s(Ke(Pe(t)),n,"")}}function fr(n){return function(){var t=arguments;switch(t.length){case 0:return new n;case 1:return new n(t[0]);case 2:return new n(t[0],t[1]);case 3:return new n(t[0],t[1],t[2]);case 4:return new n(t[0],t[1],t[2],t[3]);case 5:return new n(t[0],t[1],t[2],t[3],t[4]);case 6:
return new n(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new n(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var r=Vu(n.prototype),t=n.apply(r,t);return xe(t)?t:r}}function cr(n,t,e){function u(){for(var i=arguments.length,f=i,c=Array(i),a=this&&this!==Vn&&this instanceof u?o:n,l=yn.placeholder||u.placeholder;f--;)c[f]=arguments[f];return f=3>i&&c[0]!==l&&c[i-1]!==l?[]:L(c,l),i-=f.length,e>i?vr(n,t,lr,l,Z,c,f,Z,Z,e-i):r(a,this,c)}var o=fr(n);return u}function ar(n){return le(function(t){t=ft(t);var r=t.length,e=r,u=wn.prototype.thru;
for(n&&t.reverse();e--;){var o=t[e];if(typeof o!="function")throw new uu("Expected a function");if(u&&!i&&"wrapper"==mr(o))var i=new wn([],true)}for(e=i?e:r;++e<r;)var o=t[e],u=mr(o),f="wrapper"==u?to(o):Z,i=f&&zr(f[0])&&424==f[1]&&!f[4].length&&1==f[9]?i[mr(f[0])].apply(i,f[3]):1==o.length&&zr(o)?i[u]():i.thru(o);return function(){var n=arguments,e=n[0];if(i&&1==n.length&&No(e)&&e.length>=200)return i.plant(e).value();for(var u=0,n=r?t[u].apply(this,n):e;++u<r;)n=t[u].call(this,n);return n}})}function lr(n,t,r,e,u,o,i,f,c,a){
function l(){for(var y=arguments.length,b=y,x=Array(y);b--;)x[b]=arguments[b];if(e&&(x=Vt(x,e,u)),o&&(x=Jt(x,o,i)),_||g){var b=yn.placeholder||l.placeholder,j=L(x,b),y=y-j.length;if(a>y)return vr(n,t,lr,b,r,x,j,f,c,a-y)}if(y=h?r:this,b=p?y[n]:n,f)for(var j=x.length,m=Bu(f.length,j),w=Yt(x);m--;){var A=f[m];x[m]=U(A,j)?w[A]:Z}else v&&x.length>1&&x.reverse();return s&&x.length>c&&(x.length=c),this&&this!==Vn&&this instanceof l&&(b=d||fr(b)),b.apply(y,x)}var s=128&t,h=1&t,p=2&t,_=8&t,g=16&t,v=512&t,d=p?Z:fr(n);
return l}function sr(n,t){return function(r,e){return vt(r,n,t(e),{})}}function hr(n){return le(function(t){return t=a(ft(t),wr()),le(function(e){var u=this;return n(t,function(n){return r(n,u,e)})})})}function pr(n,t,r){return t=We(t),n=F(n),t&&t>n?(t-=n,r=r===Z?" ":r+"",n=Te(r,ku(t/F(r))),En.test(r)?n.match(kn).slice(0,t).join(""):n.slice(0,t)):""}function _r(n,t,e,u){function o(){for(var t=-1,c=arguments.length,a=-1,l=u.length,s=Array(l+c),h=this&&this!==Vn&&this instanceof o?f:n;++a<l;)s[a]=u[a];
for(;c--;)s[a++]=arguments[++t];return r(h,i?e:this,s)}var i=1&t,f=fr(n);return o}function gr(n){return function(t,r,e){e&&typeof e!="number"&&Br(t,r,e)&&(r=e=Z),t=Ce(t),t=t===t?t:0,r===Z?(r=t,t=0):r=Ce(r)||0,e=e===Z?r>t?1:-1:Ce(e)||0;var u=-1;r=Wu(ku((r-t)/(e||1)),0);for(var o=Array(r);r--;)o[n?r:++u]=t,t+=e;return o}}function vr(n,t,r,e,u,o,i,f,c,a){var l=8&t;f=f?Yt(f):Z;var s=l?i:Z;i=l?Z:i;var h=l?o:Z;return o=l?Z:o,t=(t|(l?32:64))&~(l?64:32),4&t||(t&=-4),t=[n,t,u,h,s,o,i,f,c,a],r=r.apply(Z,t),
zr(n)&&uo(r,t),r.placeholder=e,r}function dr(n){var t=ru[n];return function(n,r){if(n=Ce(n),r=We(r)){var e=(ze(n)+"e").split("e"),e=t(e[0]+"e"+(+e[1]+r)),e=(ze(e)+"e").split("e");return+(e[0]+"e"+(+e[1]-r))}return t(n)}}function yr(n,t,r,e,u,o,i,f){var c=2&t;if(!c&&typeof n!="function")throw new uu("Expected a function");var a=e?e.length:0;if(a||(t&=-97,e=u=Z),i=i===Z?i:Wu(We(i),0),f=f===Z?f:We(f),a-=u?u.length:0,64&t){var l=e,s=u;e=u=Z}var h=c?Z:to(n);return o=[n,t,r,e,u,l,s,o,i,f],h&&(r=o[1],n=h[1],
t=r|n,e=128==n&&8==r||128==n&&256==r&&h[8]>=o[7].length||384==n&&h[8]>=h[7].length&&8==r,131>t||e)&&(1&n&&(o[2]=h[2],t|=1&r?0:4),(r=h[3])&&(e=o[3],o[3]=e?Vt(e,r,h[4]):Yt(r),o[4]=e?L(o[3],"__lodash_placeholder__"):Yt(h[4])),(r=h[5])&&(e=o[5],o[5]=e?Jt(e,r,h[6]):Yt(r),o[6]=e?L(o[5],"__lodash_placeholder__"):Yt(h[6])),(r=h[7])&&(o[7]=Yt(r)),128&n&&(o[8]=null==o[8]?h[8]:Bu(o[8],h[8])),null==o[9]&&(o[9]=h[9]),o[0]=h[0],o[1]=t),n=o[0],t=o[1],r=o[2],e=o[3],u=o[4],f=o[9]=null==o[9]?c?0:n.length:Wu(o[9]-a,0),
!f&&24&t&&(t&=-25),c=t&&1!=t?8==t||16==t?cr(n,t,f):32!=t&&33!=t||u.length?lr.apply(Z,o):_r(n,t,r,e):ur(n,t,r),(h?Xu:uo)(c,o)}function br(n,t,r,e,u,o){var i=-1,f=2&u,c=1&u,a=n.length,l=t.length;if(!(a==l||f&&l>a))return false;if(l=o.get(n))return l==t;for(l=true,o.set(n,t);++i<a;){var s=n[i],h=t[i];if(e)var _=f?e(h,s,i,t,n,o):e(s,h,i,n,t,o);if(_!==Z){if(_)continue;l=false;break}if(c){if(!p(t,function(n){return s===n||r(s,n,e,u,o)})){l=false;break}}else if(s!==h&&!r(s,h,e,u,o)){l=false;break}}return o["delete"](n),
l}function xr(n,t,r,e,u,o){switch(r){case"[object ArrayBuffer]":if(n.byteLength!=t.byteLength||!e(new du(n),new du(t)))break;return true;case"[object Boolean]":case"[object Date]":return+n==+t;case"[object Error]":return n.name==t.name&&n.message==t.message;case"[object Number]":return n!=+n?t!=+t:n==+t;case"[object RegExp]":case"[object String]":return n==t+"";case"[object Map]":var i=M;case"[object Set]":return i||(i=$),(2&o||n.size==t.size)&&e(i(n),i(t),u,1|o);case"[object Symbol]":return!!vu&&Tu.call(n)==Tu.call(t);
}return false}function jr(n,t,r,e,u,o){var i=2&u,f=Fe(n),c=f.length,a=Fe(t).length;if(c!=a&&!i)return false;for(var l=c;l--;){var s=f[l];if(!(i?s in t:pt(t,s)))return false}if(a=o.get(n))return a==t;a=true,o.set(n,t);for(var h=i;++l<c;){var s=f[l],p=n[s],_=t[s];if(e)var g=i?e(_,p,s,t,n,o):e(p,_,s,n,t,o);if(g===Z?p!==_&&!r(p,_,e,u,o):!g){a=false;break}h||(h="constructor"==s)}return a&&!h&&(r=n.constructor,e=t.constructor,r!=e&&"constructor"in n&&"constructor"in t&&!(typeof r=="function"&&r instanceof r&&typeof e=="function"&&e instanceof e)&&(a=false)),
o["delete"](n),a}function mr(n){for(var t=n.name+"",r=Gu[t],e=cu.call(Gu,t)?r.length:0;e--;){var u=r[e],o=u.func;if(null==o||o==n)return u.name}return t}function wr(){var n=yn.iteratee||Je,n=n===Je?xt:n;return arguments.length?n(arguments[0],arguments[1]):n}function Ar(n){n=De(n);for(var t=n.length;t--;){var r,e=n[t];r=n[t][1],r=r===r&&!xe(r),e[2]=r}return n}function Or(n,t){var r=null==n?Z:n[t];return me(r)?r:Z}function kr(n){return su.call(n)}function Er(n,t,r){if(null==n)return false;var e=r(n,t);return e||Cr(t)||(t=Nt(t),
n=$r(n,t),null!=n&&(t=Kr(t),e=r(n,t))),r=n?n.length:Z,e||!!r&&be(r)&&U(t,r)&&(No(n)||ke(n)||pe(n))}function Ir(n){var t=n.length,r=n.constructor(t);return t&&"string"==typeof n[0]&&cu.call(n,"index")&&(r.index=n.index,r.input=n.input),r}function Sr(n){return Mr(n)?{}:(n=n.constructor,Vu(de(n)?n.prototype:Z))}function Rr(r,e,u){var o=r.constructor;switch(e){case"[object ArrayBuffer]":return Gt(r);case"[object Boolean]":case"[object Date]":return new o(+r);case"[object Float32Array]":case"[object Float64Array]":
case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":case"[object Uint16Array]":case"[object Uint32Array]":return e=r.buffer,new r.constructor(u?Gt(e):e,r.byteOffset,r.length);case"[object Map]":return u=r.constructor,s(M(r),n,new u);case"[object Number]":case"[object String]":return new o(r);case"[object RegExp]":return u=new r.constructor(r.source,hn.exec(r)),u.lastIndex=r.lastIndex,u;case"[object Set]":return u=r.constructor,
s($(r),t,new u);case"[object Symbol]":return vu?Object(Tu.call(r)):{}}}function Wr(n){var t=n?n.length:Z;return be(t)&&(No(n)||ke(n)||pe(n))?j(t,String):null}function Br(n,t,r){if(!xe(r))return false;var e=typeof t;return("number"==e?_e(r)&&U(t,r.length):"string"==e&&t in r)?se(r[t],n):false}function Cr(n,t){return typeof n=="number"?true:!No(n)&&(rn.test(n)||!tn.test(n)||null!=t&&n in Object(t))}function Ur(n){var t=typeof n;return"number"==t||"boolean"==t||"string"==t&&"__proto__"!==n||null==n}function zr(n){
var t=mr(n),r=yn[t];return typeof r=="function"&&t in An.prototype?n===r?true:(t=to(r),!!t&&n===t[0]):false}function Mr(n){var t=n&&n.constructor;return n===(typeof t=="function"&&t.prototype||iu)}function Lr(n,t,r,e,u,o){return xe(n)&&xe(t)&&(o.set(t,n),Ot(n,t,Z,Lr,o)),n}function $r(n,t){return 1==t.length?n:Me(n,zt(t,0,-1))}function Fr(n){var t=[];return ze(n).replace(en,function(n,r,e,u){t.push(e?u.replace(ln,"$1"):r||n)}),t}function Nr(n){return ge(n)?n:[]}function Dr(n){return typeof n=="function"?n:Ve;
}function Zr(n){if(n instanceof An)return n.clone();var t=new wn(n.__wrapped__,n.__chain__);return t.__actions__=Yt(n.__actions__),t.__index__=n.__index__,t.__values__=n.__values__,t}function qr(n,t,r){var e=n?n.length:0;return e?(t=r||t===Z?1:We(t),zt(n,0>t?0:t,e)):[]}function Pr(n,t,r){var e=n?n.length:0;return e?(t=r||t===Z?1:We(t),t=e-t,zt(n,0,0>t?0:t)):[]}function Tr(n){return n?n[0]:Z}function Kr(n){var t=n?n.length:0;return t?n[t-1]:Z}function Gr(n,t){return n&&n.length&&t&&t.length?Wt(n,t):n;
}function Vr(n){return n?zu.call(n):n}function Jr(n){if(!n||!n.length)return[];var t=0;return n=i(n,function(n){return ge(n)?(t=Wu(n.length,t),true):void 0}),j(t,function(t){return a(n,St(t))})}function Yr(n,t){if(!n||!n.length)return[];var e=Jr(n);return null==t?e:a(e,function(n){return r(t,Z,n)})}function Hr(n){return n=yn(n),n.__chain__=true,n}function Qr(n,t){return t(n)}function Xr(){return this}function ne(n,t){return typeof t=="function"&&No(n)?u(n,t):Ju(n,Dr(t))}function te(n,t){var r;if(typeof t=="function"&&No(n)){
for(r=n.length;r--&&false!==t(n[r],r,n););r=n}else r=Yu(n,Dr(t));return r}function re(n,t){return(No(n)?a:mt)(n,wr(t,3))}function ee(n,t){var r=-1,e=Re(n),u=e.length,o=u-1;for(t=nt(We(t),0,u);++r<t;){var u=Ct(r,o),i=e[u];e[u]=e[r],e[r]=i}return e.length=t,e}function ue(n,t,r){return t=r?Z:t,t=n&&null==t?n.length:t,yr(n,128,Z,Z,Z,Z,t)}function oe(n,t){var r;if(typeof t!="function")throw new uu("Expected a function");return n=We(n),function(){return 0<--n&&(r=t.apply(this,arguments)),1>=n&&(t=Z),r}}function ie(n,t,r){
return t=r?Z:t,n=yr(n,8,Z,Z,Z,Z,Z,t),n.placeholder=yn.placeholder||ie.placeholder,n}function fe(n,t,r){return t=r?Z:t,n=yr(n,16,Z,Z,Z,Z,Z,t),n.placeholder=yn.placeholder||fe.placeholder,n}function ce(n,t,r){function e(){p&&yu(p),a&&yu(a),g=0,c=a=h=p=_=Z}function u(t,r){r&&yu(r),a=p=_=Z,t&&(g=Wo(),l=n.apply(h,c),p||a||(c=h=Z))}function o(){var n=t-(Wo()-s);0>=n||n>t?u(_,a):p=Au(o,n)}function i(){u(y,p)}function f(){if(c=arguments,s=Wo(),h=this,_=y&&(p||!v),false===d)var r=v&&!p;else{g||a||v||(g=s);var e=d-(s-g),u=0>=e||e>d;
u?(a&&(a=yu(a)),g=s,l=n.apply(h,c)):a||(a=Au(i,e))}return u&&p?p=yu(p):p||t===d||(p=Au(o,t)),r&&(u=true,l=n.apply(h,c)),!u||p||a||(c=h=Z),l}var c,a,l,s,h,p,_,g=0,v=false,d=false,y=true;if(typeof n!="function")throw new uu("Expected a function");return t=Ce(t)||0,xe(r)&&(v=!!r.leading,d="maxWait"in r&&Wu(Ce(r.maxWait)||0,t),y="trailing"in r?!!r.trailing:y),f.cancel=e,f.flush=function(){return(p&&_||a&&y)&&(l=n.apply(h,c)),e(),l},f}function ae(n,t){if(typeof n!="function"||t&&typeof t!="function")throw new uu("Expected a function");
var r=function(){var e=arguments,u=t?t.apply(this,e):e[0],o=r.cache;return o.has(u)?o.get(u):(e=n.apply(this,e),r.cache=o.set(u,e),e)};return r.cache=new ae.Cache,r}function le(n,t){if(typeof n!="function")throw new uu("Expected a function");return t=Wu(t===Z?n.length-1:We(t),0),function(){for(var e=arguments,u=-1,o=Wu(e.length-t,0),i=Array(o);++u<o;)i[u]=e[t+u];switch(t){case 0:return n.call(this,i);case 1:return n.call(this,e[0],i);case 2:return n.call(this,e[0],e[1],i)}for(o=Array(t+1),u=-1;++u<t;)o[u]=e[u];
return o[t]=i,r(n,this,o)}}function se(n,t){return n===t||n!==n&&t!==t}function he(n,t){return n>t}function pe(n){return ge(n)&&cu.call(n,"callee")&&(!wu.call(n,"callee")||"[object Arguments]"==su.call(n))}function _e(n){return null!=n&&!(typeof n=="function"&&de(n))&&be(ro(n))}function ge(n){return je(n)&&_e(n)}function ve(n){return je(n)&&typeof n.message=="string"&&"[object Error]"==su.call(n)}function de(n){return n=xe(n)?su.call(n):"","[object Function]"==n||"[object GeneratorFunction]"==n}function ye(n){
return typeof n=="number"&&n==We(n)}function be(n){return typeof n=="number"&&n>-1&&0==n%1&&9007199254740991>=n}function xe(n){var t=typeof n;return!!n&&("object"==t||"function"==t)}function je(n){return!!n&&typeof n=="object"}function me(n){return null==n?false:de(n)?pu.test(fu.call(n)):je(n)&&(C(n)?pu:vn).test(n)}function we(n){return typeof n=="number"||je(n)&&"[object Number]"==su.call(n)}function Ae(n){if(!je(n)||"[object Object]"!=su.call(n)||C(n))return false;var t=iu;return typeof n.constructor=="function"&&(t=xu(n)),
null===t?true:(n=t.constructor,typeof n=="function"&&n instanceof n&&fu.call(n)==lu)}function Oe(n){return xe(n)&&"[object RegExp]"==su.call(n)}function ke(n){return typeof n=="string"||!No(n)&&je(n)&&"[object String]"==su.call(n)}function Ee(n){return typeof n=="symbol"||je(n)&&"[object Symbol]"==su.call(n)}function Ie(n){return je(n)&&be(n.length)&&!!Bn[su.call(n)]}function Se(n,t){return t>n}function Re(n){if(!n)return[];if(_e(n))return ke(n)?n.match(kn):Yt(n);if(mu&&n[mu])return z(n[mu]());var t=kr(n);
return("[object Map]"==t?M:"[object Set]"==t?$:Ze)(n)}function We(n){if(!n)return 0===n?n:0;if(n=Ce(n),n===q||n===-q)return 1.7976931348623157e308*(0>n?-1:1);var t=n%1;return n===n?t?n-t:n:0}function Be(n){return n?nt(We(n),0,4294967295):0}function Ce(n){if(xe(n)&&(n=de(n.valueOf)?n.valueOf():n,n=xe(n)?n+"":n),typeof n!="string")return 0===n?n:+n;n=n.replace(fn,"");var t=gn.test(n);return t||dn.test(n)?Nn(n.slice(2),t?2:8):_n.test(n)?P:+n}function Ue(n){return Ht(n,Ne(n))}function ze(n){if(typeof n=="string")return n;
if(null==n)return"";if(Ee(n))return vu?Ku.call(n):"";var t=n+"";return"0"==t&&1/n==-q?"-0":t}function Me(n,t,r){return n=null==n?Z:ht(n,t),n===Z?r:n}function Le(n,t){return Er(n,t,pt)}function $e(n,t){return Er(n,t,_t)}function Fe(n){var t=Mr(n);if(!t&&!_e(n))return Ru(Object(n));var r,e=Wr(n),u=!!e,e=e||[],o=e.length;for(r in n)!pt(n,r)||u&&("length"==r||U(r,o))||t&&"constructor"==r||e.push(r);return e}function Ne(n){for(var t=-1,r=Mr(n),e=jt(n),u=e.length,o=Wr(n),i=!!o,o=o||[],f=o.length;++t<u;){
var c=e[t];i&&("length"==c||U(c,f))||"constructor"==c&&(r||!cu.call(n,c))||o.push(c)}return o}function De(n){return m(n,Fe(n))}function Ze(n){return n?A(n,Fe(n)):[]}function qe(n){return ii(ze(n).toLowerCase())}function Pe(n){return(n=ze(n))&&n.replace(bn,S).replace(On,"")}function Te(n,t){n=ze(n),t=We(t);var r="";if(!n||1>t||t>9007199254740991)return r;do t%2&&(r+=n),t=Eu(t/2),n+=n;while(t);return r}function Ke(n,t,r){return n=ze(n),t=r?Z:t,t===Z&&(t=Rn.test(n)?Sn:In),n.match(t)||[]}function Ge(n){
return function(){return n}}function Ve(n){return n}function Je(n){return xt(typeof n=="function"?n:tt(n,true))}function Ye(n,t,r){var e=Fe(t),o=st(t,e);null!=r||xe(t)&&(o.length||!e.length)||(r=t,t=n,n=this,o=st(t,Fe(t)));var i=xe(r)&&"chain"in r?r.chain:true,f=de(n);return u(o,function(r){var e=t[r];n[r]=e,f&&(n.prototype[r]=function(){var t=this.__chain__;if(i||t){var r=n(this.__wrapped__);return(r.__actions__=Yt(this.__actions__)).push({func:e,args:arguments,thisArg:n}),r.__chain__=t,r}return e.apply(n,l([this.value()],arguments));
})}),n}function He(){}function Qe(n){return Cr(n)?St(n):Rt(n)}function Xe(n){return n&&n.length?x(n,Ve):0}E=E?Jn.defaults({},E,Jn.pick(Vn,Wn)):Vn;var nu=E.Date,tu=E.Error,ru=E.Math,eu=E.RegExp,uu=E.TypeError,ou=E.Array.prototype,iu=E.Object.prototype,fu=E.Function.prototype.toString,cu=iu.hasOwnProperty,au=0,lu=fu.call(Object),su=iu.toString,hu=Vn._,pu=eu("^"+fu.call(cu).replace(un,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),_u=Kn?E.Buffer:Z,gu=E.Reflect,vu=E.Symbol,du=E.Uint8Array,yu=E.clearTimeout,bu=gu?gu.enumerate:Z,xu=Object.getPrototypeOf,ju=Object.getOwnPropertySymbols,mu=typeof(mu=vu&&vu.iterator)=="symbol"?mu:Z,wu=iu.propertyIsEnumerable,Au=E.setTimeout,Ou=ou.splice,ku=ru.ceil,Eu=ru.floor,Iu=E.isFinite,Su=ou.join,Ru=Object.keys,Wu=ru.max,Bu=ru.min,Cu=E.parseInt,Uu=ru.random,zu=ou.reverse,Mu=Or(E,"Map"),Lu=Or(E,"Set"),$u=Or(E,"WeakMap"),Fu=Or(Object,"create"),Nu=$u&&new $u,Du=Mu?fu.call(Mu):"",Zu=Lu?fu.call(Lu):"",qu=$u?fu.call($u):"",Pu=vu?vu.prototype:Z,Tu=vu?Pu.valueOf:Z,Ku=vu?Pu.toString:Z,Gu={};
yn.templateSettings={escape:Q,evaluate:X,interpolate:nn,variable:"",imports:{_:yn}};var Vu=function(){function n(){}return function(t){if(xe(t)){n.prototype=t;var r=new n;n.prototype=Z}return r||{}}}(),Ju=rr(at),Yu=rr(lt,true),Hu=er(),Qu=er(true);bu&&!wu.call({valueOf:1},"valueOf")&&(jt=function(n){return z(bu(n))});var Xu=Nu?function(n,t){return Nu.set(n,t),n}:Ve,no=Lu&&2===new Lu([1,2]).size?function(n){return new Lu(n)}:He,to=Nu?function(n){return Nu.get(n)}:He,ro=St("length"),eo=ju||function(){return[];
};(Mu&&"[object Map]"!=kr(new Mu)||Lu&&"[object Set]"!=kr(new Lu)||$u&&"[object WeakMap]"!=kr(new $u))&&(kr=function(n){var t=su.call(n);if(n="[object Object]"==t?n.constructor:null,n=typeof n=="function"?fu.call(n):"")switch(n){case Du:return"[object Map]";case Zu:return"[object Set]";case qu:return"[object WeakMap]"}return t});var uo=function(){var n=0,t=0;return function(r,e){var u=Wo(),o=16-(u-t);if(t=u,o>0){if(150<=++n)return r}else n=0;return Xu(r,e)}}(),oo=le(function(n,t){No(n)||(n=null==n?[]:[Object(n)]),
t=ft(t);for(var r=n,e=t,u=-1,o=r.length,i=-1,f=e.length,c=Array(o+f);++u<o;)c[u]=r[u];for(;++i<f;)c[u++]=e[i];return c}),io=le(function(n,t){return ge(n)?ut(n,ft(t,false,true)):[]}),fo=le(function(n,t){var r=Kr(t);return ge(r)&&(r=Z),ge(n)?ut(n,ft(t,false,true),wr(r)):[]}),co=le(function(n,t){var r=Kr(t);return ge(r)&&(r=Z),ge(n)?ut(n,ft(t,false,true),Z,r):[]}),ao=le(function(n){var t=a(n,Nr);return t.length&&t[0]===n[0]?gt(t):[]}),lo=le(function(n){var t=Kr(n),r=a(n,Nr);return t===Kr(r)?t=Z:r.pop(),r.length&&r[0]===n[0]?gt(r,wr(t)):[];
}),so=le(function(n){var t=Kr(n),r=a(n,Nr);return t===Kr(r)?t=Z:r.pop(),r.length&&r[0]===n[0]?gt(r,Z,t):[]}),ho=le(Gr),po=le(function(n,t){t=a(ft(t),String);var r=Xn(n,t);return Bt(n,t.sort(I)),r}),_o=le(function(n){return Dt(ft(n,false,true))}),go=le(function(n){var t=Kr(n);return ge(t)&&(t=Z),Dt(ft(n,false,true),wr(t))}),vo=le(function(n){var t=Kr(n);return ge(t)&&(t=Z),Dt(ft(n,false,true),Z,t)}),yo=le(function(n,t){return ge(n)?ut(n,t):[]}),bo=le(function(n){return Pt(i(n,ge))}),xo=le(function(n){var t=Kr(n);
return ge(t)&&(t=Z),Pt(i(n,ge),wr(t))}),jo=le(function(n){var t=Kr(n);return ge(t)&&(t=Z),Pt(i(n,ge),Z,t)}),mo=le(Jr),wo=le(function(n){var t=n.length,t=t>1?n[t-1]:Z,t=typeof t=="function"?(n.pop(),t):Z;return Yr(n,t)}),Ao=le(function(n){n=ft(n);var t=n.length,r=t?n[0]:0,e=this.__wrapped__,u=function(t){return Xn(t,n)};return 1>=t&&!this.__actions__.length&&e instanceof An&&U(r)?(e=e.slice(r,+r+(t?1:0)),e.__actions__.push({func:Qr,args:[u],thisArg:Z}),new wn(e,this.__chain__).thru(function(n){return t&&!n.length&&n.push(Z),
n})):this.thru(u)}),Oo=nr(function(n,t,r){cu.call(n,r)?++n[r]:n[r]=1}),ko=nr(function(n,t,r){cu.call(n,r)?n[r].push(t):n[r]=[t]}),Eo=le(function(n,t,e){var u=-1,o=typeof t=="function",i=Cr(t),f=_e(n)?Array(n.length):[];return Ju(n,function(n){var c=o?t:i&&null!=n?n[t]:Z;f[++u]=c?r(c,n,e):dt(n,t,e)}),f}),Io=nr(function(n,t,r){n[r]=t}),So=nr(function(n,t,r){n[r?0:1].push(t)},function(){return[[],[]]}),Ro=le(function(n,t){if(null==n)return[];var r=t.length;return r>1&&Br(n,t[0],t[1])?t=[]:r>2&&Br(t[0],t[1],t[2])&&(t.length=1),
kt(n,ft(t),[])}),Wo=nu.now,Bo=le(function(n,t,r){var e=1;if(r.length)var u=L(r,yn.placeholder||Bo.placeholder),e=32|e;return yr(n,e,t,r,u)}),Co=le(function(n,t,r){var e=3;if(r.length)var u=L(r,yn.placeholder||Co.placeholder),e=32|e;return yr(t,e,n,r,u)}),Uo=le(function(n,t){return et(n,1,t)}),zo=le(function(n,t,r){return et(n,Ce(t)||0,r)}),Mo=le(function(n,t){t=a(ft(t),wr());var e=t.length;return le(function(u){for(var o=-1,i=Bu(u.length,e);++o<i;)u[o]=t[o].call(this,u[o]);return r(n,this,u)})}),Lo=le(function(n,t){
var r=L(t,yn.placeholder||Lo.placeholder);return yr(n,32,Z,t,r)}),$o=le(function(n,t){var r=L(t,yn.placeholder||$o.placeholder);return yr(n,64,Z,t,r)}),Fo=le(function(n,t){return yr(n,256,Z,Z,Z,ft(t))}),No=Array.isArray,Do=_u?function(n){return n instanceof _u}:Ge(false),Zo=tr(function(n,t){Ht(t,Fe(t),n)}),qo=tr(function(n,t){Ht(t,Ne(t),n)}),Po=tr(function(n,t,r,e){Qt(t,Ne(t),n,e)}),To=tr(function(n,t,r,e){Qt(t,Fe(t),n,e)}),Ko=le(function(n,t){return Xn(n,ft(t))}),Go=le(function(n){return n.push(Z,Tn),
r(Po,Z,n)}),Vo=le(function(n){return n.push(Z,Lr),r(Xo,Z,n)}),Jo=sr(function(n,t,r){n[t]=r},Ge(Ve)),Yo=sr(function(n,t,r){cu.call(n,t)?n[t].push(r):n[t]=[r]},wr),Ho=le(dt),Qo=tr(function(n,t,r){Ot(n,t,r)}),Xo=tr(function(n,t,r,e){Ot(n,t,r,e)}),ni=le(function(n,t){return null==n?{}:(t=a(ft(t),String),Et(n,ut(Ne(n),t)))}),ti=le(function(n,t){return null==n?{}:Et(n,ft(t))}),ri=ir(function(n,t,r){return t=t.toLowerCase(),n+(r?qe(t):t)}),ei=ir(function(n,t,r){return n+(r?"-":"")+t.toLowerCase()}),ui=ir(function(n,t,r){
return n+(r?" ":"")+t.toLowerCase()}),oi=or("toLowerCase"),ii=or("toUpperCase"),fi=ir(function(n,t,r){return n+(r?"_":"")+t.toLowerCase()}),ci=ir(function(n,t,r){return n+(r?" ":"")+qe(t)}),ai=ir(function(n,t,r){return n+(r?" ":"")+t.toUpperCase()}),li=le(function(n,t){try{return r(n,Z,t)}catch(e){return xe(e)?e:new tu(e)}}),si=le(function(n,t){return u(ft(t),function(t){n[t]=Bo(n[t],n)}),n}),hi=ar(),pi=ar(true),_i=le(function(n,t){return function(r){return dt(r,n,t)}}),gi=le(function(n,t){return function(r){
return dt(n,r,t)}}),vi=hr(a),di=hr(o),yi=hr(p),bi=gr(),xi=gr(true),ji=dr("ceil"),mi=dr("floor"),wi=dr("round");return yn.prototype=mn.prototype,wn.prototype=Vu(mn.prototype),wn.prototype.constructor=wn,An.prototype=Vu(mn.prototype),An.prototype.constructor=An,Un.prototype=Fu?Fu(null):iu,zn.prototype.clear=function(){this.__data__={hash:new Un,map:Mu?new Mu:[],string:new Un}},zn.prototype["delete"]=function(n){var t=this.__data__;return Ur(n)?(t=typeof n=="string"?t.string:t.hash,(Fu?t[n]!==Z:cu.call(t,n))&&delete t[n]):Mu?t.map["delete"](n):Dn(t.map,n);
},zn.prototype.get=function(n){var t=this.__data__;return Ur(n)?(t=typeof n=="string"?t.string:t.hash,Fu?(n=t[n],n="__lodash_hash_undefined__"===n?Z:n):n=cu.call(t,n)?t[n]:Z,n):Mu?t.map.get(n):Zn(t.map,n)},zn.prototype.has=function(n){var t=this.__data__;return Ur(n)?(t=typeof n=="string"?t.string:t.hash,n=Fu?t[n]!==Z:cu.call(t,n)):n=Mu?t.map.has(n):-1<qn(t.map,n),n},zn.prototype.set=function(n,t){var r=this.__data__;return Ur(n)?(typeof n=="string"?r.string:r.hash)[n]=Fu&&t===Z?"__lodash_hash_undefined__":t:Mu?r.map.set(n,t):Pn(r.map,n,t),
this},Mn.prototype.push=function(n){var t=this.__data__;Ur(n)?(t=t.__data__,(typeof n=="string"?t.string:t.hash)[n]="__lodash_hash_undefined__"):t.set(n,"__lodash_hash_undefined__")},$n.prototype.clear=function(){this.__data__={array:[],map:null}},$n.prototype["delete"]=function(n){var t=this.__data__,r=t.array;return r?Dn(r,n):t.map["delete"](n)},$n.prototype.get=function(n){var t=this.__data__,r=t.array;return r?Zn(r,n):t.map.get(n)},$n.prototype.has=function(n){var t=this.__data__,r=t.array;return r?-1<qn(r,n):t.map.has(n);
},$n.prototype.set=function(n,t){var r=this.__data__,e=r.array;return e&&(199>e.length?Pn(e,n,t):(r.array=null,r.map=new zn(e))),(r=r.map)&&r.set(n,t),this},ae.Cache=zn,yn.after=function(n,t){if(typeof t!="function")throw new uu("Expected a function");return n=We(n),function(){return 1>--n?t.apply(this,arguments):void 0}},yn.ary=ue,yn.assign=Zo,yn.assignIn=qo,yn.assignInWith=Po,yn.assignWith=To,yn.at=Ko,yn.before=oe,yn.bind=Bo,yn.bindAll=si,yn.bindKey=Co,yn.chain=Hr,yn.chunk=function(n,t){t=Wu(We(t),0);
var r=n?n.length:0;if(!r||1>t)return[];for(var e=0,u=-1,o=Array(ku(r/t));r>e;)o[++u]=zt(n,e,e+=t);return o},yn.compact=function(n){for(var t=-1,r=n?n.length:0,e=-1,u=[];++t<r;){var o=n[t];o&&(u[++e]=o)}return u},yn.concat=oo,yn.cond=function(n){var t=n?n.length:0,e=wr();return n=t?a(n,function(n){if("function"!=typeof n[1])throw new uu("Expected a function");return[e(n[0]),n[1]]}):[],le(function(e){for(var u=-1;++u<t;){var o=n[u];if(r(o[0],this,e))return r(o[1],this,e)}})},yn.conforms=function(n){
return rt(tt(n,true))},yn.constant=Ge,yn.countBy=Oo,yn.create=function(n,t){var r=Vu(n);return t?Qn(r,t):r},yn.curry=ie,yn.curryRight=fe,yn.debounce=ce,yn.defaults=Go,yn.defaultsDeep=Vo,yn.defer=Uo,yn.delay=zo,yn.difference=io,yn.differenceBy=fo,yn.differenceWith=co,yn.drop=qr,yn.dropRight=Pr,yn.dropRightWhile=function(n,t){return n&&n.length?Zt(n,wr(t,3),true,true):[]},yn.dropWhile=function(n,t){return n&&n.length?Zt(n,wr(t,3),true):[]},yn.fill=function(n,t,r,e){var u=n?n.length:0;if(!u)return[];for(r&&typeof r!="number"&&Br(n,t,r)&&(r=0,
e=u),u=n.length,r=We(r),0>r&&(r=-r>u?0:u+r),e=e===Z||e>u?u:We(e),0>e&&(e+=u),e=r>e?0:Be(e);e>r;)n[r++]=t;return n},yn.filter=function(n,t){return(No(n)?i:it)(n,wr(t,3))},yn.flatMap=function(n,t){return ft(re(n,t))},yn.flatten=function(n){return n&&n.length?ft(n):[]},yn.flattenDeep=function(n){return n&&n.length?ft(n,true):[]},yn.flip=function(n){return yr(n,512)},yn.flow=hi,yn.flowRight=pi,yn.fromPairs=function(n){for(var t=-1,r=n?n.length:0,e={};++t<r;){var u=n[t];e[u[0]]=u[1]}return e},yn.functions=function(n){
return null==n?[]:st(n,Fe(n))},yn.functionsIn=function(n){return null==n?[]:st(n,Ne(n))},yn.groupBy=ko,yn.initial=function(n){return Pr(n,1)},yn.intersection=ao,yn.intersectionBy=lo,yn.intersectionWith=so,yn.invert=Jo,yn.invertBy=Yo,yn.invokeMap=Eo,yn.iteratee=Je,yn.keyBy=Io,yn.keys=Fe,yn.keysIn=Ne,yn.map=re,yn.mapKeys=function(n,t){var r={};return t=wr(t,3),at(n,function(n,e,u){r[t(n,e,u)]=n}),r},yn.mapValues=function(n,t){var r={};return t=wr(t,3),at(n,function(n,e,u){r[e]=t(n,e,u)}),r},yn.matches=function(n){
return wt(tt(n,true))},yn.matchesProperty=function(n,t){return At(n,tt(t,true))},yn.memoize=ae,yn.merge=Qo,yn.mergeWith=Xo,yn.method=_i,yn.methodOf=gi,yn.mixin=Ye,yn.negate=function(n){if(typeof n!="function")throw new uu("Expected a function");return function(){return!n.apply(this,arguments)}},yn.nthArg=function(n){return n=We(n),function(){return arguments[n]}},yn.omit=ni,yn.omitBy=function(n,t){return t=wr(t,2),It(n,function(n,r){return!t(n,r)})},yn.once=function(n){return oe(2,n)},yn.orderBy=function(n,t,r,e){
return null==n?[]:(No(t)||(t=null==t?[]:[t]),r=e?Z:r,No(r)||(r=null==r?[]:[r]),kt(n,t,r))},yn.over=vi,yn.overArgs=Mo,yn.overEvery=di,yn.overSome=yi,yn.partial=Lo,yn.partialRight=$o,yn.partition=So,yn.pick=ti,yn.pickBy=function(n,t){return null==n?{}:It(n,wr(t,2))},yn.property=Qe,yn.propertyOf=function(n){return function(t){return null==n?Z:ht(n,t)}},yn.pull=ho,yn.pullAll=Gr,yn.pullAllBy=function(n,t,r){return n&&n.length&&t&&t.length?Wt(n,t,wr(r)):n},yn.pullAt=po,yn.range=bi,yn.rangeRight=xi,yn.rearg=Fo,
yn.reject=function(n,t){var r=No(n)?i:it;return t=wr(t,3),r(n,function(n,r,e){return!t(n,r,e)})},yn.remove=function(n,t){var r=[];if(!n||!n.length)return r;var e=-1,u=[],o=n.length;for(t=wr(t,3);++e<o;){var i=n[e];t(i,e,n)&&(r.push(i),u.push(e))}return Bt(n,u),r},yn.rest=le,yn.reverse=Vr,yn.sampleSize=ee,yn.set=function(n,t,r){return null==n?n:Ut(n,t,r)},yn.setWith=function(n,t,r,e){return e=typeof e=="function"?e:Z,null==n?n:Ut(n,t,r,e)},yn.shuffle=function(n){return ee(n,4294967295)},yn.slice=function(n,t,r){
var e=n?n.length:0;return e?(r&&typeof r!="number"&&Br(n,t,r)?(t=0,r=e):(t=null==t?0:We(t),r=r===Z?e:We(r)),zt(n,t,r)):[]},yn.sortBy=Ro,yn.sortedUniq=function(n){return n&&n.length?Ft(n):[]},yn.sortedUniqBy=function(n,t){return n&&n.length?Ft(n,wr(t)):[]},yn.split=function(n,t,r){return ze(n).split(t,r)},yn.spread=function(n,t){if(typeof n!="function")throw new uu("Expected a function");return t=t===Z?0:Wu(We(t),0),le(function(e){var u=e[t];return e=e.slice(0,t),u&&l(e,u),r(n,this,e)})},yn.tail=function(n){
return qr(n,1)},yn.take=function(n,t,r){return n&&n.length?(t=r||t===Z?1:We(t),zt(n,0,0>t?0:t)):[]},yn.takeRight=function(n,t,r){var e=n?n.length:0;return e?(t=r||t===Z?1:We(t),t=e-t,zt(n,0>t?0:t,e)):[]},yn.takeRightWhile=function(n,t){return n&&n.length?Zt(n,wr(t,3),false,true):[]},yn.takeWhile=function(n,t){return n&&n.length?Zt(n,wr(t,3)):[]},yn.tap=function(n,t){return t(n),n},yn.throttle=function(n,t,r){var e=true,u=true;if(typeof n!="function")throw new uu("Expected a function");return xe(r)&&(e="leading"in r?!!r.leading:e,
u="trailing"in r?!!r.trailing:u),ce(n,t,{leading:e,maxWait:t,trailing:u})},yn.thru=Qr,yn.toArray=Re,yn.toPairs=De,yn.toPairsIn=function(n){return m(n,Ne(n))},yn.toPath=function(n){return No(n)?a(n,String):Fr(n)},yn.toPlainObject=Ue,yn.transform=function(n,t,r){var e=No(n)||Ie(n);if(t=wr(t,4),null==r)if(e||xe(n)){var o=n.constructor;r=e?No(n)?new o:[]:Vu(de(o)?o.prototype:Z)}else r={};return(e?u:at)(n,function(n,e,u){return t(r,n,e,u)}),r},yn.unary=function(n){return ue(n,1)},yn.union=_o,yn.unionBy=go,
yn.unionWith=vo,yn.uniq=function(n){return n&&n.length?Dt(n):[]},yn.uniqBy=function(n,t){return n&&n.length?Dt(n,wr(t)):[]},yn.uniqWith=function(n,t){return n&&n.length?Dt(n,Z,t):[]},yn.unset=function(n,t){var r;if(null==n)r=true;else{r=n;var e=t,e=Cr(e,r)?[e+""]:Nt(e);r=$r(r,e),e=Kr(e),r=null!=r&&Le(r,e)?delete r[e]:true}return r},yn.unzip=Jr,yn.unzipWith=Yr,yn.values=Ze,yn.valuesIn=function(n){return null==n?A(n,Ne(n)):[]},yn.without=yo,yn.words=Ke,yn.wrap=function(n,t){return t=null==t?Ve:t,Lo(t,n);
},yn.xor=bo,yn.xorBy=xo,yn.xorWith=jo,yn.zip=mo,yn.zipObject=function(n,t){return Tt(n||[],t||[],Yn)},yn.zipObjectDeep=function(n,t){return Tt(n||[],t||[],Ut)},yn.zipWith=wo,yn.extend=qo,yn.extendWith=Po,Ye(yn,yn),yn.add=function(n,t){var r;return n===Z&&t===Z?0:(n!==Z&&(r=n),t!==Z&&(r=r===Z?t:r+t),r)},yn.attempt=li,yn.camelCase=ri,yn.capitalize=qe,yn.ceil=ji,yn.clamp=function(n,t,r){return r===Z&&(r=t,t=Z),r!==Z&&(r=Ce(r),r=r===r?r:0),t!==Z&&(t=Ce(t),t=t===t?t:0),nt(Ce(n),t,r)},yn.clone=function(n){
return tt(n)},yn.cloneDeep=function(n){return tt(n,true)},yn.cloneDeepWith=function(n,t){return tt(n,true,t)},yn.cloneWith=function(n,t){return tt(n,false,t)},yn.deburr=Pe,yn.endsWith=function(n,t,r){n=ze(n),t=typeof t=="string"?t:t+"";var e=n.length;return r=r===Z?e:nt(We(r),0,e),r-=t.length,r>=0&&n.indexOf(t,r)==r},yn.eq=se,yn.escape=function(n){return(n=ze(n))&&H.test(n)?n.replace(J,R):n},yn.escapeRegExp=function(n){return(n=ze(n))&&on.test(n)?n.replace(un,"\\$&"):n},yn.every=function(n,t,r){var e=No(n)?o:ot;
return r&&Br(n,t,r)&&(t=Z),e(n,wr(t,3))},yn.find=function(n,t){if(t=wr(t,3),No(n)){var r=v(n,t);return r>-1?n[r]:Z}return g(n,t,Ju)},yn.findIndex=function(n,t){return n&&n.length?v(n,wr(t,3)):-1},yn.findKey=function(n,t){return g(n,wr(t,3),at,true)},yn.findLast=function(n,t){if(t=wr(t,3),No(n)){var r=v(n,t,true);return r>-1?n[r]:Z}return g(n,t,Yu)},yn.findLastIndex=function(n,t){return n&&n.length?v(n,wr(t,3),true):-1},yn.findLastKey=function(n,t){return g(n,wr(t,3),lt,true)},yn.floor=mi,yn.forEach=ne,yn.forEachRight=te,
yn.forIn=function(n,t){return null==n?n:Hu(n,Dr(t),Ne)},yn.forInRight=function(n,t){return null==n?n:Qu(n,Dr(t),Ne)},yn.forOwn=function(n,t){return n&&at(n,Dr(t))},yn.forOwnRight=function(n,t){return n&&lt(n,Dr(t))},yn.get=Me,yn.gt=he,yn.gte=function(n,t){return n>=t},yn.has=Le,yn.hasIn=$e,yn.head=Tr,yn.identity=Ve,yn.includes=function(n,t,r,e){return n=_e(n)?n:Ze(n),r=r&&!e?We(r):0,e=n.length,0>r&&(r=Wu(e+r,0)),ke(n)?e>=r&&-1<n.indexOf(t,r):!!e&&-1<d(n,t,r)},yn.indexOf=function(n,t,r){var e=n?n.length:0;
return e?(r=We(r),0>r&&(r=Wu(e+r,0)),d(n,t,r)):-1},yn.inRange=function(n,t,r){return t=Ce(t)||0,r===Z?(r=t,t=0):r=Ce(r)||0,n=Ce(n),n>=Bu(t,r)&&n<Wu(t,r)},yn.invoke=Ho,yn.isArguments=pe,yn.isArray=No,yn.isArrayBuffer=function(n){return je(n)&&"[object ArrayBuffer]"==su.call(n)},yn.isArrayLike=_e,yn.isArrayLikeObject=ge,yn.isBoolean=function(n){return true===n||false===n||je(n)&&"[object Boolean]"==su.call(n)},yn.isBuffer=Do,yn.isDate=function(n){return je(n)&&"[object Date]"==su.call(n)},yn.isElement=function(n){
return!!n&&1===n.nodeType&&je(n)&&!Ae(n)},yn.isEmpty=function(n){if(_e(n)&&(No(n)||ke(n)||de(n.splice)||pe(n)))return!n.length;for(var t in n)if(cu.call(n,t))return false;return true},yn.isEqual=function(n,t){return yt(n,t)},yn.isEqualWith=function(n,t,r){var e=(r=typeof r=="function"?r:Z)?r(n,t):Z;return e===Z?yt(n,t,r):!!e},yn.isError=ve,yn.isFinite=function(n){return typeof n=="number"&&Iu(n)},yn.isFunction=de,yn.isInteger=ye,yn.isLength=be,yn.isMap=function(n){return je(n)&&"[object Map]"==kr(n)},yn.isMatch=function(n,t){
return n===t||bt(n,t,Ar(t))},yn.isMatchWith=function(n,t,r){return r=typeof r=="function"?r:Z,bt(n,t,Ar(t),r)},yn.isNaN=function(n){return we(n)&&n!=+n},yn.isNative=me,yn.isNil=function(n){return null==n},yn.isNull=function(n){return null===n},yn.isNumber=we,yn.isObject=xe,yn.isObjectLike=je,yn.isPlainObject=Ae,yn.isRegExp=Oe,yn.isSafeInteger=function(n){return ye(n)&&n>=-9007199254740991&&9007199254740991>=n},yn.isSet=function(n){return je(n)&&"[object Set]"==kr(n)},yn.isString=ke,yn.isSymbol=Ee,
yn.isTypedArray=Ie,yn.isUndefined=function(n){return n===Z},yn.isWeakMap=function(n){return je(n)&&"[object WeakMap]"==kr(n)},yn.isWeakSet=function(n){return je(n)&&"[object WeakSet]"==su.call(n)},yn.join=function(n,t){return n?Su.call(n,t):""},yn.kebabCase=ei,yn.last=Kr,yn.lastIndexOf=function(n,t,r){var e=n?n.length:0;if(!e)return-1;var u=e;if(r!==Z&&(u=We(r),u=(0>u?Wu(e+u,0):Bu(u,e-1))+1),t!==t)return B(n,u,true);for(;u--;)if(n[u]===t)return u;return-1},yn.lowerCase=ui,yn.lowerFirst=oi,yn.lt=Se,
yn.lte=function(n,t){return t>=n},yn.max=function(n){return n&&n.length?_(n,Ve,he):Z},yn.maxBy=function(n,t){return n&&n.length?_(n,wr(t),he):Z},yn.mean=function(n){return Xe(n)/(n?n.length:0)},yn.min=function(n){return n&&n.length?_(n,Ve,Se):Z},yn.minBy=function(n,t){return n&&n.length?_(n,wr(t),Se):Z},yn.noConflict=function(){return Vn._===this&&(Vn._=hu),this},yn.noop=He,yn.now=Wo,yn.pad=function(n,t,r){n=ze(n),t=We(t);var e=F(n);return t&&t>e?(e=(t-e)/2,t=Eu(e),e=ku(e),pr("",t,r)+n+pr("",e,r)):n;
},yn.padEnd=function(n,t,r){return n=ze(n),n+pr(n,t,r)},yn.padStart=function(n,t,r){return n=ze(n),pr(n,t,r)+n},yn.parseInt=function(n,t,r){return r||null==t?t=0:t&&(t=+t),n=ze(n).replace(fn,""),Cu(n,t||(pn.test(n)?16:10))},yn.random=function(n,t,r){if(r&&typeof r!="boolean"&&Br(n,t,r)&&(t=r=Z),r===Z&&(typeof t=="boolean"?(r=t,t=Z):typeof n=="boolean"&&(r=n,n=Z)),n===Z&&t===Z?(n=0,t=1):(n=Ce(n)||0,t===Z?(t=n,n=0):t=Ce(t)||0),n>t){var e=n;n=t,t=e}return r||n%1||t%1?(r=Uu(),Bu(n+r*(t-n+Fn("1e-"+((r+"").length-1))),t)):Ct(n,t);
},yn.reduce=function(n,t,r){var e=No(n)?s:y,u=3>arguments.length;return e(n,wr(t,4),r,u,Ju)},yn.reduceRight=function(n,t,r){var e=No(n)?h:y,u=3>arguments.length;return e(n,wr(t,4),r,u,Yu)},yn.repeat=Te,yn.replace=function(){var n=arguments,t=ze(n[0]);return 3>n.length?t:t.replace(n[1],n[2])},yn.result=function(n,t,r){if(Cr(t,n))e=null==n?Z:n[t];else{t=Nt(t);var e=Me(n,t);n=$r(n,t)}return e===Z&&(e=r),de(e)?e.call(n):e},yn.round=wi,yn.runInContext=D,yn.sample=function(n){n=_e(n)?n:Ze(n);var t=n.length;
return t>0?n[Ct(0,t-1)]:Z},yn.size=function(n){if(null==n)return 0;if(_e(n)){var t=n.length;return t&&ke(n)?F(n):t}return Fe(n).length},yn.snakeCase=fi,yn.some=function(n,t,r){var e=No(n)?p:Mt;return r&&Br(n,t,r)&&(t=Z),e(n,wr(t,3))},yn.sortedIndex=function(n,t){return Lt(n,t)},yn.sortedIndexBy=function(n,t,r){return $t(n,t,wr(r))},yn.sortedIndexOf=function(n,t){var r=n?n.length:0;if(r){var e=Lt(n,t);if(r>e&&se(n[e],t))return e}return-1},yn.sortedLastIndex=function(n,t){return Lt(n,t,true)},yn.sortedLastIndexBy=function(n,t,r){
return $t(n,t,wr(r),true)},yn.sortedLastIndexOf=function(n,t){if(n&&n.length){var r=Lt(n,t,true)-1;if(se(n[r],t))return r}return-1},yn.startCase=ci,yn.startsWith=function(n,t,r){return n=ze(n),r=nt(We(r),0,n.length),n.lastIndexOf(t,r)==r},yn.subtract=function(n,t){var r;return n===Z&&t===Z?0:(n!==Z&&(r=n),t!==Z&&(r=r===Z?t:r-t),r)},yn.sum=Xe,yn.sumBy=function(n,t){return n&&n.length?x(n,wr(t)):0},yn.template=function(n,t,r){var e=yn.templateSettings;r&&Br(n,t,r)&&(t=Z),n=ze(n),t=Po({},t,e,Tn),r=Po({},t.imports,e.imports,Tn);
var u,o,i=Fe(r),f=A(r,i),c=0;r=t.interpolate||xn;var a="__p+='";r=eu((t.escape||xn).source+"|"+r.source+"|"+(r===nn?sn:xn).source+"|"+(t.evaluate||xn).source+"|$","g");var l="sourceURL"in t?"//# sourceURL="+t.sourceURL+"\n":"";if(n.replace(r,function(t,r,e,i,f,l){return e||(e=i),a+=n.slice(c,l).replace(jn,W),r&&(u=true,a+="'+__e("+r+")+'"),f&&(o=true,a+="';"+f+";\n__p+='"),e&&(a+="'+((__t=("+e+"))==null?'':__t)+'"),c=l+t.length,t}),a+="';",(t=t.variable)||(a="with(obj){"+a+"}"),a=(o?a.replace(T,""):a).replace(K,"$1").replace(G,"$1;"),
a="function("+(t||"obj")+"){"+(t?"":"obj||(obj={});")+"var __t,__p=''"+(u?",__e=_.escape":"")+(o?",__j=Array.prototype.join;function print(){__p+=__j.call(arguments,'')}":";")+a+"return __p}",t=li(function(){return Function(i,l+"return "+a).apply(Z,f)}),t.source=a,ve(t))throw t;return t},yn.times=function(n,t){if(n=We(n),1>n||n>9007199254740991)return[];var r=4294967295,e=Bu(n,4294967295);for(t=Dr(t),n-=4294967295,e=j(e,t);++r<n;)t(r);return e},yn.toInteger=We,yn.toLength=Be,yn.toLower=function(n){
return ze(n).toLowerCase()},yn.toNumber=Ce,yn.toSafeInteger=function(n){return nt(We(n),-9007199254740991,9007199254740991)},yn.toString=ze,yn.toUpper=function(n){return ze(n).toUpperCase()},yn.trim=function(n,t,r){return(n=ze(n))?r||t===Z?n.replace(fn,""):(t+="")?(n=n.match(kn),t=t.match(kn),n.slice(O(n,t),k(n,t)+1).join("")):n:n},yn.trimEnd=function(n,t,r){return(n=ze(n))?r||t===Z?n.replace(an,""):(t+="")?(n=n.match(kn),n.slice(0,k(n,t.match(kn))+1).join("")):n:n},yn.trimStart=function(n,t,r){return(n=ze(n))?r||t===Z?n.replace(cn,""):(t+="")?(n=n.match(kn),
n.slice(O(n,t.match(kn))).join("")):n:n},yn.truncate=function(n,t){var r=30,e="...";if(xe(t))var u="separator"in t?t.separator:u,r="length"in t?We(t.length):r,e="omission"in t?ze(t.omission):e;n=ze(n);var o=n.length;if(En.test(n))var i=n.match(kn),o=i.length;if(r>=o)return n;if(o=r-F(e),1>o)return e;if(r=i?i.slice(0,o).join(""):n.slice(0,o),u===Z)return r+e;if(i&&(o+=r.length-o),Oe(u)){if(n.slice(o).search(u)){var f=r;for(u.global||(u=eu(u.source,ze(hn.exec(u))+"g")),u.lastIndex=0;i=u.exec(f);)var c=i.index;
r=r.slice(0,c===Z?o:c)}}else n.indexOf(u,o)!=o&&(u=r.lastIndexOf(u),u>-1&&(r=r.slice(0,u)));return r+e},yn.unescape=function(n){return(n=ze(n))&&Y.test(n)?n.replace(V,N):n},yn.uniqueId=function(n){var t=++au;return ze(n)+t},yn.upperCase=ai,yn.upperFirst=ii,yn.each=ne,yn.eachRight=te,yn.first=Tr,Ye(yn,function(){var n={};return at(yn,function(t,r){cu.call(yn.prototype,r)||(n[r]=t)}),n}(),{chain:false}),yn.VERSION="4.3.0",u("bind bindKey curry curryRight partial partialRight".split(" "),function(n){yn[n].placeholder=yn;
}),u(["drop","take"],function(n,t){An.prototype[n]=function(r){var e=this.__filtered__;if(e&&!t)return new An(this);r=r===Z?1:Wu(We(r),0);var u=this.clone();return e?u.__takeCount__=Bu(r,u.__takeCount__):u.__views__.push({size:Bu(r,4294967295),type:n+(0>u.__dir__?"Right":"")}),u},An.prototype[n+"Right"]=function(t){return this.reverse()[n](t).reverse()}}),u(["filter","map","takeWhile"],function(n,t){var r=t+1,e=1==r||3==r;An.prototype[n]=function(n){var t=this.clone();return t.__iteratees__.push({
iteratee:wr(n,3),type:r}),t.__filtered__=t.__filtered__||e,t}}),u(["head","last"],function(n,t){var r="take"+(t?"Right":"");An.prototype[n]=function(){return this[r](1).value()[0]}}),u(["initial","tail"],function(n,t){var r="drop"+(t?"":"Right");An.prototype[n]=function(){return this.__filtered__?new An(this):this[r](1)}}),An.prototype.compact=function(){return this.filter(Ve)},An.prototype.find=function(n){return this.filter(n).head()},An.prototype.findLast=function(n){return this.reverse().find(n);
},An.prototype.invokeMap=le(function(n,t){return typeof n=="function"?new An(this):this.map(function(r){return dt(r,n,t)})}),An.prototype.reject=function(n){return n=wr(n,3),this.filter(function(t){return!n(t)})},An.prototype.slice=function(n,t){n=We(n);var r=this;return r.__filtered__&&(n>0||0>t)?new An(r):(0>n?r=r.takeRight(-n):n&&(r=r.drop(n)),t!==Z&&(t=We(t),r=0>t?r.dropRight(-t):r.take(t-n)),r)},An.prototype.takeRightWhile=function(n){return this.reverse().takeWhile(n).reverse()},An.prototype.toArray=function(){
return this.take(4294967295)},at(An.prototype,function(n,t){var r=/^(?:filter|find|map|reject)|While$/.test(t),e=/^(?:head|last)$/.test(t),u=yn[e?"take"+("last"==t?"Right":""):t],o=e||/^find/.test(t);u&&(yn.prototype[t]=function(){var t=this.__wrapped__,i=e?[1]:arguments,f=t instanceof An,c=i[0],a=f||No(t),s=function(n){return n=u.apply(yn,l([n],i)),e&&h?n[0]:n};a&&r&&typeof c=="function"&&1!=c.length&&(f=a=false);var h=this.__chain__,p=!!this.__actions__.length,c=o&&!h,f=f&&!p;return!o&&a?(t=f?t:new An(this),
t=n.apply(t,i),t.__actions__.push({func:Qr,args:[s],thisArg:Z}),new wn(t,h)):c&&f?n.apply(this,i):(t=this.thru(s),c?e?t.value()[0]:t.value():t)})}),u("pop push shift sort splice unshift".split(" "),function(n){var t=ou[n],r=/^(?:push|sort|unshift)$/.test(n)?"tap":"thru",e=/^(?:pop|shift)$/.test(n);yn.prototype[n]=function(){var n=arguments;return e&&!this.__chain__?t.apply(this.value(),n):this[r](function(r){return t.apply(r,n)})}}),at(An.prototype,function(n,t){var r=yn[t];if(r){var e=r.name+"";(Gu[e]||(Gu[e]=[])).push({
name:t,func:r})}}),Gu[lr(Z,2).name]=[{name:"wrapper",func:Z}],An.prototype.clone=function(){var n=new An(this.__wrapped__);return n.__actions__=Yt(this.__actions__),n.__dir__=this.__dir__,n.__filtered__=this.__filtered__,n.__iteratees__=Yt(this.__iteratees__),n.__takeCount__=this.__takeCount__,n.__views__=Yt(this.__views__),n},An.prototype.reverse=function(){if(this.__filtered__){var n=new An(this);n.__dir__=-1,n.__filtered__=true}else n=this.clone(),n.__dir__*=-1;return n},An.prototype.value=function(){
var n,t=this.__wrapped__.value(),r=this.__dir__,e=No(t),u=0>r,o=e?t.length:0;n=0;for(var i=o,f=this.__views__,c=-1,a=f.length;++c<a;){var l=f[c],s=l.size;switch(l.type){case"drop":n+=s;break;case"dropRight":i-=s;break;case"take":i=Bu(i,n+s);break;case"takeRight":n=Wu(n,i-s)}}if(n={start:n,end:i},i=n.start,f=n.end,n=f-i,u=u?f:i-1,i=this.__iteratees__,f=i.length,c=0,a=Bu(n,this.__takeCount__),!e||200>o||o==n&&a==n)return qt(t,this.__actions__);e=[];n:for(;n--&&a>c;){for(u+=r,o=-1,l=t[u];++o<f;){var h=i[o],s=h.type,h=(0,
h.iteratee)(l);if(2==s)l=h;else if(!h){if(1==s)continue n;break n}}e[c++]=l}return e},yn.prototype.at=Ao,yn.prototype.chain=function(){return Hr(this)},yn.prototype.commit=function(){return new wn(this.value(),this.__chain__)},yn.prototype.flatMap=function(n){return this.map(n).flatten()},yn.prototype.next=function(){this.__values__===Z&&(this.__values__=Re(this.value()));var n=this.__index__>=this.__values__.length,t=n?Z:this.__values__[this.__index__++];return{done:n,value:t}},yn.prototype.plant=function(n){
for(var t,r=this;r instanceof mn;){var e=Zr(r);e.__index__=0,e.__values__=Z,t?u.__wrapped__=e:t=e;var u=e,r=r.__wrapped__}return u.__wrapped__=n,t},yn.prototype.reverse=function(){var n=this.__wrapped__;return n instanceof An?(this.__actions__.length&&(n=new An(this)),n=n.reverse(),n.__actions__.push({func:Qr,args:[Vr],thisArg:Z}),new wn(n,this.__chain__)):this.thru(Vr)},yn.prototype.toJSON=yn.prototype.valueOf=yn.prototype.value=function(){return qt(this.__wrapped__,this.__actions__)},mu&&(yn.prototype[mu]=Xr),
yn}var Z,q=1/0,P=NaN,T=/\b__p\+='';/g,K=/\b(__p\+=)''\+/g,G=/(__e\(.*?\)|\b__t\))\+'';/g,V=/&(?:amp|lt|gt|quot|#39|#96);/g,J=/[&<>"'`]/g,Y=RegExp(V.source),H=RegExp(J.source),Q=/<%-([\s\S]+?)%>/g,X=/<%([\s\S]+?)%>/g,nn=/<%=([\s\S]+?)%>/g,tn=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,rn=/^\w*$/,en=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]/g,un=/[\\^$.*+?()[\]{}|]/g,on=RegExp(un.source),fn=/^\s+|\s+$/g,cn=/^\s+/,an=/\s+$/,ln=/\\(\\)?/g,sn=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,hn=/\w*$/,pn=/^0x/i,_n=/^[-+]0x[0-9a-f]+$/i,gn=/^0b[01]+$/i,vn=/^\[object .+?Constructor\]$/,dn=/^0o[0-7]+$/i,yn=/^(?:0|[1-9]\d*)$/,bn=/[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g,xn=/($^)/,jn=/['\n\r\u2028\u2029\\]/g,mn="[\\ufe0e\\ufe0f]?(?:[\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]|\\ud83c[\\udffb-\\udfff])?(?:\\u200d(?:[^\\ud800-\\udfff]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff])[\\ufe0e\\ufe0f]?(?:[\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]|\\ud83c[\\udffb-\\udfff])?)*",wn="(?:[\\u2700-\\u27bf]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff])"+mn,An="(?:[^\\ud800-\\udfff][\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]?|[\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\ud800-\\udfff])",On=RegExp("[\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]","g"),kn=RegExp("\\ud83c[\\udffb-\\udfff](?=\\ud83c[\\udffb-\\udfff])|"+An+mn,"g"),En=RegExp("[\\u200d\\ud800-\\udfff\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0\\ufe0e\\ufe0f]"),In=/[a-zA-Z0-9]+/g,Sn=RegExp(["[A-Z\\xc0-\\xd6\\xd8-\\xde]?[a-z\\xdf-\\xf6\\xf8-\\xff]+(?=[\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2018\\u2019\\u201c\\u201d \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000]|[A-Z\\xc0-\\xd6\\xd8-\\xde]|$)|(?:[A-Z\\xc0-\\xd6\\xd8-\\xde]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2018\\u2019\\u201c\\u201d \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])+(?=[\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2018\\u2019\\u201c\\u201d \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000]|[A-Z\\xc0-\\xd6\\xd8-\\xde](?:[a-z\\xdf-\\xf6\\xf8-\\xff]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2018\\u2019\\u201c\\u201d \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])|$)|[A-Z\\xc0-\\xd6\\xd8-\\xde]?(?:[a-z\\xdf-\\xf6\\xf8-\\xff]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2018\\u2019\\u201c\\u201d \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])+|[A-Z\\xc0-\\xd6\\xd8-\\xde]+|\\d+",wn].join("|"),"g"),Rn=/[a-z][A-Z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Wn="Array Buffer Date Error Float32Array Float64Array Function Int8Array Int16Array Int32Array Map Math Object Reflect RegExp Set String Symbol TypeError Uint8Array Uint8ClampedArray Uint16Array Uint32Array WeakMap _ clearTimeout isFinite parseInt setTimeout".split(" "),Bn={};
Bn["[object Float32Array]"]=Bn["[object Float64Array]"]=Bn["[object Int8Array]"]=Bn["[object Int16Array]"]=Bn["[object Int32Array]"]=Bn["[object Uint8Array]"]=Bn["[object Uint8ClampedArray]"]=Bn["[object Uint16Array]"]=Bn["[object Uint32Array]"]=true,Bn["[object Arguments]"]=Bn["[object Array]"]=Bn["[object ArrayBuffer]"]=Bn["[object Boolean]"]=Bn["[object Date]"]=Bn["[object Error]"]=Bn["[object Function]"]=Bn["[object Map]"]=Bn["[object Number]"]=Bn["[object Object]"]=Bn["[object RegExp]"]=Bn["[object Set]"]=Bn["[object String]"]=Bn["[object WeakMap]"]=false;
var Cn={};Cn["[object Arguments]"]=Cn["[object Array]"]=Cn["[object ArrayBuffer]"]=Cn["[object Boolean]"]=Cn["[object Date]"]=Cn["[object Float32Array]"]=Cn["[object Float64Array]"]=Cn["[object Int8Array]"]=Cn["[object Int16Array]"]=Cn["[object Int32Array]"]=Cn["[object Map]"]=Cn["[object Number]"]=Cn["[object Object]"]=Cn["[object RegExp]"]=Cn["[object Set]"]=Cn["[object String]"]=Cn["[object Symbol]"]=Cn["[object Uint8Array]"]=Cn["[object Uint8ClampedArray]"]=Cn["[object Uint16Array]"]=Cn["[object Uint32Array]"]=true,
Cn["[object Error]"]=Cn["[object Function]"]=Cn["[object WeakMap]"]=false;var Un={"\xc0":"A","\xc1":"A","\xc2":"A","\xc3":"A","\xc4":"A","\xc5":"A","\xe0":"a","\xe1":"a","\xe2":"a","\xe3":"a","\xe4":"a","\xe5":"a","\xc7":"C","\xe7":"c","\xd0":"D","\xf0":"d","\xc8":"E","\xc9":"E","\xca":"E","\xcb":"E","\xe8":"e","\xe9":"e","\xea":"e","\xeb":"e","\xcc":"I","\xcd":"I","\xce":"I","\xcf":"I","\xec":"i","\xed":"i","\xee":"i","\xef":"i","\xd1":"N","\xf1":"n","\xd2":"O","\xd3":"O","\xd4":"O","\xd5":"O","\xd6":"O",
"\xd8":"O","\xf2":"o","\xf3":"o","\xf4":"o","\xf5":"o","\xf6":"o","\xf8":"o","\xd9":"U","\xda":"U","\xdb":"U","\xdc":"U","\xf9":"u","\xfa":"u","\xfb":"u","\xfc":"u","\xdd":"Y","\xfd":"y","\xff":"y","\xc6":"Ae","\xe6":"ae","\xde":"Th","\xfe":"th","\xdf":"ss"},zn={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","`":"&#96;"},Mn={"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'","&#96;":"`"},Ln={"function":true,object:true},$n={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"
},Fn=parseFloat,Nn=parseInt,Dn=Ln[typeof exports]&&exports&&!exports.nodeType?exports:null,Zn=Ln[typeof module]&&module&&!module.nodeType?module:null,qn=E(Dn&&Zn&&typeof global=="object"&&global),Pn=E(Ln[typeof self]&&self),Tn=E(Ln[typeof window]&&window),Kn=Zn&&Zn.exports===Dn?Dn:null,Gn=E(Ln[typeof this]&&this),Vn=qn||Tn!==(Gn&&Gn.window)&&Tn||Pn||Gn||Function("return this")(),Jn=D();(Tn||Pn||{})._=Jn,typeof define=="function"&&typeof define.amd=="object"&&define.amd? define(function(){return Jn;
}):Dn&&Zn?(Kn&&((Zn.exports=Jn)._=Jn),Dn._=Jn):Vn._=Jn}).call(this);
'use strict';

var Bahmni = Bahmni || {};
Bahmni.Common = Bahmni.Common || {};
Bahmni.Common.Util = Bahmni.Common.Util || {};

angular.module('bahmni.common.util', [])
    .provider('$bahmniCookieStore', [function () {
        var self = this;
        self.defaultOptions = {};

        self.setDefaultOptions = function (options) {
            self.defaultOptions = options;
        };

        self.$get = function () {
            return {
                get: function (name) {
                    var jsonCookie = $.cookie(name);
                    if (jsonCookie) {
                        return angular.fromJson(jsonCookie);
                    }
                },
                put: function (name, value, options) {
                    options = $.extend({}, self.defaultOptions, options);
                    $.cookie(name, angular.toJson(value), options);
                },
                remove: function (name, options) {
                    options = $.extend({}, self.defaultOptions, options);
                    $.removeCookie(name, options);
                }
            };
        };
    }])
;

var Bahmni = Bahmni || {};
Bahmni.Common = Bahmni.Common || {};
Bahmni.Common.Models = Bahmni.Common.Models || {};

angular.module('bahmni.common.models', []);

'use strict';

angular.module('bahmni.common.models')
    .factory('age', [function () {
        var dateUtil = Bahmni.Common.Util.DateUtil;

        var fromBirthDate = function (birthDate) {
            var today = dateUtil.now();
            var period = dateUtil.diffInYearsMonthsDays(birthDate, today);
            return create(period.years, period.months, period.days);
        };

        var create = function (years, months, days) {
            var isEmpty = function () {
                return !(this.years || this.months || this.days);
            };

            return {
                years: years,
                months: months,
                days: days,
                isEmpty: isEmpty
            };
        };

        var calculateBirthDate = function (age) {
            var birthDate = dateUtil.now();
            birthDate = dateUtil.subtractYears(birthDate, age.years);
            birthDate = dateUtil.subtractMonths(birthDate, age.months);
            birthDate = dateUtil.subtractDays(birthDate, age.days);
            return birthDate;
        };

        return {
            fromBirthDate: fromBirthDate,
            create: create,
            calculateBirthDate: calculateBirthDate
        };
    }]
);

angular.module('FredrikSandell.worker-pool', []).service('WorkerService', [
    '$q',
    function ($q) {
        var that = {};
        //this should be configured from the app in the future
        var urlToAngular = 'http://localhost:9876/base/bower_components/angular/angular.js';
        var serviceToUrlMap = {};
        var storage = {};
        var scriptsToLoad = [];
        that.setAngularUrl = function (urlToAngularJs) {
            urlToAngular = urlToAngularJs;
        };
        function createAngularWorkerTemplate() {
            /*jshint laxcomma:true */
            /*jshint quotmark: false */
            var workerTemplate = [
                '',
                '//try {',
                'var window = self;',
                'self.history = {};',
                'var Node = function() {};',
                'var app',
                'var localStorage = {storage: <STORAGE>, getItem: function(key) {return this.storage[key]}, setItem: function(key, value) {this.storage[key]=value}}',
                'var document = {',
                '      readyState: \'complete\',',
                '      cookie: \'\',',
                '      querySelector: function () {},',
                '      createElement: function () {',
                '          return {',
                '              pathname: \'\',',
                '              setAttribute: function () {}',
                '          };',
                '      }',
                '};',
                'importScripts(\'<URL_TO_ANGULAR>\');',
                '<CUSTOM_DEP_INCLUDES>',
                'angular = window.angular;',
                'var workerApp = angular.module(\'WorkerApp\', [<DEP_MODULES>]);',
                'workerApp.run([\'$q\'<STRING_DEP_NAMES>, function ($q<DEP_NAMES>) {',
                '  self.addEventListener(\'message\', function(e) {',
                '    var input = e.data;',
                '    var output = $q.defer();',
                '    var promise = output.promise;',
                '    promise.then(function(success) {',
                '      self.postMessage({event:\'success\', data : success});',
                '    }, function(reason) {',
                '      self.postMessage({event:\'failure\', data : reason});',
                '    }, function(update) {',
                '      self.postMessage({event:\'update\', data : update});',
                '    });',
                '    <WORKER_FUNCTION>;',
                '  });',
                '  self.postMessage({event:\'initDone\'});',
                '}]);',
                'angular.bootstrap(null, [\'WorkerApp\']);',
                '//} catch(e) {self.postMessage(JSON.stringify(e));}'
            ];
            return workerTemplate.join('\n');
        }
        var workerTemplate = createAngularWorkerTemplate();
        that.addDependency = function (serviceName, moduleName, url) {
            serviceToUrlMap[serviceName] = {
                url: url,
                moduleName: moduleName
            };
            return that;
        };
        that.includeScripts = function(url) {
            scriptsToLoad.push(url);
        };
        that.addToLocalStorage = function(key, value) {
            storage[key] = value;
        };
        function createIncludeStatements(listOfServiceNames) {
            var includeString = '';
            angular.forEach(scriptsToLoad, function(script) {
                includeString += 'importScripts(\'' + script + '\');';
            });

            angular.forEach(listOfServiceNames, function (serviceName) {
                if (serviceToUrlMap[serviceName]) {
                    includeString += 'importScripts(\'' + serviceToUrlMap[serviceName].url + '\');';
                }
            });
            return includeString;
        }
        function createModuleList(listOfServiceNames) {
            var moduleNameList = [];
            angular.forEach(listOfServiceNames, function (serviceName) {
                if (serviceToUrlMap[serviceName]) {
                    moduleNameList.push('\'' + serviceToUrlMap[serviceName].moduleName + '\'');
                }
            });
            return moduleNameList.join(',');
        }
        function createDependencyMetaData(dependencyList) {
            var dependencyServiceNames = dependencyList.filter(function (dep) {
                return dep !== 'input' && dep !== 'output' && dep !== '$q';
            });
            var depMetaData = {
                dependencies: dependencyServiceNames,
                moduleList: createModuleList(dependencyServiceNames),
                angularDepsAsStrings: dependencyServiceNames.length > 0 ? ',' + dependencyServiceNames.map(function (dep) {
                    return '\'' + dep + '\'';
                }).join(',') : '',
                angularDepsAsParamList: dependencyServiceNames.length > 0 ? ',' + dependencyServiceNames.join(',') : '',
                servicesIncludeStatements: createIncludeStatements(dependencyServiceNames)
            };
            depMetaData.workerFuncParamList = 'input,output' + depMetaData.angularDepsAsParamList;
            return depMetaData;
        }
        function populateWorkerTemplate(workerFunc, dependencyMetaData) {
            return workerTemplate
                .replace('<URL_TO_ANGULAR>', urlToAngular)
                .replace('<CUSTOM_DEP_INCLUDES>', dependencyMetaData.servicesIncludeStatements)
                .replace('<DEP_MODULES>', dependencyMetaData.moduleList)
                .replace('<STRING_DEP_NAMES>', dependencyMetaData.angularDepsAsStrings)
                .replace('<DEP_NAMES>', dependencyMetaData.angularDepsAsParamList)
                .replace('<STORAGE>', JSON.stringify(storage))
                .replace('<WORKER_FUNCTION>', workerFunc.toString());
        }
        var buildAngularWorker = function (initializedWorker) {
            var that = {};
            that.worker = initializedWorker;
            that.run = function (input) {
                var deferred = $q.defer();
                initializedWorker.addEventListener('message', function (e) {
                    var eventId = e.data.event;
                    //console.log(e.data);
                    if (eventId === 'initDone') {
                        throw 'Received worker initialization in run method. This should already have occurred!';
                    } else if (eventId === 'success') {
                        deferred.resolve(e.data.data);
                    } else if (eventId === 'failure') {
                        deferred.reject(e.data.data);
                    } else if (eventId === 'update') {
                        deferred.notify(e.data.data);
                    } else {
                        deferred.reject(e);
                    }
                });
                initializedWorker.postMessage(input);
                return deferred.promise;
            };
            that.terminate = function () {
                initializedWorker.terminate();
            };
            return that;
        };
        var extractDependencyList = function (depFuncList) {
            return depFuncList.slice(0, depFuncList.length - 1);
        };
        var workerFunctionToString = function (func, paramList) {
            return '(' + func.toString() + ')(' + paramList + ')';
        };
        /**
         * example call:
         * WorkerService.createAngularWorker(['input', 'output', '$http', function(input, output, $http)
         * {body of function}]);
         * Parameters "input" and "output" is required. Not defining them will cause a runtime error.
         * Declaring services to be injected, as '$http' is above, requires the web worker to be able to resolve them.
         * '$http' service is a part of the standard angular package which means it will resolve without additional information
         * since angular source is always loaded in the web worker.
         * But if a custom service was to be injected the WorkerService would need be be informed on how to resolve the.
         * @param depFuncList
         */
        that.createAngularWorker = function (depFuncList) {
            //validate the input
            if (!Array.isArray(depFuncList) || depFuncList.length < 3 || typeof depFuncList[depFuncList.length - 1] !== 'function') {
                throw 'Input needs to be: [\'workerInput\',\'deferredOutput\'/*optional additional dependencies*/,\n' + '    function(workerInput, deferredOutput /*optional additional dependencies*/)\n' + '        {/*worker body*/}' + ']';
            }
            var deferred = $q.defer();
            var dependencyMetaData = createDependencyMetaData(extractDependencyList(depFuncList));
            var blobURL = (window.webkitURL ? webkitURL : URL).createObjectURL(new Blob([populateWorkerTemplate(workerFunctionToString(depFuncList[depFuncList.length - 1], dependencyMetaData.workerFuncParamList), dependencyMetaData)], { type: 'application/javascript' }));
            var worker = new Worker(blobURL);
            //wait for the worker to load resources
            worker.addEventListener('message', function (e) {
                var eventId = e.data.event;
                console.log(e.data);
                if (eventId === 'initDone') {
                    deferred.resolve(buildAngularWorker(worker));
                } else {
                    deferred.reject(e);
                }
            });
            return deferred.promise;
        };
        return that;
    }
]);
'use strict';
var Bahmni = Bahmni || {};
Bahmni.Common = Bahmni.Common || {};
Bahmni.Common.Offline = Bahmni.Common.Offline || {};
Bahmni.Common.Offline.dbNameCondition = Bahmni.Common.Offline.dbNameCondition || {};

angular.module('bahmni.common.offline', ['bahmni.common.util', 'bahmni.common.models', 'FredrikSandell.worker-pool', 'ngDialog']);

'use strict';

angular.module('bahmni.common.offline').service('offlineService', ['$rootScope', '$bahmniCookieStore', function ($rootScope, $bahmniCookieStore) {
    this.getAppPlatform = function () {
        return $bahmniCookieStore.get(Bahmni.Common.Constants.platform);
    };

    this.setAppPlatform = function (platform) {
        $bahmniCookieStore.put(Bahmni.Common.Constants.platform, platform, {path: '/', expires: 365});
    };

    this.isOfflineApp = function () {
        return true;
    };

    this.isAndroidApp = function () {
        return this.getAppPlatform() === Bahmni.Common.Constants.platformType.android;
    };

    this.isChromeApp = function () {
        return this.getAppPlatform() === Bahmni.Common.Constants.platformType.chromeApp;
    };

    this.isChromeBrowser = function () {
        return this.getAppPlatform() === Bahmni.Common.Constants.platformType.chrome;
    };

    this.encrypt = function (value, encryptionType) {
        if (encryptionType === Bahmni.Common.Constants.encryptionType.SHA3) {
            return CryptoJS.SHA3(value);
        }
        return value;
    };

    this.deleteItem = function (key) {
        return delete localStorage[key];
    };

    this.setItem = function (key, value) {
        localStorage.setItem(key, JSON.stringify(value));
    };
    this.getItem = function (key) {
        var value = localStorage.getItem(key);
        if (value) {
            return JSON.parse(value);
        }
        return value;
    };

    this.validateLoginInfo = function (loginInfo) {
        var username = this.getItem(Bahmni.Common.Constants.LoginInformation)['username'] || '';
        return (username.toLowerCase() === loginInfo.username.toLowerCase() &&
        JSON.stringify(this.getItem(Bahmni.Common.Constants.LoginInformation)['password']) === JSON.stringify(CryptoJS.SHA3(loginInfo.password)));
    };

    this.setSchedulerStatus = function (stage) {
        $rootScope.$broadcast("schedulerStage", stage);
    };
}]);

'use strict';

angular.module('bahmni.common.offline')
    .service('dbNameService', ["offlineService", "offlineDbService", "androidDbService", "$q", "messagingService",
        function (offlineService, offlineDbService, androidDbService, $q, messagingService) {
            var loadDbNameService = function () {
                var isOfflineApp = offlineService.isOfflineApp();
                if (isOfflineApp) {
                    var defer = $q.defer();
                    if (offlineService.isAndroidApp()) {
                        offlineDbService = androidDbService;
                    }
                    offlineDbService.getConfig("dbNameCondition").then(function (config) {
                        if (!config || !config.value) {
                            messagingService.showMessage("error",
                                Bahmni.Common.Constants.offlineErrorMessages.dbNameConditionNotPresent);
                            return defer.reject(Bahmni.Common.Constants.offlineErrorMessages.dbNameConditionNotPresent);
                        }
                        var script = config.value['dbNameCondition.js'];
                        eval(script); // eslint-disable-line no-eval
                        return defer.resolve();
                    });
                }
                return defer.promise;
            };

            var getDbName = function (provider, loginLocation) {
                if (!offlineService.getItem("allowMultipleLoginLocation")) {
                    return $q.when(Bahmni.Common.Constants.defaultBahmniConnectDb);
                }
                return loadDbNameService().then(function () {
                    return Bahmni.Common.Offline.dbNameCondition.get(provider, loginLocation) + "_db";
                });
            };

            return {
                getDbName: getDbName
            };
        }]);

'use strict';

angular.module('bahmni.common.offline').service('initializeOfflineSchema', [function () {
    var DB_VERSION = 3;
    var DB_VERSION_OLD;
    var dbPromises = {};

    var dataTypes = {
        "INTEGER": lf.Type.INTEGER,
        "STRING": lf.Type.STRING,
        "DATE_TIME": lf.Type.DATE_TIME,
        "OBJECT": lf.Type.OBJECT,
        "ARRAY_BUFFER": lf.Type.ARRAY_BUFFER,
        "BOOLEAN": lf.Type.BOOLEAN
    };

    var upgradeExistingSchemaFn = function (migrations, rawDb) {
        if (migrations.Queries) {
            migrations.Queries.forEach(function (query) {
                query(rawDb);
            });
        }
    };

    var createSchemaFn = function (migrations, schemaBuilder) {
        if (migrations.SchemaDefinitions) {
            var tablesFromMigrations = _.values(migrations.SchemaDefinitions);
            tablesFromMigrations.forEach(function (table) {
                createTable(schemaBuilder, table);
            });
        }
    };

    var migrateDataUsingCustomLoveFieldQueries = function (migrations, db) {
        if (migrations.CopyOver) {
            var tablesFromMigrations = _.values(migrations.CopyOver);
            tablesFromMigrations.forEach(function (query) {
                query(db);
            });
        }
    };

    var runMigration = function (oldVersion, db, applyOn) {
        while (oldVersion < DB_VERSION) {
            var migrations = Bahmni.Common.Offline["Migration" + oldVersion] || {};
            applyOn(migrations, db);
            oldVersion = oldVersion + 1;
        }
    };

    var onUpgrade = function (rawDb) {
        DB_VERSION_OLD = rawDb.getVersion();
        var oldVersion = DB_VERSION_OLD;
        runMigration(oldVersion, rawDb, upgradeExistingSchemaFn);
        return rawDb.dump();
    };

    var LOVEFIELD_DB_CONFIG = {
        storeType: lf.schema.DataStoreType.INDEXED_DB,
        onUpgrade: onUpgrade
    };

    this.databasePromise = null;

    var initDbSchema = function (schemaBuilder, definitions) {
        var tables = _.values(definitions);
        var initalMigrationVersion = 2;
        tables.forEach(function (table) {
            createTable(schemaBuilder, table);
        });

        runMigration(initalMigrationVersion, schemaBuilder, createSchemaFn);
    };

    this.initSchema = function (dbName) {
        if (dbPromises[dbName] != null) {
            return dbPromises[dbName];
        }
        var schemaBuilder = lf.schema.create(dbName, DB_VERSION);
        if (dbName === Bahmni.Common.Constants.bahmniConnectMetaDataDb) {
            initDbSchema(schemaBuilder, Bahmni.Common.Offline.MetaDataSchemaDefinitions);
            this.databasePromise = schemaBuilder.connect(LOVEFIELD_DB_CONFIG);
            dbPromises[dbName] = this.databasePromise;
        } else {
            initDbSchema(schemaBuilder, Bahmni.Common.Offline.SchemaDefinitions);
            this.databasePromise = schemaBuilder.connect(LOVEFIELD_DB_CONFIG);
            dbPromises[dbName] = this.databasePromise;
            this.databasePromise.then(function (db) {
                var initalMigrationVersion = DB_VERSION_OLD || 2;
                runMigration(initalMigrationVersion, db, migrateDataUsingCustomLoveFieldQueries);
            });
        }
        return this.databasePromise;
    };

    this.reinitSchema = function (dbName) {
        this.databasePromise = null;
        return this.initSchema(dbName);
    };

    var createTable = function (schemaBuilder, tableDefinition) {
        var table = schemaBuilder.createTable(tableDefinition.tableName);

        _.map(tableDefinition.columns, function (column) {
            table.addColumn(column.name, dataTypes[column.type]);
        });

        table.addNullable(tableDefinition.nullableColumns);
        if (tableDefinition.autoIncrement) {
            table.addPrimaryKey(tableDefinition.primaryKeyColumns, true);
        } else {
            table.addPrimaryKey(tableDefinition.primaryKeyColumns);
        }
        if (tableDefinition.uniqueKeyColumns) {
            table.addUnique("uKey" + tableDefinition.uniqueKeyColumns.join(""), tableDefinition.uniqueKeyColumns);
        }
        _.each(tableDefinition.indexes, function (index) {
            table.addIndex(index.indexName, index.columnNames);
        });
    };
}]);

'use strict';

angular.module('bahmni.common.offline')
    .factory('offlineDbInitialization', ['spinner', 'offlineService', 'initializeOfflineSchema', 'offlineDbService', 'androidDbService', 'dbNameService',
        function (spinner, offlineService, initializeOfflineSchema, offlineDbService, androidDbService, dbNameService) {
            var getDbName = function (provider, location) {
                return dbNameService.getDbName(provider, location);
            };
            return function () {
                if (offlineService.isOfflineApp()) {
                    if (offlineService.isAndroidApp()) {
                        offlineDbService = androidDbService;
                    }
                    var loginInformation = offlineService.getItem('LoginInformation');
                    var location = loginInformation ? loginInformation.currentLocation.display : null;
                    return offlineDbService.initSchema(Bahmni.Common.Constants.bahmniConnectMetaDataDb).then(function (metaDataDb) {
                        offlineDbService.init(metaDataDb);
                        if (location === null) {
                            return metaDataDb;
                        }
                        var dbNames = offlineService.getItem("dbNames") || [];
                        var username = offlineService.getItem("userData").results[0].username;
                        return getDbName(username, location).then(function (dbName) {
                            dbNames.push(dbName);
                            offlineService.setItem("dbNames", _.uniq(dbNames));
                            offlineService.setItem("currentDbName", dbName);
                            return offlineDbService.initSchema(dbName);
                        }).then(function (db) {
                            offlineDbService.init(db);
                            return db;
                        });
                    });
                }
            };
        }
    ]);

'use strict';

angular.module('bahmni.common.offline')
    .factory('offlineConfigInitialization', ['offlineService', '$http', 'offlineDbService', 'androidDbService', '$q', '$rootScope', 'loggingService',
        function (offlineService, $http, offlineDbService, androidDbService, $q, $rootScope, loggingService) {
            return function () {
                if (offlineService.isOfflineApp()) {
                    if (offlineService.isAndroidApp()) {
                        offlineDbService = androidDbService;
                    }
                    var modules = ['home', 'registration', 'clinical'];
                    if (offlineService.getItem("allowMultipleLoginLocation")) {
                        modules.push("dbNameCondition");
                    }
                    var length = modules.length;
                    var deferred = $q.defer();

                    var readConfigData = function (modules, index) {
                        if (length === index) {
                            deferred.resolve(1);
                            return deferred.promise;
                        }
                        var appName = modules[index];
                        return offlineDbService.getConfig(appName).then(function (result) {
                            var requestUrl = Bahmni.Common.Constants.baseUrl + appName + "/" + appName + ".json";
                            return {
                                method: 'GET',
                                url: requestUrl,
                                headers: {
                                    'If-None-Match': result ? result.etag : undefined
                                }
                            };
                        }).then(function (req) {
                            return $http(req).then(function (result) {
                                if (result.status === 200) {
                                    var eTag = result.headers().etag;
                                    return offlineDbService.insertConfig(appName, result.data, eTag).then(function (response) {
                                        if (response.key === 'home' || response.module === 'home') {
                                            var offlineConfig = response.value['offline-config.json'];
                                            var schedulerInterval = offlineConfig ? offlineConfig.schedulerInterval : 900000;
                                            localStorage.setItem('schedulerInterval', schedulerInterval);
                                        }
                                        return readConfigData(modules, ++index);
                                    });
                                }
                            }).catch(function (response) {
                                if (parseInt(response.status / 100) === 4 || parseInt(response.status / 100) === 5) {
                                    loggingService.logSyncError(response.config.url, response.status, response.data);
                                    return readConfigData(modules, ++index);
                                } else if (response.status === -1) {
                                    $rootScope.$broadcast("schedulerStage", null, true);
                                    deferred.reject(response);
                                } else {
                                    return readConfigData(modules, ++index);
                                }
                                return deferred.promise;
                            });
                        });
                    };
                    return readConfigData(modules, 0);
                }
            };
        }
    ]);

'use strict';

angular.module('bahmni.common.offline')
    .factory('offlineReferenceDataInitialization', ['offlineService', '$http', 'offlineDbService', 'androidDbService', '$q', '$rootScope', 'loggingService', 'messagingService',
        function (offlineService, $http, offlineDbService, androidDbService, $q, $rootScope, loggingService, messagingService) {
            return function (isAuthenticated) {
                if (offlineService.isOfflineApp()) {
                    if (offlineService.isAndroidApp()) {
                        offlineDbService = androidDbService;
                    }
                    var referenceDataMap;
                    referenceDataMap = isAuthenticated ?
                        angular.extend(Bahmni.Common.Constants.authenticatedReferenceDataMap,
                            Bahmni.Common.Constants.unAuthenticatedReferenceDataMap) :
                        Bahmni.Common.Constants.unAuthenticatedReferenceDataMap;

                    var requests = [];

                    for (var key in referenceDataMap) {
                        var request = [];
                        if (referenceDataMap.hasOwnProperty(key)) {
                            request.push(key);
                            request.push(referenceDataMap[key]);
                            requests.push(request);
                        }
                    }

                    var deferred = $q.defer();

                    var readReferenceData = function (requests, index) {
                        if (requests.length == index) {
                            deferred.resolve(1);
                            return deferred.promise;
                        }
                        var url = requests[index][0];
                        var referenceData = requests[index][1];
                        return offlineDbService.getReferenceData(referenceData).then(function (result) {
                            var requestUrl = Bahmni.Common.Constants.hostURL + url;
                            if (result && Bahmni.Common.Constants.authenticatedReferenceDataMap[url] == "PersonAttributeType") {
                                result.etag = undefined;
                            }
                            var req = {
                                method: 'GET',
                                url: requestUrl,
                                headers: {
                                    'If-None-Match': result ? result.etag : undefined
                                },
                                withCredentials: true
                            };
                            if (referenceData == 'LocaleList' || referenceData == 'DefaultEncounterType' || referenceData == "NonCodedDrugConcept") {
                                req.headers.Accept = 'text/plain';
                            }
                            return req;
                        }).then(function (req) {
                            return $http(req).then(function (response) {
                                if (response.status == 200) {
                                    var eTag = response.headers().etag;
                                    return offlineDbService.insertReferenceData(referenceData, response.data, eTag).then(function () {
                                        return readReferenceData(requests, ++index);
                                    });
                                }
                            }).catch(function (response) {
                                if (parseInt(response.status / 100) == 4) {
                                    loggingService.logSyncError(response.config.url, response.status, response.data);
                                    $rootScope.$broadcast("schedulerStage", null, true);
                                    deferred.reject(response);
                                } else if (parseInt(response.status / 100) == 5) {
                                    loggingService.logSyncError(response.config.url, response.status, response.data);
                                    deferred.reject({"data": Bahmni.Common.Constants.offlineErrorMessages.openmrsServerError});
                                    messagingService.showMessage("error", Bahmni.Common.Constants.offlineErrorMessages.openmrsServerError);
                                    $rootScope.$broadcast("schedulerStage", null, true);
                                } else if (response.status == -1) {
                                    deferred.reject({"data": Bahmni.Common.Constants.offlineErrorMessages.networkError});
                                    messagingService.showMessage("error", Bahmni.Common.Constants.offlineErrorMessages.networkError);
                                    $rootScope.$broadcast("schedulerStage", null, true);
                                } else {
                                    return readReferenceData(requests, ++index);
                                }
                                return deferred.promise;
                            });
                        });
                    };

                    return readReferenceData(requests, 0);
                }
            };
        }
    ]);

'use strict';

angular.module('bahmni.common.offline')
    .factory('offlineLocationInitialization', ['offlineService', 'offlineDbService', 'androidDbService', 'eventLogService', '$q',
        function (offlineService, offlineDbService, androidDbService, eventLogService, $q) {
            return function () {
                var addressLevels;
                if (offlineService.isAndroidApp()) {
                    offlineDbService = androidDbService;
                }
                var loginLocation = offlineService.getItem('LoginInformation').currentLocation;
                var provider = offlineService.getItem('providerData').results[0];
                var deferred = $q.defer();

                var insertMarkers = function (categoryFilterMap) {
                    return Object.keys(categoryFilterMap).map(function (category) {
                        return offlineDbService.getMarker(category).then(function (marker) {
                            if (category === "encounter") {
                                offlineService.setItem("initSyncFilter", categoryFilterMap[category]);
                            }
                            var filters = (marker && marker.filters) || [];
                            var lastReadEventUuid = (marker && marker.lastReadEventUuid) || null;
                            filters = filters.concat(categoryFilterMap[category]);
                            return offlineDbService.insertMarker(category, lastReadEventUuid, _.uniq(filters));
                        });
                    });
                };

                var getLoginLocationAddress = function () {
                    for (var addressLevel = 0; addressLevel < addressLevels.length; addressLevel++) {
                        if (loginLocation[addressLevels[addressLevel].addressField] != null) {
                            return addressLevels[addressLevel].addressField;
                        }
                    }
                };

                var checkParents = function (result, addressLevel) {
                    if (!result.parent) {
                        return true;
                    }
                    if (result.parent.name !== loginLocation[addressLevel.addressField]) {
                        return false;
                    }
                    if (result.parent.name === loginLocation[addressLevel.addressField]) {
                        return checkParents(result.parent, getParentAddressLevel(addressLevel.addressField));
                    }
                };

                var getParentAddressLevel = function (addressField) {
                    var parent = null;
                    for (var addrLevel = 0; addrLevel < addressLevels.length; addrLevel++) {
                        if (addressLevels[addrLevel].addressField === addressField) {
                            return parent;
                        }
                        parent = addressLevels[addrLevel];
                    }
                };

                var getAddressField = function () {
                    return offlineDbService.getReferenceData('AddressHierarchyLevels').then(function (addressHierarchyLevel) {
                        if (!(addressHierarchyLevel && addressHierarchyLevel.data)) {
                            return null;
                        }
                        addressLevels = _.reverse(addressHierarchyLevel.data);
                        var addressField = getLoginLocationAddress();
                        _.reverse(addressLevels);
                        if (addressField && loginLocation[addressField]) {
                            var params = {
                                searchString: loginLocation[addressField],
                                addressField: addressField,
                                limit: 5000
                            };
                            return eventLogService.getAddressForLoginLocation(params).then(function (results) {
                                for (var addressResults = 0; addressResults < results.data.length; addressResults++) {
                                    var loginAddress = results.data[addressResults];
                                    if (checkParents(loginAddress, getParentAddressLevel(addressField))) {
                                        return loginAddress.uuid;
                                    }
                                }
                                return null;
                            });
                        }
                    });
                };

                getAddressField().then(function (result) {
                    return eventLogService.getEventCategoriesToBeSynced().then(function (results) {
                        var categories = results.data;
                        offlineService.setItem("eventLogCategories", categories);
                        return eventLogService.getFilterForCategoryAndLoginLocation(provider.uuid, result || null, loginLocation.uuid).then(function (results) {
                            return $q.all(insertMarkers(angular.copy(results.data))).then(deferred.resolve);
                        }, function (response) {
                            deferred.reject(response);
                        });
                    }, function (response) {
                        return deferred.reject(response);
                    });
                });
                return deferred.promise;
            };
        }
    ]);

'use strict';

angular.module('bahmni.common.offline')
        .factory('offlineSyncInitialization', ['offlineSyncService', 'offlineService',
            function (offlineSyncService, offlineService) {
                return function (isInitSync) {
                    if (offlineService.isOfflineApp()) {
                        return offlineSyncService.sync(isInitSync);
                    }
                };
            }
        ]);

'use strict';

angular.module('bahmni.common.offline')
    .factory('eventLogService', ['$http', '$q', function ($http, $q) {
        var getEvents = function (url, marker) {
            return $http.get(url, { params: {filterBy: marker.filters, uuid: marker.lastReadEventUuid}});
        };

        var getDataForUrl = function (url) {
            return $http.get(url);
        };

        var getAddressForLoginLocation = function (params) {
            var url = Bahmni.Common.Constants.openmrsUrl +
                "/module/addresshierarchy/ajax/getPossibleAddressHierarchyEntriesWithParents.form";
            return $http.get(url, { method: "GET", params: params, withCredentials: true});
        };

        var getFilterForCategoryAndLoginLocation = function (providerUuid, addressUuid, loginlocationUuid) {
            var url = Bahmni.Common.Constants.eventlogFilterUrl + "/markers/" + providerUuid + "/" + addressUuid + "/" + loginlocationUuid;
            return $http.get(url, {method: "GET", withCredentials: true});
        };

        var getEventCategoriesToBeSynced = function () {
            var url = Bahmni.Common.Constants.eventlogFilterUrl + "/category";
            return $http.get(url, { method: "GET", withCredentials: true});
        };

        var getEventsFor = function (category, marker) {
            switch (category) {
            case 'patient':
                return getEvents(Bahmni.Common.Constants.eventLogServicePatientUrl, marker);
            case 'encounter':
                return getEvents(Bahmni.Common.Constants.eventLogServiceEncounterUrl, marker);
            case 'offline-concepts':
                return getEvents(Bahmni.Common.Constants.eventLogServiceConceptUrl, marker);
            case 'addressHierarchy':
            case 'parentAddressHierarchy':
                return getEvents(Bahmni.Common.Constants.addressEventLogServiceUrl, marker);
            case 'forms':
                return getEvents(Bahmni.Common.Constants.eventLogServiceFormUrl, marker);
            default:
                return $q.when({});
            }
        };

        return {
            getEventsFor: getEventsFor,
            getDataForUrl: getDataForUrl,
            getAddressForLoginLocation: getAddressForLoginLocation,
            getFilterForCategoryAndLoginLocation: getFilterForCategoryAndLoginLocation,
            getEventCategoriesToBeSynced: getEventCategoriesToBeSynced
        };
    }]);

'use strict';

angular.module('bahmni.common.offline')
    .service('offlineSyncService', ['eventLogService', 'offlineDbService', '$q', 'offlineService', 'androidDbService',
        '$rootScope', 'loggingService', '$http', '$timeout', 'dbNameService', 'messagingService',
        function (eventLogService, offlineDbService, $q, offlineService, androidDbService, $rootScope, loggingService,
                  $http, $timeout, dbNameService, messagingService) {
            var stages, categories;

            var createRejectedPromise = function () {
                var deferrable = $q.defer();
                deferrable.reject();
                return deferrable.promise;
            };

            var initializeInitSyncInfo = function initializeCounters (categories) {
                $rootScope.initSyncInfo = {};
                $rootScope.showSyncInfo = true;
                _.map(categories, function (category) {
                    $rootScope.initSyncInfo[category] = {};
                    $rootScope.initSyncInfo[category].pendingEventsCount = 0;
                    $rootScope.initSyncInfo[category].savedEventsCount = 0;
                });
                $rootScope.initSyncInfo.savedEvents = 0;
            };

            var savePatients = function (patients, count) {
                if (count != patients.length) {
                    return saveData({category: 'patient'}, {data: patients[count]}).then(function () {
                        updateSavedEventsCount('patient');
                        return (offlineService.isAndroidApp() && count % 10 == 0) ?
                            $timeout(savePatients, 100, true, patients, ++count) : savePatients(patients, ++count);
                    });
                }
                return $q.when();
            };

            var updateSyncedFileNames = function (fileName, dbName) {
                var syncedInfo = offlineService.getItem("synced") || {};
                syncedInfo[dbName] = syncedInfo[dbName] || [];
                syncedInfo[dbName].push(fileName);
                offlineService.setItem("synced", syncedInfo);
            };

            var getPatientDataForFiles = function (fileNames, count, eventLogUuid, dbName) {
                if (count !== fileNames.length) {
                    return $http.get(Bahmni.Common.Constants.preprocessedPatientUrl + fileNames[count]).then(function (response) {
                        updatePendingEventsCount("patient", response.data.patients.length);
                        var lastReadEventUuid = response.data.lastReadEventUuid;
                        return savePatients(response.data.patients, 0).then(function () {
                            updateSyncedFileNames(fileNames[count], dbName);
                            return getPatientDataForFiles(fileNames, ++count, lastReadEventUuid, dbName);
                        });
                    });
                }
                return $q.when(eventLogUuid);
            };

            var getDbName = function () {
                var loginInformation = offlineService.getItem('LoginInformation');
                var location = loginInformation ? loginInformation.currentLocation.display : null;
                var username = offlineService.getItem("userData").results[0].username;
                return dbNameService.getDbName(username, location);
            };

            var getRemainingFileNames = function (fileNames, synced) {
                var remaining = _.difference(fileNames, synced);
                return remaining.length ? remaining : fileNames.length ? [_.last(fileNames)] : fileNames;
            };

            var savePatientDataFromFile = function () {
                var defer = $q.defer();
                offlineDbService.getMarker('patient').then(function (marker) {
                    if (marker.lastReadEventUuid) {
                        return defer.resolve(marker.lastReadEventUuid);
                    }

                    return getDbName().then(function (dbName) {
                        var eventLogUuid;
                        var promises = marker.filters.map(function (filter) {
                            var syncedInfo = offlineService.getItem("synced") || {};
                            var synced = syncedInfo[dbName] || [];
                            return $http.get(Bahmni.Common.Constants.preprocessedPatientFilesUrl + filter).then(function (response) {
                                return getPatientDataForFiles(getRemainingFileNames(response.data, synced), 0, null, dbName).then(function (uuid) {
                                    eventLogUuid = uuid;
                                });
                            }).catch(function () {
                                endSync(-1);
                                return defer.reject();
                            });
                        });
                        return $q.all(promises).then(function () {
                            return defer.resolve(eventLogUuid);
                        });
                    });
                });
                return defer.promise;
            };

            var getDbNameCondition = function () {
                var appName = "dbNameCondition";
                var requestUrl = Bahmni.Common.Constants.baseUrl + appName + "/" + appName + ".json";
                return $http.get(requestUrl).then(function (result) {
                    return offlineDbService.insertConfig(appName, result.data, result.headers().etag);
                }).catch(function (response) {
                    messagingService.showMessage("error", Bahmni.Common.Constants.offlineErrorMessages.dbNameConditionNotPresent);
                    logSyncError(response);
                });
            };

            var migrate = function (isInitSync) {
                var categoryPromise = eventLogService.getEventCategoriesToBeSynced().then(function (results) {
                    offlineService.setItem("eventLogCategories", results.data);
                });
                var url = Bahmni.Common.Constants.globalPropertyUrl + "?property=allowMultipleLoginLocation";
                var multiDbConfigPromise = $http.get(url).then(function (res) {
                    offlineService.setItem("allowMultipleLoginLocation", res.data);
                    if (res.data) {
                        return getDbNameCondition();
                    }
                });
                return $q.all([categoryPromise, multiDbConfigPromise]).then(function () {
                    return syncData(isInitSync);
                });
            };

            var sync = function (isInitSync) {
                stages = 0;
                if (offlineService.isAndroidApp()) {
                    offlineDbService = androidDbService;
                }
                if (_.includes(offlineService.getItem("eventLogCategories"), "transactionalData")) {
                    return migrate(isInitSync);
                }
                return syncData(isInitSync);
            };

            var syncData = function (isInitSync) {
                var promises = [];
                categories = offlineService.getItem("eventLogCategories");
                initializeInitSyncInfo(categories);
                _.forEach(categories, function (category) {
                    if (!isInitSync || category !== "patient") {
                        promises.push(syncForCategory(category, isInitSync));
                    }
                });
                if (isInitSync && _.indexOf(categories, 'patient') !== -1) {
                    var patientPromise = savePatientDataFromFile().then(function (uuid) {
                        return updateMarker({uuid: uuid}, "patient");
                    });
                    promises.push(patientPromise);
                }
                return $q.all(promises);
            };

            var syncForCategory = function (category, isInitSync) {
                return offlineDbService.getMarker(category).then(function (marker) {
                    if (category === "encounter" && isInitSync) {
                        marker = angular.copy(marker);
                        marker.filters = offlineService.getItem("initSyncFilter");
                    }
                    return syncForMarker(category, marker, isInitSync);
                });
            };

            var updatePendingEventsCount = function (category, pendingEventsCount) {
                if (category === 'patient') {
                    $rootScope.initSyncInfo[category].pendingEventsCount += pendingEventsCount;
                } else {
                    $rootScope.initSyncInfo[category].pendingEventsCount = pendingEventsCount;
                }
                $rootScope.initSyncInfo.totalEvents = categories.reduce(function (count, category) {
                    return count + $rootScope.initSyncInfo[category].savedEventsCount + $rootScope.initSyncInfo[category].pendingEventsCount;
                }, 0);
            };

            var syncForMarker = function (category, marker, isInitSync) {
                return eventLogService.getEventsFor(category, marker).then(function (response) {
                    var events = response.data ? response.data["events"] : undefined;
                    if (events == undefined || events.length == 0) {
                        endSync(stages++);
                        return;
                    }
                    updatePendingEventsCount(category, response.data.pendingEventsCount);
                    return readEvent(events, 0, category, isInitSync);
                }, function () {
                    endSync(-1);
                    return createRejectedPromise();
                });
            };

            var readEvent = function (events, index, category, isInitSync) {
                if (events.length == index && events.length > 0) {
                    return syncForCategory(category, isInitSync);
                }
                if (events.length == index) {
                    return;
                }
                var event = events[index];
                if (event.category == "SHREncounter") {
                    var uuid = event.object.match(Bahmni.Common.Constants.uuidRegex)[0];
                    event.object = Bahmni.Common.Constants.offlineBahmniEncounterUrl + uuid + "?includeAll=true";
                }
                return eventLogService.getDataForUrl(Bahmni.Common.Constants.hostURL + event.object)
                    .then(function (response) {
                        return saveData(event, response)
                            .then(function () {
                                updateSavedEventsCount(category);
                                return updateMarker(event, category);
                            }, createRejectedPromise)
                            .then(
                                function (lastEvent) {
                                    offlineService.setItem("lastSyncTime", lastEvent.lastReadTime);
                                    return readEvent(events, ++index, category, isInitSync);
                                });
                    }).catch(function (response) {
                        logSyncError(response);
                        $rootScope.$broadcast("schedulerStage", null, true);
                        endSync(-1);
                        return createRejectedPromise();
                    });
            };

            var logSyncError = function (response) {
                if (response && (parseInt(response.status / 100) == 4 || parseInt(response.status / 100) == 5)) {
                    loggingService.logSyncError(response.config.url, response.status, response.data);
                }
            };

            var isPrimary = function (identifier, identifierTypes) {
                return identifier.identifierType.retired ? false : !!(_.find(identifierTypes, {'uuid': identifier.identifierType.uuid})).primary;
            };

            var mapIdentifiers = function (identifiers) {
                var deferred = $q.defer();
                return offlineDbService.getReferenceData("IdentifierTypes").then(function (identifierTypesData) {
                    var identifierTypes = identifierTypesData.data;
                    angular.forEach(identifiers, function (identifier) {
                        identifier.identifierType.primary = isPrimary(identifier, identifierTypes);
                    });
                    var extraIdentifiersForSearch = {};
                    var extraIdentifiers = _.filter(identifiers, {'identifierType': {'primary': false}});
                    var primaryIdentifier = _.filter(identifiers, {'identifierType': {'primary': true}})[0];
                    angular.forEach(extraIdentifiers, function (extraIdentifier) {
                        var name = extraIdentifier.identifierType.display || extraIdentifier.identifierType.name;
                        extraIdentifiersForSearch[name] = extraIdentifier.identifier;
                    });
                    angular.forEach(identifiers, function (identifier) {
                        identifier.primaryIdentifier = primaryIdentifier.identifier;
                        identifier.extraIdentifiers = !_.isEmpty(extraIdentifiersForSearch) ? extraIdentifiersForSearch : undefined;
                    });
                    deferred.resolve({data: identifiers});
                    return deferred.promise;
                });
            };

            var saveData = function (event, response) {
                var deferrable = $q.defer();
                switch (event.category) {
                case 'patient':
                    offlineDbService.getAttributeTypes().then(function (attributeTypes) {
                        mapAttributesToPostFormat(response.data.person.attributes, attributeTypes);
                        mapIdentifiers(response.data.identifiers).then(function () {
                            offlineDbService.createPatient({patient: response.data}).then(function () {
                                deferrable.resolve();
                            }, function (response) {
                                deferrable.reject(response);
                            });
                        });
                    });
                    break;
                case 'Encounter':
                case 'SHREncounter':
                    offlineDbService.createEncounter(response.data).then(function () {
                        deferrable.resolve();
                    });
                    break;
                case 'LabOrderResults':
                    var patientUuid = event.object.match(Bahmni.Common.Constants.uuidRegex)[0];
                    offlineDbService.insertLabOrderResults(patientUuid, response.data).then(function () {
                        deferrable.resolve();
                    });
                    break;

                case 'offline-concepts':
                    offlineDbService.insertConceptAndUpdateHierarchy({"results": [response.data]}).then(function () {
                        deferrable.resolve();
                    });
                    break;
                case 'addressHierarchy':
                case 'parentAddressHierarchy':
                    offlineDbService.insertAddressHierarchy(response.data).then(function () {
                        deferrable.resolve();
                    });
                    break;
                case 'forms':
                    offlineDbService.insertForm(response.data).then(function () {
                        deferrable.resolve();
                    });
                    break;
                default:
                    deferrable.resolve();
                    break;
                }
                return deferrable.promise;
            };

            var mapAttributesToPostFormat = function (attributes, attributeTypes) {
                angular.forEach(attributes, function (attribute) {
                    if (!attribute.voided && !attribute.attributeType.retired) {
                        var foundAttribute = _.find(attributeTypes, function (attributeType) {
                            return attributeType.uuid === attribute.attributeType.uuid;
                        });
                        if (foundAttribute.format === "org.openmrs.Concept") {
                            var value = attribute.value;
                            attribute.value = value.display;
                            attribute.hydratedObject = value.uuid;
                        }
                    }
                });
            };

            var updateMarker = function (event, category) {
                return offlineDbService.getMarker(category).then(function (marker) {
                    if (event.uuid == undefined) {
                        if (marker.lastReadEventUuid != undefined) {
                            console.log("Event identifier is null or undefined. Can not override last read event for category - " + category);
                            throw new Error("Event identifier is null or undefined. Can not override last read event for category - " + category);
                        }
                    }
                    return offlineDbService.insertMarker(marker.markerName, event.uuid, marker.filters);
                });
            };

            var updateSavedEventsCount = function (category) {
                $rootScope.initSyncInfo[category].savedEventsCount++;
                $rootScope.initSyncInfo[category].pendingEventsCount--;
                $rootScope.initSyncInfo.savedEvents++;
            };

            var endSync = function (status) {
                if (stages == categories.length || status == -1) {
                    $rootScope.$broadcast("schedulerStage", null);
                }
            };

            return {
                sync: sync
            };
        }
    ]);

'use strict';

angular.module('bahmni.common.offline').service('networkStatusService', ['$window', function ($window) {
    var isOnline = function () {
        return $window.navigator.onLine;
    };

    return {
        isOnline: isOnline
    };
}]);

'use strict';

angular.module('bahmni.common.offline')
    .service('androidDbService', ['$q', 'eventLogService', 'offlineService',
        function ($q, eventLogService, offlineService) {
            var currentDbName = null;
            var getMarker = function (markerName) {
                var value = AndroidOfflineService.getMarker(markerName);
                value = value != undefined ? JSON.parse(value) : value;
                if (value && value.filters) {
                    value.filters = JSON.parse(value.filters);
                }
                return $q.when(value);
            };

            var insertMarker = function (markerName, uuid, filters) {
                var value = AndroidOfflineService.insertMarker(markerName, uuid, JSON.stringify(filters));
                value = value != undefined ? JSON.parse(value) : value;
                return $q.when(value);
            };

            var createPatient = function (patient) {
                var patientString = JSON.stringify(patient);
                var value = AndroidOfflineService.createPatient(patientString);
                value = value != undefined ? JSON.parse(value) : value;
                return $q.when(value);
            };

            var insertAddressHierarchy = function (addressHierarchy) {
                var addressHierarchyString = JSON.stringify(addressHierarchy);
                var value = AndroidOfflineService.insertAddressHierarchy(addressHierarchyString);
                value = value != undefined ? JSON.parse(value) : value;
                return $q.when(value);
            };

            var init = function (dbName) {
                currentDbName = dbName;
                return $q.when(AndroidOfflineService.init(dbName));
            };

            var initSchema = function (dbName) {
                return $q.when(AndroidOfflineService.initSchema(dbName));
            };

            var deletePatientData = function (identifier) {
                AndroidOfflineService.deletePatientData(identifier);
                return $q.when({});
            };

            var getPatientByUuid = function (uuid, dbName) {
                dbName = dbName || null;
                var value = AndroidOfflineService.getPatientByUuid(uuid, dbName);
                value = value != undefined ? JSON.parse(value) : value;
                angular.forEach(value.patient.person.attributes, function (attribute) {
                    if (attribute.hydratedObject) {
                        var temp = attribute.hydratedObject;
                        delete attribute.hydratedObject;
                        attribute.hydratedObject = temp;
                    }
                });
                return $q.when(value);
            };

            var searchAddress = function (requestParams) {
                var addressParams = JSON.stringify(requestParams);
                var value = AndroidOfflineService.searchAddress(addressParams);
                value = value != undefined ? JSON.parse(value) : value;
                return $q.when({data: value});
            };

            var getConfig = function (module) {
                var value = AndroidConfigDbService.getConfig(module);
                value = value != undefined ? JSON.parse(value) : value;
                return $q.when(value);
            };

            var insertConfig = function (module, data, eTag) {
                return $q.when(JSON.parse(AndroidConfigDbService.insertConfig(module, JSON.stringify(data), eTag)));
            };

            var getReferenceData = function (referenceDataKey) {
                var value = AndroidOfflineService.getReferenceData(referenceDataKey);
                value = value != undefined ? JSON.parse(value) : value;
                return $q.when(value);
            };

            var insertReferenceData = function (key, data, eTag) {
                var referenceData;
                if (key == "LocaleList" || key == "DefaultEncounterType" || key == "NonCodedDrugConcept" || (key == "RelationshipTypeMap" && data == "")) {
                    referenceData = data;
                } else {
                    referenceData = JSON.stringify(data);
                }
                AndroidOfflineService.insertReferenceData(key, referenceData, eTag);
                return $q.when({});
            };

            var getLocationByUuid = function (uuid) {
                var value = AndroidLocationDbService.getLocationByUuid(uuid);
                value = value != undefined ? JSON.parse(value).value : value;
                return $q.when(value);
            };

            var getAttributeTypes = function () {
                var value = AndroidOfflineService.getAttributeTypes();
                value = value != undefined ? JSON.parse(value) : value;
                return $q.when(value);
            };

            var createEncounter = function (encounterData, dbName) {
                var deferred = $q.defer();
                insertEncounterData(encounterData, dbName).then(function () {
                    if (encounterData.visitUuid) {
                        eventLogService.getDataForUrl(Bahmni.Common.Constants.visitUrl + "/" + encounterData.visitUuid).then(function (response) {
                            insertVisitData(response.data, dbName).then(function () {
                                deferred.resolve({data: encounterData});
                            });
                        }, function () {
                            deferred.resolve({data: encounterData});
                        });
                    } else {
                        deferred.resolve({data: encounterData});
                    }
                });
                return deferred.promise;
            };

            var insertEncounterData = function (encounterData, dbName) {
                dbName = dbName || null;
                var encounter = AndroidOfflineService.insertEncounterData(JSON.stringify(encounterData), dbName);
                return insertObservationData(encounterData.patientUuid, encounterData.visitUuid, encounterData.observations, dbName).then(function () {
                    encounter = encounter != undefined ? JSON.parse(encounter) : encounter;
                    return encounter;
                });
            };

            var getEncountersByPatientUuid = function (patientUuid) {
                var response = AndroidOfflineService.getEncountersByPatientUuid(patientUuid);
                response = response != undefined ? JSON.parse(response) : response;
                return $q.when(response);
            };

            var insertVisitData = function (visitData, dbName) {
                dbName = dbName || null;
                var response = AndroidOfflineService.insertVisitData(JSON.stringify(visitData), dbName);
                response = response != undefined ? JSON.parse(response) : response;
                return $q.when(response);
            };

            var getVisitByUuid = function (visitUuid) {
                var response = AndroidOfflineService.getVisitByUuid(visitUuid);
                response = response != undefined ? JSON.parse(response) : response;
                return $q.when(response);
            };

            var getActiveEncounter = function (params) {
                var deferred = $q.defer();
                getReferenceData("encounterSessionDuration").then(function (encounterSessionDurationData) {
                    var encounterSessionDuration = encounterSessionDurationData.data;
                    getReferenceData("DefaultEncounterType").then(function (defaultEncounterType) {
                        var encounterType = defaultEncounterType ? defaultEncounterType.data : null;
                        var response = AndroidOfflineService.findActiveEncounter(JSON.stringify({
                            patientUuid: params.patientUuid,
                            providerUuid: params.providerUuids[0],
                            encounterType: encounterType
                        }), encounterSessionDuration);
                        response = response != undefined ? JSON.parse(response) : response;
                        deferred.resolve(response);
                    });
                });
                return deferred.promise;
            };

            var insertObservationData = function (patientUuid, visitUuid, observationData, dbName) {
                dbName = dbName || null;
                var response = AndroidOfflineService.insertObservationData(patientUuid, visitUuid, JSON.stringify(observationData), dbName);
                response = response != undefined ? JSON.parse(response) : response;
                return $q.when(response);
            };

            var getVisitsByPatientUuid = function (patientUuid, numberOfVisits) {
                var response = AndroidOfflineService.getVisitsByPatientUuid(patientUuid, numberOfVisits);
                response = response != undefined ? JSON.parse(response) : response;
                return $q.when(response);
            };

            var getVisitDetailsByPatientUuid = function (patientUuid) {
                var response = AndroidOfflineService.getVisitDetailsByPatientUuid(patientUuid);
                response = response != undefined ? JSON.parse(response) : response;
                return $q.when(response);
            };

            var getObservationsFor = function (params) {
                var response = AndroidOfflineService.getObservationsFor(JSON.stringify(params));
                response = response != undefined ? JSON.parse(response) : response;
                return $q.when(response);
            };

            var getObservationsForVisit = function (visitUuid) {
                var response = AndroidOfflineService.getObservationsForVisit(visitUuid);
                response = response != undefined ? JSON.parse(response) : response;
                return $q.when(response);
            };

            var insertConceptAndUpdateHierarchy = function (data, parent) {
                if (!parent) {
                    parent = null;
                } else {
                    parent = JSON.stringify(parent);
                }
                AndroidConceptDbService.insertConceptAndUpdateHierarchy(JSON.stringify(data), parent);
                return $q.when({});
            };

            var getConcept = function (conceptUuid) {
                var value = AndroidConceptDbService.getConcept(conceptUuid);
                value = value != undefined ? JSON.parse(value) : value;
                return $q.when(value);
            };

            var getConceptByName = function (conceptName) {
                var value = AndroidConceptDbService.getConceptByName(conceptName);
                value = value != undefined ? JSON.parse(value) : value;
                return $q.when(value);
            };

            var getEncounterByEncounterUuid = function (encounterUuid, dbName) {
                dbName = dbName || null;
                var response = AndroidOfflineService.findEncounterByEncounterUuid(encounterUuid, dbName);
                response = response != undefined ? JSON.parse(response) : response;
                return $q.when(response);
            };

            var getAllParentsInHierarchy = function (conceptName) {
                var conceptNamesInHierarchy = [];
                var response = AndroidConceptDbService.getAllParentsInHierarchy(conceptName);
                response = response != undefined ? JSON.parse(response) : response;
                return $q.when(response);
            };

            var insertLog = function (errorLogUuid, failedRequest, responseStatus, stacktrace, requestPayload) {
                var provider = _.has(requestPayload, 'providers') ? requestPayload.providers[0] :
                    (_.has(requestPayload, 'auditInfo.creator') ? requestPayload.auditInfo.creator : null);
                requestPayload = requestPayload ? requestPayload : null;
                var deferred = $q.defer();
                try {
                    var response = AndroidOfflineService.insertLog(errorLogUuid, failedRequest, responseStatus, JSON.stringify(stacktrace), JSON.stringify(requestPayload), JSON.stringify(provider));
                } catch (error) {
                    deferred.reject();
                    return deferred.promise;
                }
                return $q.when(response);
            };

            var getAllLogs = function () {
                var value = AndroidOfflineService.getAllLogs();
                value = _.isEmpty(value) ? [] : JSON.parse(value);
                return $q.when(value);
            };

            var getErrorLogByUuid = function (uuid, dbName) {
                dbName = dbName || null;
                var value = AndroidOfflineService.getErrorLogByUuid(uuid, dbName);
                value = value !== undefined ? JSON.parse(value) : value;
                return $q.when(value);
            };

            var deleteErrorFromErrorLog = function (uuid) {
                AndroidOfflineService.deleteByUuid(uuid);
                return $q.when({});
            };

            var getPrescribedAndActiveDrugOrders = function (params) {
                var response = AndroidOfflineService.getEncountersByVisits(JSON.stringify(params));
                response = response != undefined ? JSON.parse(response) : response;
                return $q.when(response);
            };

            var getPatientByUuidForPost = function (uuid, dbName) {
                var deferred = $q.defer();
                getPatientByUuid(uuid, dbName).then(function (patientData) {
                    var patient = patientData.patient;
                    patient.identifiers = _.map(patient.identifiers, function (identifier) {
                        return {
                            identifier: identifier.identifier,
                            identifierPrefix: identifier.identifierPrefix || identifier.selectedIdentifierSource && identifier.selectedIdentifierSource.prefix,
                            identifierSourceUuid: identifier.identifierSourceUuid || identifier.selectedIdentifierSource && identifier.selectedIdentifierSource.uuid,
                            identifierType: identifier.identifierType && identifier.identifierType.uuid || identifier.identifierType,
                            uuid: identifier.uuid,
                            preferred: identifier.preferred,
                            voided: identifier.voided
                        };
                    });
                    deferred.resolve(patientData);
                });
                return deferred.promise;
            };

            var insertLabOrderResults = function (patientUuid, results) {
                var response = AndroidOfflineService.insertLabOrderResults(patientUuid, JSON.stringify(results));
                response = response != undefined ? JSON.parse(response) : response;
                return $q.when(response);
            };

            var getLabOrderResultsForPatient = function (patientUuid) {
                var response = AndroidOfflineService.getLabOrderResultsByPatientUuid(patientUuid);
                return $q.when(JSON.parse(response));
            };

            var getDbNames = function () {
                return offlineService.getItem("dbNames");
            };

            var getCurrentDbName = function () {
                return currentDbName;
            };

            var deleteObsByEncounterUuid = function (uuid, preferredDb) {
                preferredDb = preferredDb || null;
                AndroidOfflineService.deleteByEncounterUuid(preferredDb, uuid);
                return $q.when({});
            };

            var insertForm = function (data) {
                AndroidFormDbService.insertForm(JSON.stringify(data));
                return $q.when({});
            };

            var getFormByUuid = function (uuid) {
                var form = AndroidFormDbService.getFormByUuid(uuid);
                form = form ? JSON.parse(form) : form;
                return $q.when(form);
            };

            var getAllForms = function () {
                var forms = AndroidFormDbService.getAllForms();
                forms = forms ? JSON.parse(forms) : forms;
                return $q.when(forms);
            };

            return {
                init: init,
                initSchema: initSchema,
                getPatientByUuid: getPatientByUuid,
                createPatient: createPatient,
                deletePatientData: deletePatientData,
                getMarker: getMarker,
                insertMarker: insertMarker,
                insertAddressHierarchy: insertAddressHierarchy,
                searchAddress: searchAddress,
                getConfig: getConfig,
                insertConfig: insertConfig,
                getReferenceData: getReferenceData,
                insertReferenceData: insertReferenceData,
                getLocationByUuid: getLocationByUuid,
                getAttributeTypes: getAttributeTypes,
                insertEncounterData: insertEncounterData,
                getEncountersByPatientUuid: getEncountersByPatientUuid,
                createEncounter: createEncounter,
                insertVisitData: insertVisitData,
                getVisitByUuid: getVisitByUuid,
                getActiveEncounter: getActiveEncounter,
                getVisitsByPatientUuid: getVisitsByPatientUuid,
                getObservationsFor: getObservationsFor,
                insertConceptAndUpdateHierarchy: insertConceptAndUpdateHierarchy,
                getConcept: getConcept,
                getConceptByName: getConceptByName,
                getEncounterByEncounterUuid: getEncounterByEncounterUuid,
                insertLog: insertLog,
                getAllLogs: getAllLogs,
                getAllParentsInHierarchy: getAllParentsInHierarchy,
                getPrescribedAndActiveDrugOrders: getPrescribedAndActiveDrugOrders,
                getErrorLogByUuid: getErrorLogByUuid,
                deleteErrorFromErrorLog: deleteErrorFromErrorLog,
                getPatientByUuidForPost: getPatientByUuidForPost,
                getVisitDetailsByPatientUuid: getVisitDetailsByPatientUuid,
                getObservationsForVisit: getObservationsForVisit,
                insertLabOrderResults: insertLabOrderResults,
                getLabOrderResultsForPatient: getLabOrderResultsForPatient,
                getDbNames: getDbNames,
                getCurrentDbName: getCurrentDbName,
                deleteObsByEncounterUuid: deleteObsByEncounterUuid,
                insertForm: insertForm,
                getFormByUuid: getFormByUuid,
                getAllForms: getAllForms
            };
        }
    ]);

'use strict';

angular.module('bahmni.common.offline')
    .service('offlineSearchDbService', ['$http', '$q', '$rootScope', 'age', function ($http, $q, $rootScope, age) {
        var db;

        var search = function (params) {
            var defer = $q.defer();
            var response = {
                "data": {
                    pageOfResults: []
                }
            };

            if ($rootScope.searching) {
                response.data.pageOfResults.push({});
                return defer.resolve(response);
            }

            $rootScope.searching = true;
            var nameParts = null;
            if (params.q) {
                nameParts = params.q.split(" ");
                for (var i = 0; i < nameParts.length; i++) {
                    nameParts[i] = nameParts[i].replace('%', '.');
                }
            }

            if (!params.patientAttributes) {
                params.patientAttributes = "";
            }

            var snakeCaseToCamelCase = function (snake_str) { // eslint-disable-line camelcase
                return snake_str.replace(/_([a-z])/g, function (g) {
                    return g[1].toUpperCase();
                });
            };

            var camelCaseToSnakeCase = function (camelCaseSting) {
                return camelCaseSting.replace(/([A-Z])/g, function ($1) {
                    return "_" + $1.toLowerCase();
                });
            };

            var addressFieldName = null;
            if (params.addressFieldName) {
                addressFieldName = snakeCaseToCamelCase(params.addressFieldName);
            }

            var p = db.getSchema().table('patient');
            var pi = db.getSchema().table('patient_identifier');
            var pa = db.getSchema().table('patient_attribute');
            var pat = db.getSchema().table('patient_attribute_type');
            var padd = db.getSchema().table('patient_address').as('addressFieldValue');
            var encounter = db.getSchema().table('encounter');

            db.select(pat.attributeTypeId)
                .from(pat)
                .where(pat.attributeName.in(params.patientAttributes)).exec()
                .then(function (attributeTypeIds) {
                    var query = db.select(p.uuid.as('uuid'))
                        .from(p)
                        .innerJoin(padd, p.uuid.eq(padd.patientUuid))
                        .leftOuterJoin(pi, p.uuid.eq(pi.patientUuid))
                        .leftOuterJoin(pa, p.uuid.eq(pa.patientUuid))
                        .leftOuterJoin(encounter, p.uuid.eq(encounter.patientUuid))
                        .leftOuterJoin(pat, pa.attributeTypeId.eq(pat.attributeTypeId));
                    var predicates = [];

                    if (!_.isEmpty(params.addressFieldValue)) {
                        params.addressFieldValue = params.addressFieldValue.replace('%', '.');
                        predicates.push(padd[addressFieldName].match(new RegExp(params.addressFieldValue, 'i')));
                    }

                    if (params.duration) {
                        var startDate = Bahmni.Common.Util.DateUtil.subtractDays(new Date(), params.duration);
                        var encounterPredicate = encounter.encounterDateTime.gte(startDate);
                        var dateCreatedPredicate = p.dateCreated.gte(startDate);
                        predicates.push(lf.op.or(encounterPredicate, dateCreatedPredicate));
                    }

                    if (!_.isEmpty(params.identifier)) {
                        params.identifier = params.identifier.replace('%', '.');
                        predicates.push(pi.identifier.match(new RegExp(params.identifier, 'i')));
                        predicates.push(pi.identifier.match(new RegExp(params.identifierPrefix, 'i')));
                    }
                    if (!_.isEmpty(nameParts)) {
                        var nameSearchCondition = [];
                        if (!_.isEmpty(nameParts)) {
                            angular.forEach(nameParts, function (namePart) {
                                nameSearchCondition.push(lf.op.or(p.givenName.match(new RegExp(namePart, 'i')), p.middleName.match(new RegExp(namePart, 'i')),
                                    p.familyName.match(new RegExp(namePart, 'i')), pi.identifier.match(new RegExp(namePart, 'i'))));
                            });
                            predicates.push(lf.op.and.apply(null, nameSearchCondition));
                        }
                    }

                    if (!_.isEmpty(params.customAttribute)) {
                        params.customAttribute = params.customAttribute.replace('%', '.');
                        predicates.push(pa.attributeTypeId.in(_.map(attributeTypeIds, function (attributeTypeId) {
                            return attributeTypeId.attributeTypeId;
                        })));

                        predicates.push(pa.attributeValue.match(new RegExp(params.customAttribute, 'i')));
                    }

                    predicates.push(p.voided.eq(false));
                    var whereCondition = lf.op.and.apply(null, predicates);

                    if (!_.isEmpty(predicates)) {
                        query = query.where(whereCondition);
                    }

                    query.limit(50).skip(params.startIndex).orderBy(p.dateCreated, lf.Order.DESC).groupBy(p.uuid).exec()
                        .then(function (tempResults) {
                            var query = db.select(pi.primaryIdentifier.as('identifier'), pi.extraIdentifiers.as('extraIdentifiers'), p.givenName.as('givenName'), p.middleName.as('middleName'), p.familyName.as('familyName'),
                                p.dateCreated.as('dateCreated'), p.birthdate.as('birthdate'), p.gender.as('gender'), p.uuid.as('uuid'), padd[addressFieldName],
                                pat.attributeName.as('attributeName'), pa.attributeValue.as('attributeValue'), pat.format.as('attributeFormat'))
                                .from(p)
                                .innerJoin(padd, p.uuid.eq(padd.patientUuid))
                                .leftOuterJoin(pi, p.uuid.eq(pi.patientUuid))
                                .leftOuterJoin(pa, p.uuid.eq(pa.patientUuid))
                                .leftOuterJoin(pat, pa.attributeTypeId.eq(pat.attributeTypeId))
                                .where(p.uuid.in(_.map(tempResults, function (tempResult) {
                                    return tempResult.uuid;
                                }))).orderBy(p.dateCreated, lf.Order.DESC);

                            return query.exec()
                                .then(function (results) {
                                    var groupedResults = _.groupBy(results, function (res) {
                                        return res.uuid;
                                    });
                                    var patient;

                                    angular.forEach(groupedResults, function (groupedResult) {
                                        var customAttributes = {};
                                        patient = groupedResult[0];
                                        // ToDo:: Dependency of age factory in Admin page
                                        patient.age = age.fromBirthDate(patient.birthdate).years;
                                        patient.image = "../images/blank-user.png";

                                        angular.forEach(groupedResult, function (result) {
                                            if (result.attributeName) {
                                                customAttributes[result.attributeName] = result.attributeValue;
                                            }
                                        });
                                        patient.customAttribute = JSON.stringify(customAttributes);
                                        patient.extraIdentifiers = JSON.stringify(patient.extraIdentifiers);
                                        patient.addressFieldValue[camelCaseToSnakeCase(addressFieldName)] = patient.addressFieldValue[addressFieldName];
                                        response.data.pageOfResults.push(patient);
                                    });
                                    $rootScope.searching = false;

                                    defer.resolve(response);
                                });
                        }, function (e) {
                            console.log(e);
                            defer.reject(e);
                        });
                });
            return defer.promise;
        };

        var init = function (_db) {
            db = _db;
        };

        return {
            search: search,
            init: init
        };
    }]);

'use strict';

angular.module('bahmni.common.offline')
    .service('offlineDbService', ['offlineService', '$http', '$q', 'patientDbService', 'patientAddressDbService', 'patientAttributeDbService',
        'patientIdentifierDbService', 'offlineMarkerDbService', 'offlineAddressHierarchyDbService', 'labOrderResultsDbService',
        'offlineConfigDbService', 'initializeOfflineSchema', 'referenceDataDbService', 'locationDbService', 'offlineSearchDbService',
        'encounterDbService', 'visitDbService', 'observationDbService', 'conceptDbService', 'errorLogDbService', 'eventLogService', 'formDbService',
        function (offlineService, $http, $q, patientDbService, patientAddressDbService, patientAttributeDbService, patientIdentifierDbService,
                  offlineMarkerDbService, offlineAddressHierarchyDbService, labOrderResultsDbService, offlineConfigDbService,
                  initializeOfflineSchema, referenceDataDbService, locationDbService, offlineSearchDbService, encounterDbService,
                  visitDbService, observationDbService, conceptDbService, errorLogDbService, eventLogService, formDbService) {
            var db, metaDataDb;

            var isMetaData = function (category) {
                return category === 'offline-concepts' || category === 'forms';
            };

            var createPatient = function (postRequest) {
                var deferred = $q.defer();
                var uuid = postRequest.patient.uuid;
                insertPatientData(postRequest)
                    .then(function () {
                        getPatientByUuid(uuid).then(function (result) {
                            deferred.resolve({data: result});
                        });
                    }, function (response) {
                        deferred.reject(response);
                    });
                return deferred.promise;
            };

            var getPatientByUuid = function (uuid, preferredDb) {
                preferredDb = preferredDb ? preferredDb : db;
                return patientDbService.getPatientByUuid(preferredDb, uuid);
            };

            var deletePatientData = function (uuid) {
                var deferred = $q.defer();
                var queries = [];

                var patientTable = db.getSchema().table('patient');
                var patientAddress = db.getSchema().table('patient_address');
                var patientAttributes = db.getSchema().table('patient_attribute');
                var patientIdentifier = db.getSchema().table('patient_identifier');

                queries.push(db.delete().from(patientAttributes).where(patientAttributes.patientUuid.eq(uuid)));
                queries.push(db.delete().from(patientAddress).where(patientAddress.patientUuid.eq(uuid)));
                queries.push(db.delete().from(patientTable).where(patientTable.uuid.eq(uuid)));
                queries.push(db.delete().from(patientIdentifier).where(patientIdentifier.patientUuid.eq(uuid)));

                var tx = db.createTransaction();
                tx.exec(queries);
                deferred.resolve({});
                return deferred.promise;
            };

            var insertPatientData = function (patientData) {
                var patient = patientData.patient;
                var person = patient.person;
                if (!patient.voided) {
                    return patientIdentifierDbService.insertPatientIdentifiers(db, person.uuid, patient.identifiers).then(function () {
                        return patientDbService.insertPatientData(db, patientData).then(function (patientUuid) {
                            patientAttributeDbService.insertAttributes(db, patientUuid, person.attributes);
                            patientAddressDbService.insertAddress(db, patientUuid, getAddress(person));
                            return patientData;
                        });
                    }, function (response) {
                        if (response && response.code == 201) {
                            response.message = "Patient failed to validate with reason: Identifier " + patient.identifiers[0].primaryIdentifier + " is already in use by another patient";
                            response.isOfflineApp = true;
                        }
                        return $q.reject(response);
                    });
                }
                return $q.when(patientData);
            };

            var getAddress = function (person) {
                return person.addresses[0] || person.preferredAddress || {};
            };

            var insertLabOrderResults = function (patientUuid, labOrderResults) {
                return labOrderResultsDbService.insertLabOrderResults(db, patientUuid, labOrderResults);
            };

            var getLabOrderResultsForPatient = function (params) {
                return labOrderResultsDbService.getLabOrderResultsForPatient(db, params);
            };

            var createEncounter = function (encounterData, preferredDb) {
                var deferred = $q.defer();
                insertEncounterData(encounterData, preferredDb).then(function () {
                    if (encounterData.visitUuid) {
                        eventLogService.getDataForUrl(Bahmni.Common.Constants.visitUrl + "/" + encounterData.visitUuid).then(function (response) {
                            insertVisitData(response.data, preferredDb).then(function () {
                                deferred.resolve({data: encounterData});
                            });
                        }, function () {
                            deferred.resolve({data: encounterData});
                        });
                    } else {
                        deferred.resolve({data: encounterData});
                    }
                });
                return deferred.promise;
            };

            var insertEncounterData = function (encounterData, preferredDb) {
                preferredDb = preferredDb ? preferredDb : db;
                return encounterDbService.insertEncounterData(preferredDb, encounterData).then(function () {
                    if (encounterData && encounterData.observations && encounterData.observations.length > 0) {
                        return observationDbService.insertObservationsData(preferredDb, encounterData.patientUuid, encounterData.visitUuid, encounterData.observations).then(function () {
                            return encounterData;
                        });
                    }
                    return encounterData;
                });
            };

            var getEncountersByPatientUuid = function (patientUuid) {
                return encounterDbService.getEncountersByPatientUuid(db, patientUuid);
            };

            var getActiveEncounter = function (params) {
                var deferred = $q.defer();
                getReferenceData("encounterSessionDuration").then(function (encounterSessionDurationData) {
                    var encounterSessionDuration = encounterSessionDurationData.data;
                    getReferenceData("DefaultEncounterType").then(function (defaultEncounterType) {
                        var encounterType = defaultEncounterType ? defaultEncounterType.data : null;
                        encounterDbService.findActiveEncounter(db, {
                            patientUuid: params.patientUuid,
                            providerUuid: params.providerUuids[0],
                            encounterType: encounterType
                        }, encounterSessionDuration).then(function (encounter) {
                            deferred.resolve(encounter);
                        });
                    });
                });
                return deferred.promise;
            };

            var init = function (offlineDb) {
                if (offlineDb.getSchema().name() == Bahmni.Common.Constants.bahmniConnectMetaDataDb) {
                    metaDataDb = offlineDb;
                    offlineConfigDbService.init(metaDataDb);
                    conceptDbService.init(metaDataDb);
                    referenceDataDbService.init(metaDataDb);
                    formDbService.init(metaDataDb);
                } else {
                    db = offlineDb;
                    offlineAddressHierarchyDbService.init(offlineDb);
                    offlineSearchDbService.init(offlineDb);
                }
                if (metaDataDb && db) {
                    referenceDataDbService.init(metaDataDb, db);
                }
            };

            var initSchema = function (dbName) {
                return initializeOfflineSchema.initSchema(dbName);
            };

            var reinitSchema = function (dbName) {
                return initializeOfflineSchema.reinitSchema(dbName);
            };

            var getMarker = function (markerName) {
                var database = isMetaData(markerName) ? metaDataDb : db;
                return offlineMarkerDbService.getMarker(database, markerName);
            };

            var insertMarker = function (markerName, eventUuid, filters) {
                var database = isMetaData(markerName) ? metaDataDb : db;
                return offlineMarkerDbService.insertMarker(database, markerName, eventUuid, filters);
            };

            var insertAddressHierarchy = function (data) {
                return offlineAddressHierarchyDbService.insertAddressHierarchy(data);
            };

            var searchAddress = function (params) {
                return offlineAddressHierarchyDbService.search(params);
            };

            var getConfig = function (module) {
                return offlineConfigDbService.getConfig(module);
            };

            var insertConfig = function (module, data, eTag) {
                return offlineConfigDbService.insertConfig(module, data, eTag);
            };

            var getReferenceData = function (referenceDataKey) {
                return referenceDataDbService.getReferenceData(referenceDataKey);
            };

            var insertReferenceData = function (key, data, eTag) {
                return referenceDataDbService.insertReferenceData(key, data, eTag);
            };

            var getLocationByUuid = function (uuid) {
                return locationDbService.getLocationByUuid(metaDataDb, uuid);
            };

            var getAttributeTypes = function () {
                return patientAttributeDbService.getAttributeTypes(db);
            };

            var getConcept = function (conceptUuid) {
                return conceptDbService.getReferenceData(conceptUuid);
            };

            var getConceptByName = function (conceptName) {
                return conceptDbService.getConceptByName(conceptName);
            };

            var insertConceptAndUpdateHierarchy = function (data, parent) {
                return conceptDbService.insertConceptAndUpdateHierarchy(data, parent);
            };

            var updateChildren = function (concept) {
                return conceptDbService.updateChildren(concept);
            };

            var updateParentJson = function (child) {
                return conceptDbService.updateParentJson(child);
            };

            var insertVisitData = function (visitData, preferredDb) {
                preferredDb = preferredDb ? preferredDb : db;
                return visitDbService.insertVisitData(preferredDb, visitData);
            };

            var getVisitByUuid = function (visitUuid) {
                return visitDbService.getVisitByUuid(db, visitUuid);
            };

            var getEncounterByEncounterUuid = function (encounterUuid, preferredDb) {
                preferredDb = preferredDb ? preferredDb : db;
                return encounterDbService.getEncounterByEncounterUuid(preferredDb, encounterUuid);
            };

            var getObservationsFor = function (params) {
                return observationDbService.getObservationsFor(db, params);
            };

            var getObservationsForVisit = function (visitUuid) {
                return observationDbService.getObservationsForVisit(db, visitUuid);
            };

            var getVisitsByPatientUuid = function (patientUuid, numberOfVisits) {
                return visitDbService.getVisitsByPatientUuid(db, patientUuid, numberOfVisits);
            };

            var getVisitDetailsByPatientUuid = function (patientUuid) {
                return visitDbService.getVisitDetailsByPatientUuid(db, patientUuid);
            };

            var insertLog = function (errorUuid, failedRequest, responseStatus, stackTrace, requestPayload) {
                var provider = _.has(requestPayload, 'providers') ? requestPayload.providers[0] :
                    (_.has(requestPayload, 'auditInfo.creator') ? requestPayload.auditInfo.creator : "");
                requestPayload = requestPayload ? requestPayload : "";
                return errorLogDbService.insertLog(db, errorUuid, failedRequest, responseStatus, stackTrace, requestPayload, provider);
            };

            var getErrorLogByUuid = function (uuid, preferredDb) {
                preferredDb = preferredDb ? preferredDb : db;
                return errorLogDbService.getErrorLogByUuid(preferredDb, uuid);
            };

            var deleteErrorFromErrorLog = function (uuid) {
                return errorLogDbService.deleteByUuid(db, uuid);
            };

            var deleteObsByEncounterUuid = function (uuid, preferredDb) {
                preferredDb = preferredDb ? preferredDb : db;
                return observationDbService.deleteByEncounterUuid(preferredDb, uuid);
            };

            var getAllLogs = function () {
                var deferred = $q.defer();
                errorLogDbService.getLog(db).then(function (response) {
                    deferred.resolve(response);
                });
                return deferred.promise;
            };

            var getAllParentsInHierarchy = function (conceptName) {
                var conceptNamesInHierarchy = [];
                return conceptDbService.getAllParentsInHierarchy(conceptName, conceptNamesInHierarchy);
            };

            var getPrescribedAndActiveDrugOrders = function (params) {
                return encounterDbService.getEncountersByVisits(db, params);
            };

            var getPatientByUuidForPost = function (uuid, preferredDb) {
                var deferred = $q.defer();
                getPatientByUuid(uuid, preferredDb).then(function (patientData) {
                    var patient = patientData.patient;
                    patient.identifiers = _.map(patient.identifiers, function (identifier) {
                        return {
                            identifier: identifier.identifier,
                            identifierPrefix: identifier.identifierPrefix || identifier.selectedIdentifierSource && identifier.selectedIdentifierSource.prefix,
                            identifierSourceUuid: identifier.identifierSourceUuid || identifier.selectedIdentifierSource && identifier.selectedIdentifierSource.uuid,
                            identifierType: identifier.identifierType && identifier.identifierType.uuid || identifier.identifierType,
                            uuid: identifier.uuid,
                            preferred: identifier.preferred,
                            voided: identifier.voided
                        };
                    });
                    deferred.resolve(patientData);
                });
                return deferred.promise;
            };
            var getDbNames = function () {
                return offlineService.getItem("dbNames");
            };
            var getCurrentDbName = function () {
                return offlineService.getItem("currentDbName");
            };

            var insertForm = function (data) {
                return formDbService.insertForm(data);
            };

            var getFormByUuid = function (uuid) {
                return formDbService.getFormByUuid(uuid);
            };

            var getAllForms = function () {
                return formDbService.getAllForms();
            };

            return {
                init: init,
                initSchema: initSchema,
                reinitSchema: reinitSchema,
                getPatientByUuid: getPatientByUuid,
                createPatient: createPatient,
                deletePatientData: deletePatientData,
                getMarker: getMarker,
                insertMarker: insertMarker,
                insertAddressHierarchy: insertAddressHierarchy,
                insertLabOrderResults: insertLabOrderResults,
                searchAddress: searchAddress,
                getConfig: getConfig,
                insertConfig: insertConfig,
                getReferenceData: getReferenceData,
                insertReferenceData: insertReferenceData,
                getLocationByUuid: getLocationByUuid,
                getAttributeTypes: getAttributeTypes,
                insertEncounterData: insertEncounterData,
                getEncountersByPatientUuid: getEncountersByPatientUuid,
                createEncounter: createEncounter,
                insertVisitData: insertVisitData,
                getVisitByUuid: getVisitByUuid,
                getActiveEncounter: getActiveEncounter,
                getEncounterByEncounterUuid: getEncounterByEncounterUuid,
                getObservationsFor: getObservationsFor,
                getVisitsByPatientUuid: getVisitsByPatientUuid,
                insertConceptAndUpdateHierarchy: insertConceptAndUpdateHierarchy,
                getConcept: getConcept,
                getConceptByName: getConceptByName,
                updateChildren: updateChildren,
                updateParentJson: updateParentJson,
                getAllParentsInHierarchy: getAllParentsInHierarchy,
                insertLog: insertLog,
                getAllLogs: getAllLogs,
                getErrorLogByUuid: getErrorLogByUuid,
                getPrescribedAndActiveDrugOrders: getPrescribedAndActiveDrugOrders,
                deleteErrorFromErrorLog: deleteErrorFromErrorLog,
                getPatientByUuidForPost: getPatientByUuidForPost,
                getVisitDetailsByPatientUuid: getVisitDetailsByPatientUuid,
                getObservationsForVisit: getObservationsForVisit,
                getLabOrderResultsForPatient: getLabOrderResultsForPatient,
                getDbNames: getDbNames,
                getCurrentDbName: getCurrentDbName,
                deleteObsByEncounterUuid: deleteObsByEncounterUuid,
                insertForm: insertForm,
                getFormByUuid: getFormByUuid,
                getAllForms: getAllForms
            };
        }]);

'use strict';

angular.module('bahmni.common.offline')
    .service('patientAddressDbService', [function () {
        var insertAddress = function (db, patientUuid, address) {
            var patientAddressTable = db.getSchema().table('patient_address');
            var row = patientAddressTable.createRow({
                address1: address['address1'],
                address2: address['address2'],
                address3: address['address3'],
                address4: address['address4'],
                address5: address['address5'],
                address6: address['address6'],
                cityVillage: address['cityVillage'],
                stateProvince: address['stateProvince'],
                postalCode: address['postalCode'],
                country: address['country'],
                countyDistrict: address['countyDistrict'],
                patientUuid: patientUuid
            });

            return db.insertOrReplace().into(patientAddressTable).values([row]).exec();
        };

        return {
            insertAddress: insertAddress
        };
    }]);

'use strict';

angular.module('bahmni.common.offline')
    .service('patientAttributeDbService', [ function () {
        var insertAttributeTypes = function (db, personAttributeTypeList) {
            var table, queries = [];
            table = db.getSchema().table('patient_attribute_type');
            db.delete().from(table).exec();
            for (var i = 0; i < personAttributeTypeList.length; i++) {
                var row = table.createRow({
                    'attributeTypeId': i,
                    'uuid': personAttributeTypeList[i].uuid,
                    'attributeName': personAttributeTypeList[i].name,
                    'format': personAttributeTypeList[i].format
                });
                queries.push(db.insertOrReplace().into(table).values([row]));
            }
            var tx = db.createTransaction();
            return tx.exec(queries);
        };

        var insertAttributes = function (db, patientUuid, attributes) {
            var attributeTable, value;
            attributeTable = db.getSchema().table('patient_attribute');
            var queries = [];
            return getAttributeTypes(db).then(function (attributeTypes) {
                if (attributes != null && attributes.length > 0) {
                    for (var j = 0; j < attributes.length; j++) {
                        if (!attributes[j].voided) {
                            var personAttribute = attributes[j];
                            var attributeValue = personAttribute.value;
                            if (typeof (attributeValue) == "object") {
                                value = attributeValue.display;
                            } else {
                                value = attributeValue;
                            }
                            var foundAttribute = _.find(attributeTypes, function (attributeType) {
                                return attributeType.uuid === personAttribute.attributeType.uuid;
                            });
                            if (foundAttribute != undefined) {
                                var row = attributeTable.createRow({
                                    'attributeTypeId': foundAttribute.attributeTypeId,
                                    'attributeValue': value,
                                    'patientUuid': patientUuid,
                                    'uuid': personAttribute.uuid ? personAttribute.uuid : Bahmni.Common.Offline.UUID.generateUuid()
                                });
                                queries.push(db.insertOrReplace().into(attributeTable).values([row]));
                            }
                        }
                    }
                    if (queries.length) {
                        var tx = db.createTransaction();
                        return tx.exec(queries);
                    }
                }
            });
        };

        var getAttributeTypes = function (db) {
            var attributeTypeTable = db.getSchema().table('patient_attribute_type');

            return db.select(attributeTypeTable.attributeTypeId, attributeTypeTable.uuid, attributeTypeTable.attributeName, attributeTypeTable.format).from(attributeTypeTable).exec()
                .then(function (attributeTypeMap) {
                    return attributeTypeMap;
                });
        };

        return {
            insertAttributeTypes: insertAttributeTypes,
            insertAttributes: insertAttributes,
            getAttributeTypes: getAttributeTypes
        };
    }]);

'use strict';

angular.module('bahmni.common.offline')
    .service('patientDbService', function () {
        var getPatientByUuid = function (db, uuid) {
            var p = db.getSchema().table('patient');
            return db.select(p.patientJson.as('patient'))
                .from(p)
                .where(lf.op.and(p.uuid.eq(uuid), p.voided.eq(false))).exec()
                .then(function (result) {
                    return result[0];
                });
        };

        var insertPatientData = function (db, patientData) {
            var patient = patientData.patient;
            var patientTable, person;
            patientTable = db.getSchema().table('patient');
            person = patient.person;
            var personName = person.names[0] || person.preferredName;
            var row = patientTable.createRow({
                'uuid': patient.uuid,
                'givenName': personName.givenName,
                'middleName': personName.middleName,
                'familyName': personName.familyName,
                'gender': person.gender,
                'voided': patient.voided || false,
                'birthdate': new Date(person.birthdate),
                'dateCreated': new Date(patient.person.auditInfo.dateCreated),
                'patientJson': patient
            });
            return db.insertOrReplace().into(patientTable).values([row]).exec().then(function () {
                return patient.uuid;
            });
        };

        return {
            getPatientByUuid: getPatientByUuid,
            insertPatientData: insertPatientData
        };
    });

'use strict';

angular.module('bahmni.common.offline')
    .service('patientIdentifierDbService', ['$q', function ($q) {
        var getPatientIdentifiersByPatientUuid = function (db, patientUuid) {
            var pi = db.getSchema().table('patient_identifier');
            return db.select(pi.identifierJson)
                .from(pi)
                .where(pi.patientUuid.eq(patientUuid)).exec()
                .then(function (result) {
                    return result;
                });
        };

        var insertQueries = function (identifier, patientIdentifierTable, patientUuid, queries, db) {
            var identifierTypeUuid = identifier.identifierType && identifier.identifierType.uuid || identifier.identifierType;
            var isPrimaryIdentifier = identifier.identifierType && identifier.identifierType.primary;
            var row = patientIdentifierTable.createRow({
                'typeUuid': identifierTypeUuid,
                'identifier': identifier.identifier || null,
                'primaryIdentifier': identifier.primaryIdentifier,
                'extraIdentifiers': identifier.extraIdentifiers,
                'primary': isPrimaryIdentifier,
                'patientUuid': patientUuid,
                'identifierJson': identifier
            });
            queries.push(db.insertOrReplace().into(patientIdentifierTable).values([row]));
            return queries;
        };

        var insertPatientIdentifiers = function (db, patientUuid, identifiers) {
            var patientIdentifierTable = db.getSchema().table('patient_identifier');
            var defer = $q.defer();
            var promises = [], queries = [];
            _.each(identifiers, function (identifier) {
                if (!identifier.primaryIdentifier) {
                    queries = insertQueries(identifier, patientIdentifierTable, patientUuid, queries, db);
                }
                else {
                    var promise = db.select(patientIdentifierTable.primaryIdentifier)
                        .from(patientIdentifierTable)
                        .where(lf.op.and(patientIdentifierTable.primaryIdentifier.eq(identifier.primaryIdentifier), patientIdentifierTable.patientUuid.neq(patientUuid))).exec()
                        .then(function (results) {
                            if (results.length > 0) {
                                return defer.reject({code: 201});
                            } else {
                                queries = insertQueries(identifier, patientIdentifierTable, patientUuid, queries, db);
                            }
                        });
                    promises.push(promise);
                }
            });
            $q.all(promises).then(function () {
                var tx = db.createTransaction();
                return tx.exec(queries).then(function () {
                    return defer.resolve();
                });
            });
            return defer.promise;
        };

        return {
            insertPatientIdentifiers: insertPatientIdentifiers,
            getPatientIdentifiersByPatientUuid: getPatientIdentifiersByPatientUuid
        };
    }]);

'use strict';

angular.module('bahmni.common.offline')
    .service('encounterDbService', function () {
        var insertEncounterData = function (db, encounterData) {
            encounterData = JSON.parse(JSON.stringify(encounterData));
            var patientUuid = encounterData.patientUuid;
            var uuid = encounterData.encounterUuid;
            var encounterDateTime = encounterData.encounterDateTime;
            var encounterType = encounterData.encounterType ? encounterData.encounterType.toUpperCase() : null;
            var providerUuid = encounterData.providers[0].uuid;
            var visitUuid = encounterData.visitUuid;
            var encounterTable = db.getSchema().table('encounter');

            var row = encounterTable.createRow({
                uuid: uuid,
                patientUuid: patientUuid,
                encounterDateTime: new Date(encounterDateTime),
                encounterType: encounterType,
                providerUuid: providerUuid,
                visitUuid: visitUuid,
                encounterJson: encounterData
            });
            return db.insertOrReplace().into(encounterTable).values([row]).exec().then(function () {
                return patientUuid;
            });
        };

        var getEncountersByPatientUuid = function (db, patientUuid) {
            var p = db.getSchema().table('encounter');
            return db.select(p.encounterJson.as('encounter'))
                .from(p)
                .where(p.patientUuid.eq(patientUuid)).exec()
                .then(function (results) {
                    return results;
                });
        };

        var findActiveEncounter = function (db, params, encounterSessionDurationInMinutes) {
            var DateUtil = Bahmni.Common.Util.DateUtil;
            var encounterType = params.encounterType ? params.encounterType.toUpperCase() : null;
            var p = db.getSchema().table('encounter');
            return db.select(p.encounterJson.as('encounter'))
                .from(p)
                .where(lf.op.and(
                    p.patientUuid.eq(params.patientUuid), p.providerUuid.eq(params.providerUuid), p.encounterType.match(encounterType), p.encounterDateTime.gte(DateUtil.addMinutes(new Date(), -1 * encounterSessionDurationInMinutes))))
                .exec()
                .then(function (result) {
                    return angular.copy(result[0]);
                });
        };

        var getEncounterByEncounterUuid = function (db, encounterUuid) {
            var en = db.getSchema().table('encounter');
            return db.select(en.encounterJson.as('encounter'))
                .from(en)
                .where(en.uuid.eq(encounterUuid)).exec()
                .then(function (result) {
                    return angular.copy(result[0]);
                });
        };

        var getEncountersByVisits = function (db, params) {
            var encounter = db.getSchema().table('encounter');
            return db.select(encounter.encounterJson.as('encounter'))
                .from(encounter)
                .where(
                    lf.op.and(encounter.patientUuid.eq(params.patientUuid), encounter.visitUuid.in(params.visitUuids)))
                .orderBy(encounter.encounterDateTime, lf.Order.DESC)
                .exec()
                .then(function (results) {
                    return results;
                });
        };

        return {
            insertEncounterData: insertEncounterData,
            getEncountersByPatientUuid: getEncountersByPatientUuid,
            findActiveEncounter: findActiveEncounter,
            getEncounterByEncounterUuid: getEncounterByEncounterUuid,
            getEncountersByVisits: getEncountersByVisits
        };
    });

'use strict';

angular.module('bahmni.common.offline')
    .service('labOrderResultsDbService', function () {
        var insertLabOrderResults = function (db, patientUuid, labOrderResults) {
            var labOrderResultsJson = JSON.parse(JSON.stringify(labOrderResults));
            var labOrderResultTable = db.getSchema().table('lab_order_result');
            var row = labOrderResultTable.createRow({
                patientUuid: patientUuid,
                labOrderResultsJson: labOrderResultsJson
            });

            return db.insertOrReplace().into(labOrderResultTable).values([row]).exec().then(function () {
                return {
                    patientUuid: patientUuid,
                    labOrderResults: labOrderResultsJson
                };
            });
        };

        var getLabOrderResultsForPatient = function (db, params) {
            var labOrderResultTable = db.getSchema().table('lab_order_result');
            return db.select(labOrderResultTable.labOrderResultsJson.as('results'))
                .from(labOrderResultTable)
                .where(labOrderResultTable.patientUuid.eq(params.patientUuid))
                .exec()
                .then(function (results) {
                    return results[0] ? results[0] : { results: {"results": [], "tabularResult": {"dates": [], "orders": [], "values": []}}};
                });
        };

        return {
            getLabOrderResultsForPatient: getLabOrderResultsForPatient,
            insertLabOrderResults: insertLabOrderResults
        };
    });

'use strict';

angular.module('bahmni.common.offline')
    .service('errorLogDbService', function () {
        var insertLog = function (db, uuid, failedRequest, responseStatus, stacktrace, requestPayload, provider) {
            var errorLogTable = db.getSchema().table('error_log');
            var row = errorLogTable.createRow({
                uuid: uuid,
                failedRequestUrl: failedRequest,
                logDateTime: new Date(),
                responseStatus: responseStatus,
                stackTrace: stacktrace,
                requestPayload: requestPayload,
                provider: provider
            });
            return db.insertOrReplace().into(errorLogTable).values([row]).exec();
        };

        var getLog = function (db) {
            var p = db.getSchema().table('error_log');

            return db.select()
                .from(p).exec()
                .then(function (results) {
                    return results;
                });
        };

        var getErrorLogByUuid = function (db, errorUuid) {
            var error = db.getSchema().table('error_log');
            return db.select()
                .from(error)
                .where(error.uuid.eq(errorUuid)).exec()
                .then(function (result) {
                    return result[0] || {};
                });
        };

        var deleteByUuid = function (db, uuid) {
            var error = db.getSchema().table('error_log');
            return db.delete()
                .from(error)
                .where(error.uuid.eq(uuid)).exec();
        };

        return {
            insertLog: insertLog,
            getLog: getLog,
            getErrorLogByUuid: getErrorLogByUuid,
            deleteByUuid: deleteByUuid
        };
    });

'use strict';

angular.module('bahmni.common.offline')
    .service('offlineMarkerDbService', [function () {
        var getMarkers = function (db, markerTable, markerName) {
            return db.select()
                .from(markerTable)
                .where(markerTable.markerName.eq(markerName)).exec();
        };

        var insertOrUpdateMarker = function (db, markerTable, row) {
            return db.insertOrReplace().into(markerTable).values([row]).exec();
        };

        var insertMarker = function (db, markerName, eventUuid, filters) {
            var markerTable = db.getSchema().table('event_log_marker');

            var marker = {
                markerName: markerName,
                lastReadEventUuid: eventUuid,
                filters: filters,
                lastReadTime: new Date()
            };
            var row = markerTable.createRow(marker);

            return insertOrUpdateMarker(db, markerTable, row).then(function () {
                return marker;
            });
        };

        var getMarker = function (db, markerName) {
            var markerTable = db.getSchema().table('event_log_marker');
            return getMarkers(db, markerTable, markerName).then(function (markers) {
                return markers[0];
            });
        };

        return {
            insertMarker: insertMarker,
            getMarker: getMarker
        };
    }]);

'use strict';

angular.module('bahmni.common.offline')
    .service('offlineAddressHierarchyDbService', ['$q', function ($q) {
        var db;
        var addressFields;

        var init = function (_db) {
            db = _db;
        };

        var insertAddressHierarchy = function (addressHierarchy) {
            return insertAddressHierarchyLevel(addressHierarchy.addressHierarchyLevel).then(function () {
                return insertAddressHierarchyEntry(addressHierarchy);
            });
        };

        var insertAddressHierarchyEntry = function (entry) {
            var addressHierarchyEntryTable = db.getSchema().table('address_hierarchy_entry');

            var row = addressHierarchyEntryTable.createRow({
                id: entry.addressHierarchyEntryId,
                name: entry.name,
                levelId: entry.addressHierarchyLevel.levelId,
                parentId: entry.parentId,
                userGeneratedId: entry.userGeneratedId,
                uuid: entry.uuid
            });

            return db.insertOrReplace().into(addressHierarchyEntryTable).values([row]).exec().then(function () {
                return entry;
            });
        };

        var insertAddressHierarchyLevel = function (level) {
            var addressHierarchyLevelTable = db.getSchema().table('address_hierarchy_level');

            var row = addressHierarchyLevelTable.createRow({
                addressHierarchyLevelId: level.levelId,
                name: level.name,
                parentLevelId: level.parentLevelId,
                addressField: level.addressField,
                uuid: level.uuid,
                required: level.required
            });

            return db.insertOrReplace().into(addressHierarchyLevelTable).values([row]).exec().then(function () {
                return level;
            });
        };

        var search = function (params) {
            var addressHierarchyLevelTable = db.getSchema().table('address_hierarchy_level');
            var addressHierarchyEntryTable = db.getSchema().table('address_hierarchy_entry');
            addressFields = Bahmni.Common.Offline.AddressFields;
            var addressHierarchyField;
            var level;

            for (var i in addressFields) {
                if (addressFields[i] === params.addressField) {
                    addressHierarchyField = i;
                }
            }
            return db.select()
                .from(addressHierarchyLevelTable)
                .where(addressHierarchyLevelTable.addressField.eq(addressHierarchyField)).exec()
                .then(function (result) {
                    level = result[0];
                    if (level != null) {
                        if (params.parentUuid != null) {
                            return db.select()
                                .from(addressHierarchyEntryTable)
                                .where(addressHierarchyEntryTable.uuid.eq(params.parentUuid))
                                .exec()
                                .then(function (result) {
                                    var parent = result[0] != null ? result[0] : null;
                                    if (parent != null) {
                                        return db.select()
                                            .from(addressHierarchyEntryTable)
                                            .where(lf.op.and(
                                                addressHierarchyEntryTable.levelId.eq(level.addressHierarchyLevelId),
                                                addressHierarchyEntryTable.parentId.eq(parent.id),
                                                addressHierarchyEntryTable.name.match(new RegExp(params.searchString, 'i')
                                                )))
                                            .limit(params.limit).exec()
                                            .then(
                                                function (result) {
                                                    return getAddresses(result).then(function (response) {
                                                        return {data: response};
                                                    });
                                                });
                                    }
                                });
                        }
                        return db.select()
                            .from(addressHierarchyEntryTable)
                            .where(lf.op.and(
                                addressHierarchyEntryTable.levelId.eq(level.addressHierarchyLevelId),
                                addressHierarchyEntryTable.name.match(new RegExp(params.searchString, 'i')
                                )))
                            .limit(params.limit).exec()
                            .then(
                                function (result) {
                                    return getAddresses(result).then(function (response) {
                                        return {data: response};
                                    });
                                });
                    }
                    return {data: []};
                });
        };

        var getAddresses = function (addressHierarchyEntries) {
            var addressHierarchyModelPromises = [];
            _.each(addressHierarchyEntries, function (entry) {
                addressHierarchyModelPromises.push(getAddressesAndParents(entry));
            });
            return $q.all(addressHierarchyModelPromises).then(function (results) {
                return results;
            });
        };

        var getAddressesAndParents = function (entry) {
            var modelMap = {};
            modelMap.name = entry.name;
            modelMap.uuid = entry.uuid;
            modelMap.userGeneratedId = entry.userGeneratedId;
            if (entry.parentId != null) {
                return getParentAddressById(entry.parentId).then(function (result) {
                    modelMap.parent = result;
                    return modelMap;
                });
            } else {
                var addressPromise = $q.defer();
                addressPromise.resolve(modelMap);
                return addressPromise.promise;
            }
        };

        var getParentAddressById = function (id) {
            var addressHierarchyEntryTable = db.getSchema().table('address_hierarchy_entry');
            return db.select()
                .from(addressHierarchyEntryTable)
                .where(addressHierarchyEntryTable.id.eq(id))
                .exec()
                .then(function (result) {
                    var parent = result[0] != null ? result[0] : null;
                    if (parent != null) {
                        return getAddressesAndParents(parent);
                    }
                });
        };

        return {
            init: init,
            insertAddressHierarchy: insertAddressHierarchy,
            search: search,
            getParentAddressById: getParentAddressById
        };
    }]);

'use strict';

angular.module('bahmni.common.offline')
    .service('offlineConfigDbService', function () {
        var db;

        var getConfig = function (module) {
            var config = db.getSchema().table('configs');
            return db.select()
                .from(config)
                .where(config.key.eq(module)).exec()
                .then(function (result) {
                    return result[0];
                });
        };

        var insertConfig = function (module, data, eTag) {
            var config = db.getSchema().table('configs');

            var row = config.createRow({
                key: module,
                value: data,
                etag: eTag
            });

            return db.insertOrReplace().into(config).values([row]).exec().then(function (result) {
                return result[0];
            });
        };

        var init = function (_db) {
            db = _db;
        };

        return {
            init: init,
            getConfig: getConfig,
            insertConfig: insertConfig
        };
    });

var Bahmni = Bahmni || {};
Bahmni.Common = Bahmni.Common || {};
Bahmni.Common.Offline = Bahmni.Common.Offline || {};

Bahmni.Common.Offline.SchemaDefinitions = {
    AddressHierarchyLevel: {
        tableName: 'address_hierarchy_level',
        columns: [
            {
                name: 'addressHierarchyLevelId',
                type: 'INTEGER'
            }, {
                name: 'name',
                type: 'STRING'
            }, {
                name: 'parentLevelId',
                type: 'INTEGER'
            }, {
                name: 'addressField',
                type: 'STRING'
            }, {
                name: 'uuid',
                type: 'STRING'
            }, {
                name: 'required',
                type: 'INTEGER'
            }
        ],
        nullableColumns: ['name', 'parentLevelId', 'addressField'],
        primaryKeyColumns: ['uuid']
    },

    AddressHierarchyEntry: {
        tableName: 'address_hierarchy_entry',
        columns: [
            {
                name: 'id',
                type: 'INTEGER'
            }, {
                name: 'name',
                type: 'STRING'
            }, {
                name: 'levelId',
                type: 'INTEGER'
            }, {
                name: 'parentId',
                type: 'INTEGER'
            }, {
                name: 'userGeneratedId',
                type: 'STRING'
            }, {
                name: 'uuid',
                type: 'STRING'
            }
        ],
        nullableColumns: ['name', 'parentId', 'userGeneratedId'],
        primaryKeyColumns: ['uuid']
    },

    EventLogMarker: {
        tableName: 'event_log_marker',
        columns: [
            {
                name: 'markerName',
                type: 'STRING'
            },
            {
                name: 'lastReadEventUuid',
                type: 'STRING'
            }, {
                name: 'filters',
                type: 'STRING'
            }, {
                name: 'lastReadTime',
                type: 'DATE_TIME'
            }
        ],
        nullableColumns: ['filters', 'lastReadEventUuid'],
        primaryKeyColumns: ['markerName']
    },
    PatientAttributeType: {
        tableName: 'patient_attribute_type',
        columns: [
            {
                name: 'attributeTypeId',
                type: 'INTEGER'
            }, {
                name: 'attributeName',
                type: 'STRING'
            }, {
                name: 'format',
                type: 'STRING'
            }, {
                name: 'uuid',
                type: 'STRING'
            }
        ],
        nullableColumns: ['format'],
        primaryKeyColumns: ['uuid']
    },
    PatientAttribute: {
        tableName: 'patient_attribute',
        columns: [
            {
                name: 'attributeTypeId',
                type: 'INTEGER'
            }, {
                name: 'attributeValue',
                type: 'STRING'
            }, {
                name: 'patientUuid',
                type: 'STRING'
            }, {
                name: 'uuid',
                type: 'STRING'
            }
        ],
        nullableColumns: [],
        primaryKeyColumns: ['uuid']
    },

    Patient: {
        tableName: 'patient',
        columns: [
            {
                name: 'givenName',
                type: 'STRING'
            }, {
                name: 'middleName',
                type: 'STRING'
            }, {
                name: 'familyName',
                type: 'STRING'
            }, {
                name: 'gender',
                type: 'STRING'
            }, {
                name: 'voided',
                type: 'BOOLEAN'
            }, {
                name: 'birthdate',
                type: 'DATE_TIME'
            }, {
                name: 'dateCreated',
                type: 'DATE_TIME'
            }, {
                name: 'patientJson',
                type: 'OBJECT'
            }, {
                name: 'uuid',
                type: 'STRING'
            }
        ],
        nullableColumns: ['gender', 'birthdate', 'givenName', 'middleName', 'familyName'],
        primaryKeyColumns: ['uuid'],
        indexes: [
            {
                indexName: 'givenNameIndex',
                columnNames: ['givenName']
            }, {
                indexName: 'middleNameIndex',
                columnNames: ['middleName']
            }, {
                indexName: 'familyNameIndex',
                columnNames: ['familyName']
            }
        ]
    },
    PatientAddress: {
        tableName: 'patient_address',
        columns: [
            {
                name: 'address1',
                type: 'STRING'
            }, {
                name: 'address2',
                type: 'STRING'
            }, {
                name: 'cityVillage',
                type: 'STRING'
            }, {
                name: 'stateProvince',
                type: 'STRING'
            }, {
                name: 'postalCode',
                type: 'STRING'
            }, {
                name: 'country',
                type: 'STRING'
            }, {
                name: 'countyDistrict',
                type: 'STRING'
            }, {
                name: 'address3',
                type: 'STRING'
            }, {
                name: 'address4',
                type: 'STRING'
            }, {
                name: 'address5',
                type: 'STRING'
            }, {
                name: 'address6',
                type: 'STRING'
            }, {
                name: 'patientUuid',
                type: 'STRING'
            }
        ],
        nullableColumns: ['address1', 'address2', 'cityVillage', 'stateProvince', 'postalCode', 'country', 'countyDistrict', 'address3', 'address4', 'address5', 'address6'],
        primaryKeyColumns: ['patientUuid']
    },
    Visit: {
        tableName: 'visit',
        columns: [
            {
                name: 'uuid',
                type: 'STRING'
            },
            {
                name: 'patientUuid',
                type: 'STRING'
            },
            {
                name: 'startDatetime',
                type: 'DATE_TIME'
            },
            {
                name: 'visitJson',
                type: 'OBJECT'
            }
        ],
        nullableColumns: [],
        primaryKeyColumns: ['uuid']
    },
    Encounter: {
        tableName: 'encounter',
        columns: [
            {
                name: 'uuid',
                type: 'STRING'
            },
            {
                name: 'patientUuid',
                type: 'STRING'
            },
            {
                name: 'encounterDateTime',
                type: 'DATE_TIME'
            },
            {
                name: 'encounterType',
                type: 'STRING'
            },
            {
                name: 'providerUuid',
                type: 'STRING'
            },
            {
                name: 'visitUuid',
                type: 'STRING'
            },
            {
                name: 'encounterJson',
                type: 'OBJECT'
            }
        ],
        nullableColumns: ['visitUuid'],
        primaryKeyColumns: ['uuid']
    },
    Observation: {
        tableName: 'observation',
        columns: [
            {
                name: 'uuid',
                type: 'STRING'
            },
            {
                name: 'encounterUuid',
                type: 'STRING'
            },
            {
                name: 'visitUuid',
                type: 'STRING'
            },
            {
                name: 'patientUuid',
                type: 'STRING'
            },
            {
                name: 'conceptName',
                type: 'STRING'
            },
            {
                name: 'observationJson',
                type: 'OBJECT'
            }
        ],
        nullableColumns: ['visitUuid'],
        primaryKeyColumns: ['uuid']
    },
    ErrorLog: {
        tableName: 'error_log',
        columns: [
            {
                name: 'uuid',
                type: 'STRING'
            }, {
                name: 'failedRequestUrl',
                type: 'STRING'
            }, {
                name: 'logDateTime',
                type: 'DATE_TIME'
            }, {
                name: 'responseStatus',
                type: 'INTEGER'
            }, {
                name: 'stackTrace',
                type: 'STRING'
            }, {
                name: 'requestPayload',
                type: 'STRING'
            }, {
                name: 'provider',
                type: 'OBJECT'
            }
        ],
        nullableColumns: ['responseStatus'],
        uniqueKeyColumns: ['failedRequestUrl', 'requestPayload'],
        primaryKeyColumns: ['uuid']
    },
    PatientIdentifier: {
        tableName: 'patient_identifier',
        columns: [
            {
                name: 'typeUuid',
                type: 'STRING'
            },
            {
                name: 'identifier',
                type: 'STRING'
            },
            {
                name: 'primary',
                type: 'BOOLEAN'
            },
            {
                name: 'primaryIdentifier',
                type: 'STRING'
            },
            {
                name: 'extraIdentifiers',
                type: 'STRING'
            },
            {
                name: 'patientUuid',
                type: 'STRING'
            },
            {
                name: 'identifierJson',
                type: 'STRING'
            }
        ],
        nullableColumns: ['identifier', 'primaryIdentifier', 'extraIdentifiers'],
        primaryKeyColumns: ['typeUuid', 'patientUuid']
    },

    LabOrderResult: {
        tableName: 'lab_order_result',
        columns: [
            {
                name: 'patientUuid',
                type: 'STRING'
            },
            {
                name: 'labOrderResultsJson',
                type: 'STRING'
            }
        ],
        nullableColumns: [],
        primaryKeyColumns: ['patientUuid']
    }
};

Bahmni.Common.Offline.MetaDataSchemaDefinitions = {
    Concept: {
        tableName: 'concept',
        columns: [
            {
                name: 'data',
                type: 'STRING'
            }, {
                name: 'uuid',
                type: 'STRING'
            }, {
                name: 'name',
                type: 'STRING'
            }, {
                name: 'parents',
                type: 'OBJECT'
            }
        ],
        nullableColumns: [],
        primaryKeyColumns: ['uuid']
    },

    Configs: {
        tableName: 'configs',
        columns: [
            {
                name: 'key',
                type: 'STRING'
            }, {
                name: 'value',
                type: 'STRING'
            }, {
                name: 'etag',
                type: 'STRING'
            }
        ],
        nullableColumns: ['etag'],
        primaryKeyColumns: ['key']
    },

    ReferenceData: {
        tableName: 'reference_data',
        columns: [
            {
                name: 'key',
                type: 'STRING'
            }, {
                name: 'data',
                type: 'STRING'
            }, {
                name: 'etag',
                type: 'STRING'
            }
        ],
        nullableColumns: ['etag'],
        primaryKeyColumns: ['key']
    },

    LoginLocations: {
        tableName: 'login_locations',
        columns: [
            {
                name: 'uuid',
                type: 'STRING'
            }, {
                name: 'value',
                type: 'STRING'
            }
        ],
        nullableColumns: [],
        primaryKeyColumns: ['uuid']
    },
    EventLogMarker: {
        tableName: 'event_log_marker',
        columns: [
            {
                name: 'markerName',
                type: 'STRING'
            },
            {
                name: 'lastReadEventUuid',
                type: 'STRING'
            }, {
                name: 'filters',
                type: 'STRING'
            }, {
                name: 'lastReadTime',
                type: 'DATE_TIME'
            }
        ],
        nullableColumns: ['filters', 'lastReadEventUuid'],
        primaryKeyColumns: ['markerName']
    },
    Form: {
        tableName: 'form',
        columns: [
            {
                name: 'name',
                type: 'STRING'
            }, {
                name: 'uuid',
                type: 'STRING'
            }, {
                name: 'version',
                type: 'STRING'
            }, {
                name: 'resources',
                type: 'OBJECT'
            }
        ],
        nullableColumns: [],
        primaryKeyColumns: ['uuid']
    }
};

var Bahmni = Bahmni || {};
Bahmni.Common = Bahmni.Common || {};
Bahmni.Common.Offline = Bahmni.Common.Offline || {};

// This file is added as a template, If need to run migrations use this template and create a new and change Migration1 to Migration[DB_VERSION-1]

Bahmni.Common.Offline.Migration1 = {
    SchemaDefinitions: {
        // Define table schema for new tables, same as that of SchemaDefinitions.js
    },
    Queries: [
        function (rawDb) {
            // Write your queries that rawDb supports
        }
    ],
    CopyOver: [
        function (db) {
            // Write your Lovefield queries using the given db instance
        }
    ]

};

'use strict';

var Bahmni = Bahmni || {};
Bahmni.Common = Bahmni.Common || {};
Bahmni.Common.Offline = Bahmni.Common.Offline || {};

Bahmni.Common.Offline.UUID = {
    generateUuid: function () {
        var S4 = function () {
            return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
        };

        return (S4() + S4() + "-" + S4() + "-4" + S4().substr(0, 3) + "-" + S4() + "-" + S4() + S4() + S4()).toLowerCase();
    }
};

var Bahmni = Bahmni || {};
Bahmni.Common = Bahmni.Common || {};
Bahmni.Common.Offline = Bahmni.Common.Offline || {};

Bahmni.Common.Offline.AddressFields = {
    ADDRESS_1: "address1",
    ADDRESS_2: "address2",
    ADDRESS_3: "address3",
    NEIGHBORHOOD_CELL: "neighborhoodCell",
    ADDRESS_4: "address4",
    TOWNSHIP_DIVISION: "townshipDivision",
    ADDRESS_5: "address5",
    SUBREGION: "subregion",
    ADDRESS_6: "address6",
    REGION: "region",
    CITY_VILLAGE: "cityVillage",
    COUNTY_DISTRICT: "countyDistrict",
    STATE_PROVINCE: "stateProvince",
    COUNTRY: "country",
    POSTAL_CODE: "postalCode",
    LONGITUDE: "longitude",
    LATITUDE: "latitude"
};

'use strict';

angular.module('bahmni.common.offline')
    .service('referenceDataDbService', ['patientAttributeDbService', 'locationDbService', 'offlineService',
        function (patientAttributeDbService, locationDbService, offlineService) {
            var db, metaDataDb;

            var getReferenceData = function (referenceDataKey) {
                var referenceData = metaDataDb.getSchema().table('reference_data');
                return metaDataDb.select()
                .from(referenceData)
                .where(referenceData.key.eq(referenceDataKey)).exec()
                .then(function (result) {
                    return referenceDataKey === 'LoginLocations' ? setSyncInfo(result[0]) : result[0];
                });
            };

            var setSyncInfo = function (loginLocations) {
                var initialSyncStatus = _.values(offlineService.getItem("initialSyncStatus"));
                if (loginLocations && loginLocations.data.results) {
                    _.each(loginLocations.data.results, function (loginLocation) {
                        var x = _.find(initialSyncStatus, function (syncLocation) {
                            return syncLocation[loginLocation.uuid];
                        });
                        loginLocation.isSynced = x ? x[loginLocation.uuid] === 'complete' : false;
                    });
                }
                return loginLocations;
            };

            var insertReferenceData = function (referenceDataKey, data, eTag) {
                var referenceData = metaDataDb.getSchema().table('reference_data');

                var row = referenceData.createRow({
                    key: referenceDataKey,
                    data: data,
                    etag: eTag
                });

                return metaDataDb.insertOrReplace().into(referenceData).values([row]).exec().then(function () {
                    switch (referenceDataKey) {
                    case 'PersonAttributeType':
                        return patientAttributeDbService.insertAttributeTypes(db, data.results);
                    case 'LoginLocations':
                        return locationDbService.insertLocations(metaDataDb, data.results);
                    default :
                        return;
                    }
                });
            };

            var init = function (_metadatadb, _db) {
                metaDataDb = _metadatadb;
                db = _db;
            };

            return {
                init: init,
                getReferenceData: getReferenceData,
                insertReferenceData: insertReferenceData
            };
        }]);

'use strict';

angular.module('bahmni.common.offline')
    .service('locationDbService', [ function () {
        var insertLocations = function (db, locations) {
            var table, queries = [];
            table = db.getSchema().table('login_locations');
            for (var i = 0; i < locations.length; i++) {
                var row = table.createRow({
                    'uuid': locations[i].uuid,
                    'value': locations[i]
                });
                queries.push(db.insertOrReplace().into(table).values([row]));
            }
            var tx = db.createTransaction();
            return tx.exec(queries);
        };

        var getLocationByUuid = function (db, uuid) {
            var loginLocationTable = db.getSchema().table('login_locations');

            return db.select(loginLocationTable.value)
                     .from(loginLocationTable)
                     .where(loginLocationTable.uuid.eq(uuid))
                     .exec()
                     .then(function (loginLocation) {
                         return loginLocation[0].value;
                     });
        };

        return {
            insertLocations: insertLocations,
            getLocationByUuid: getLocationByUuid
        };
    }]);

'use strict';

angular.module('bahmni.common.offline')
    .service('visitDbService', [function () {
        var insertVisitData = function (db, visit) {
            var visitTable = db.getSchema().table('visit');
            var row = visitTable.createRow({
                'uuid': visit.uuid,
                'patientUuid': visit.patient.uuid,
                'startDatetime': new Date(visit.startDatetime),
                'visitJson': visit
            });
            return db.insertOrReplace().into(visitTable).values([row]).exec().then(function () {
                return visit;
            });
        };

        var getVisitByUuid = function (db, uuid) {
            var visitTable = db.getSchema().table('visit');

            return db.select(visitTable.value)
                .from(visitTable)
                .where(visitTable.uuid.eq(uuid))
                .exec()
                .then(function (visit) {
                    return visit[0];
                });
        };

        var getVisitsByPatientUuid = function (db, patientUuid, numberOfVisits) {
            var visitTable = db.getSchema().table('visit');

            return db.select(visitTable.uuid, visitTable.startDatetime)
                .from(visitTable)
                .where(visitTable.patientUuid.eq(patientUuid))
                .orderBy(visitTable.startDatetime, lf.Order.DESC)
                .limit(numberOfVisits)
                .exec()
                .then(function (visitUuids) {
                    return visitUuids;
                });
        };

        var getVisitDetailsByPatientUuid = function (db, patientUuid) {
            var visitTable = db.getSchema().table('visit');

            return db.select(visitTable.visitJson.as('visit'))
                .from(visitTable)
                .where(visitTable.patientUuid.eq(patientUuid))
                .orderBy(visitTable.startDatetime, lf.Order.DESC)
                .exec()
                .then(function (visits) {
                    return _.map(visits, function (visit) {
                        return visit.visit;
                    });
                });
        };

        return {
            insertVisitData: insertVisitData,
            getVisitByUuid: getVisitByUuid,
            getVisitsByPatientUuid: getVisitsByPatientUuid,
            getVisitDetailsByPatientUuid: getVisitDetailsByPatientUuid
        };
    }]);

'use strict';

angular.module('bahmni.common.offline')
    .service('observationDbService', function () {
        var insertObservationsData = function (db, patientUuid, visitUuid, observationsDataList) {
            observationsDataList = JSON.parse(JSON.stringify(observationsDataList));
            var observationTable = db.getSchema().table('observation');
            var queries = [];
            _.each(observationsDataList, function (observationData) {
                if (!observationData.voided) {
                    var row = observationTable.createRow({
                        uuid: observationData.uuid,
                        patientUuid: patientUuid,
                        encounterUuid: observationData.encounterUuid,
                        visitUuid: visitUuid,
                        conceptName: observationData.concept.name,
                        observationJson: observationData
                    });
                    queries.push(db.insertOrReplace().into(observationTable).values([row]));
                } else {
                    var obsToBeRemoved = removeObservationByObservationUuid(db, observationData.uuid);
                    queries.push(obsToBeRemoved);
                }
            });
            var tx = db.createTransaction();
            return tx.exec(queries);
        };

        var getObservationsFor = function (db, params) {
            var obs = db.getSchema().table('observation');
            return db.select(obs.observationJson.as('observation'))
                .from(obs)
                .where(
                    lf.op.and(obs.patientUuid.eq(params.patientUuid), obs.conceptName.in(params.conceptNames), lf.op.or(obs.visitUuid.in(params.visitUuids), obs.visitUuid.eq(null)))
                )
                .exec()
                .then(function (results) {
                    return results;
                });
        };

        var getObservationsForVisit = function (db, visitUuid) {
            var obs = db.getSchema().table('observation');
            return db.select(obs.observationJson.as('observation'))
                .from(obs)
                .where(obs.visitUuid.eq(visitUuid))
                .exec()
                .then(function (results) {
                    return results;
                });
        };

        var removeObservationByObservationUuid = function (db, observationUuid) {
            var obs = db.getSchema().table('observation');
            return db.delete()
                .from(obs)
                .where(obs.uuid.eq(observationUuid));
        };

        var deleteByEncounterUuid = function (db, encounterUuid) {
            var obs = db.getSchema().table('observation');
            return db.delete()
                .from(obs)
                .where(obs.encounterUuid.eq(encounterUuid)).exec();
        };

        return {
            getObservationsFor: getObservationsFor,
            insertObservationsData: insertObservationsData,
            getObservationsForVisit: getObservationsForVisit,
            deleteByEncounterUuid: deleteByEncounterUuid
        };
    });

'use strict';

angular.module('bahmni.common.offline')
    .service('conceptDbService', ['$q',
        function ($q) {
            var db;

            var getConcept = function (conceptUuid) {
                var deferred = $q.defer();
                var concept = db.getSchema().table('concept');
                db.select()
                    .from(concept)
                    .where(concept.uuid.eq(conceptUuid)).exec()
                    .then(function (result) {
                        deferred.resolve(result[0]);
                    });
                return deferred.promise;
            };

            var getConceptByName = function (conceptName) {
                var deferred = $q.defer();
                var concept = db.getSchema().table('concept');
                db.select()
                    .from(concept)
                    .where(concept.name.eq(conceptName)).exec()
                    .then(function (result) {
                        deferred.resolve(result[0]);
                    });
                return deferred.promise;
            };

            var insertConceptAndUpdateHierarchy = function (data, parent) {
                return insertConcept(data, parent).then(function () {
                    return updateChildren(data.results[0]).then(function () {
                        return updateParentJson(data.results[0]);
                    });
                });
            };

            var insertConcept = function (data, parent) {
                var concept = db.getSchema().table('concept');
                var uuid = data.results && data.results[0] ? data.results[0].uuid : undefined;
                return getParents(uuid).then(function (response) {
                    var parents = {};
                    if (response.length == 0 || response[0].parents == undefined) {
                        parents.parentConcepts = [];
                    } else {
                        parents = response[0].parents;
                    }

                    if (parent && parent.length > 0) {
                        _.each(parent, function (member) {
                            if (!_.find(parents.parentConcepts, member)) {
                                parents.parentConcepts.push(member);
                            }
                        });
                    }

                    var row = concept.createRow({
                        data: data,
                        name: data.results[0].name.name,
                        uuid: uuid,
                        parents: parents
                    });

                    return db.insertOrReplace().into(concept).values([row]).exec();
                });
            };

            var getParents = function (childUuid) {
                var concept = db.getSchema().table('concept');
                return db.select(concept.parents)
                    .from(concept)
                    .where(concept.uuid.eq(childUuid)).exec();
            };

            var updateChildren = function (concept) {
                var deferred = $q.defer();
                var length = concept.setMembers.length;
                if (length == 0) {
                    deferred.resolve();
                }
                var count = 0;
                _.each(concept.setMembers, function (child) {
                    insertConcept({"results": [child]}, [{conceptName: concept.name.name, uuid: concept.uuid}]).then(function () {
                        count++;
                        if (count == length) {
                            deferred.resolve();
                        }
                    });
                });
                return deferred.promise;
            };

            var updateParentJson = function (child) {
                return getParents(child.uuid).then(function (response) {
                    if (response[0].parents == undefined) {
                        return;
                    }
                    _.each(response[0].parents.parentConcepts, function (eachParent) {
                        return getConcept(eachParent.uuid).then(function (parent) {
                            for (var i = 0; i < parent.data.results[0].setMembers.length; i++) {
                                if (parent.data.results[0].setMembers[i].uuid == child.uuid) {
                                    parent.data.results[0].setMembers[i] = child;
                                }
                            }
                            insertConcept(parent.data, parent.parents.parentConcepts);
                            updateParentJson(parent.data.results[0]);
                        });
                    });
                });
            };

            var init = function (_db) {
                db = _db;
            };

            var getAllParentsInHierarchy = function (conceptName, conceptNamesInHierarchy) {
                return getConceptByName(conceptName).then(function (result) {
                    if (!result) {
                        return [];
                    }
                    conceptNamesInHierarchy.push(conceptName);
                    var parentConcepts = result.parents.parentConcepts;
                    // TODO not considering all the parents
                    if (parentConcepts && parentConcepts.length > 0) {
                        return getAllParentsInHierarchy(parentConcepts[0].conceptName, conceptNamesInHierarchy);
                    }
                    return conceptNamesInHierarchy;
                });
            };

            return {
                init: init,
                getConcept: getConcept,
                getConceptByName: getConceptByName,
                insertConceptAndUpdateHierarchy: insertConceptAndUpdateHierarchy,
                updateChildren: updateChildren,
                updateParentJson: updateParentJson,
                getAllParentsInHierarchy: getAllParentsInHierarchy
            };
        }]);

'use strict';

angular.module('bahmni.common.offline')
    .service('formDbService', function () {
        var db;
        var init = function (_db) {
            db = _db;
        };
        var insertForm = function (data) {
            var form = db.getSchema().table('form');
            var row = form.createRow({
                resources: data.resources,
                name: data.name,
                uuid: data.uuid,
                version: data.version
            });
            return db.insertOrReplace().into(form).values([row]).exec();
        };

        var getAllForms = function () {
            var form = db.getSchema().table('form');
            return db.select(form.name, form.uuid, form.version)
                .from(form).exec();
        };

        var getFormByUuid = function (uuid) {
            var form = db.getSchema().table('form');
            return db.select().from(form)
                .where(form.uuid.eq(uuid)).exec().then(function (results) {
                    return results[0];
                });
        };

        return {
            init: init,
            insertForm: insertForm,
            getAllForms: getAllForms,
            getFormByUuid: getFormByUuid
        };
    });

'use strict';

angular.module("bahmni.common.offline")
    .service("scheduledSync", ['$q', '$rootScope', 'scheduledJob', 'offlineService', 'offlineDbService', 'androidDbService', 'offlinePush', 'offlinePull',
        'appUpdateService', 'ngDialog',
        function ($q, $rootScope, scheduledJob, offlineService, offlineDbService, androidDbService, offlinePush, offlinePull,
                  appUpdateService, ngDialog) {
            return function (syncButtonConfig) {
                var job;
                if (offlineService.isAndroidApp()) {
                    offlineDbService = androidDbService;
                }

                if (syncButtonConfig === undefined) {
                    syncButtonConfig = {delay: offlineService.getItem('schedulerInterval'), repeat: 0};
                }
                var multiStageWorker = new Bahmni.Common.Offline.MultiStageWorker($q);
                var STAGES = {
                    STAGE0: "STAGE 0",
                    STAGE1: "STAGE 1",
                    STAGE2: "STAGE 2"
                };
                multiStageWorker.addStage(
                    {
                        execute: function () {
                            try {
                                $rootScope.$broadcast("schedulerStage", STAGES.STAGE0);
                                console.log(STAGES.STAGE0);

                                return appUpdateService.getUpdateInfo().then(function (appUpdateInfo) {
                                    if (appUpdateInfo && appUpdateInfo.forcedUpdateRequired) {
                                        console.log(STAGES.STAGE0 + ' Stopping other stages, app needs an update');
                                        $rootScope.$broadcast("schedulerStage", null, true);
                                        multiStageWorker.pause();

                                        ngDialog.open({
                                            template: '../common/ui-helper/views/appUpdatePopup.html',
                                            className: 'test ngdialog-theme-default',
                                            data: appUpdateInfo,
                                            showClose: true,
                                            controller: 'AppUpdateController'
                                        });
                                    }
                                }).catch(function (response) {
                                    if (response.status === -1) {
                                        multiStageWorker.pause();
                                        $rootScope.$broadcast("schedulerStage", null, true);
                                    }
                                });
                            } catch (e) {
                                console.log('Error at ' + STAGES.STAGE0, e);
                            }
                        }
                    });
                multiStageWorker.addStage(
                    {
                        execute: function () {
                            try {
                                $rootScope.$broadcast("schedulerStage", STAGES.STAGE1);
                                console.log(STAGES.STAGE1);
                                return offlinePush().then(function () {
                                }, function (error) {
                                    console.log("Error " + STAGES.STAGE1 + "\n" + error.config.url + " " + error.statusText);
                                });
                            } catch (e) {
                                console.log('Error at ' + STAGES.STAGE1, e);
                            }
                        }

                    });
                multiStageWorker.addStage(
                    {
                        execute: function () {
                            try {
                                $rootScope.$broadcast("schedulerStage", STAGES.STAGE2);
                                console.log(STAGES.STAGE2);
                                return offlinePull().then(function () {
                                }, function (error) {
                                    console.log("Error " + STAGES.STAGE2 + "\n" + error.config.url + " " + error.statusText);
                                });
                            } catch (e) {
                                console.log('Error at ' + STAGES.STAGE2, e);
                            }
                        }
                    });
                if (!job) {
                    job = scheduledJob.create({
                        worker: multiStageWorker,
                        interval: syncButtonConfig.delay,
                        count: syncButtonConfig.repeat
                    });
                    job.start();
                }
                return job;
            };
        }
    ]);

'use strict';

angular.module("bahmni.common.offline")
    .service("scheduledJob", ['$q', '$interval', function ($q, $interval) {
        this.create = function (config) {
            return new Job(config.worker, config.interval, config.count);
        };

        var Job = function (worker, interval, repeat) {
            var jobPromise = null;

            this.start = function () {
                this.jobPromise = $interval(worker.execute, interval, repeat);
            };

            this.stop = function () {
                if (this.jobPromise != null) {
                    $interval.cancel(this.jobPromise);
                    this.jobPromise = null;
                }
            };

            this.pause = function () {
                worker.pause();
                this.stop();
            };
        };
    }]);

'use strict';

angular.module('bahmni.common.offline')
    .factory('offlinePush', ['offlineService', 'eventQueue', '$http', 'offlineDbService', 'androidDbService', '$q', 'loggingService', 'messagingService',
        function (offlineService, eventQueue, $http, offlineDbService, androidDbService, $q, loggingService, messagingService) {
            return function () {
                var releaseReservedEvents = function (reservedEvents) {
                    var promises = [];
                    _.each(reservedEvents, function (event) {
                        if (event.state === "reserved") {
                            promises.push(eventQueue.releaseFromQueue(event));
                        }
                    });
                    return promises;
                };

                var getAllDbPromises = function () {
                    var dbPromises = [];
                    var dbNames = offlineDbService.getDbNames();
                    _.each(dbNames, function (dbName) {
                        dbPromises.push(offlineDbService.initSchema(dbName));
                    });
                    return dbPromises;
                };

                var consumeFromEventQueue = function () {
                    return eventQueue.consumeFromEventQueue().then(function (event) {
                        if (!event) {
                            deferred.resolve();
                            return;
                        }
                        else {
                            return processEvent(event, dbs[event.data.dbName]);
                        }
                    });
                };

                var consumeFromErrorQueue = function () {
                    return eventQueue.consumeFromErrorQueue().then(function (event) {
                        if (!event) {
                            return;
                        }
                        else {
                            return processEvent(event, dbs[event.data.dbName]);
                        }
                    });
                };

                var postData = function (event, response) {
                    if (response == undefined) {
                        eventQueue.releaseFromQueue(event);
                        return consumeFromEventQueue();
                    }
                    var config = {
                        withCredentials: true,
                        headers: {
                            "Accept": "application/json",
                            "Content-Type": "application/json"
                        }
                    };

                    if (event.data.type && event.data.type == "encounter") {
                        return $http.post(Bahmni.Common.Constants.bahmniEncounterUrl, response.encounter, config);
                    } else if (event.data.type && event.data.type === "Error") {
                        return $http.post(Bahmni.Common.Constants.loggingUrl, angular.toJson(response));
                    } else {
                        response.relationships = [];
                        addToPatientEventsInProgress(event.id);
                        return $http.post(event.data.url, response, config);
                    }
                };

                var addToPatientEventsInProgress = function (id) {
                    var patientEvents = offlineService.getItem("patientEventsInProgress") || [];
                    patientEvents.push(id);
                    offlineService.setItem("patientEventsInProgress", patientEvents);
                };

                var getEventData = function (event, db) {
                    if (event.data.type && event.data.type == "encounter") {
                        return offlineDbService.getEncounterByEncounterUuid(event.data.encounterUuid, db);
                    } else if (event.data.type && event.data.type === "Error") {
                        return offlineDbService.getErrorLogByUuid(event.data.uuid, db);
                    } else {
                        return offlineDbService.getPatientByUuidForPost(event.data.patientUuid, db).then(function (response) {
                            if (event.data.url.indexOf(event.data.patientUuid) == -1) {
                                if (response && response.patient && response.patient.person) {
                                    delete response.patient.person.preferredName;
                                    delete response.patient.person.preferredAddress;
                                }
                            }
                            // mapIdentifiersToPostFormat(response.patient);
                            return response;
                        });
                    }
                };

                var mapIdentifiersToPostFormat = function (patient) {
                    patient.identifiers = _.map(patient.identifiers, function (identifier) {
                        return {
                            identifier: identifier.identifier,
                            identifierPrefix: identifier.identifierPrefix,
                            identifierSourceUuid: identifier.identifierSourceUuid,
                            identifierType: identifier.identifierType && identifier.identifierType.uuid || identifier.identifierType,
                            uuid: identifier.uuid,
                            preferred: identifier.preferred,
                            voided: identifier.voided
                        };
                    });
                };

                var handleHaltedEvent = function (event) {
                    messagingService.hideMessages("error");
                    eventQueue.removeFromQueue(event);
                    removeHaltedEvent(event.id);
                    return event.tube === "event_queue" ? consumeFromEventQueue() : consumeFromErrorQueue();
                };

                var isHaltedPatientEvent = function (event, response) {
                    var patientEvents = offlineService.getItem("patientEventsInProgress") || [];
                    var isPatientSyncHalted = (_.indexOf(patientEvents, event.id) < _.lastIndexOf(patientEvents, event.id));
                    var isPatientAlreadyPosted = response.status == 400 && response.data.error && (response.data.error.detail.indexOf("org.hibernate.NonUniqueObjectException") != -1);
                    return !!(isPatientSyncHalted && isPatientAlreadyPosted);
                };

                var processEvent = function (event, db) {
                    return getEventData(event, db)
                        .then(function (response) {
                            return postData(event, response)
                                .success(function (data) {
                                    if (event.data.type && event.data.type == "encounter") {
                                        return offlineDbService.deleteObsByEncounterUuid(data.encounterUuid).then(function () {
                                            return offlineDbService.createEncounter(data, db).then(function () {
                                                return successCallBack(event);
                                            });
                                        });
                                    }
                                    return successCallBack(event);
                                }).catch(function (response) {
                                    if (event.data.type !== "Error" && (parseInt(response.status / 100) === 5 || parseInt(response.status / 100) === 4)) {
                                        if (isHaltedPatientEvent(event, response)) {
                                            return handleHaltedEvent(event);
                                        }
                                        loggingService.logSyncError(response.config.url, response.status, response.data, response.config.data);
                                    }
                                    if (response.status != -1) {
                                        removeHaltedEvent(event.id);
                                    }
                                    if (parseInt(response.status / 100) === 5 ||
                                        (parseInt(response.status / 100) === 4 && _.indexOf([401, 403, 404], response.status) == -1)) {
                                        if (event.tube === "event_queue") {
                                            eventQueue.removeFromQueue(event);
                                            eventQueue.addToErrorQueue(event.data);
                                            return consumeFromEventQueue();
                                        } else {
                                            reservedEvents.push(event);
                                            return consumeFromErrorQueue();
                                        }
                                    } else {
                                        eventQueue.releaseFromQueue(event);
                                        deferred.resolve();
                                        return "4xx error " + response.status;
                                    }
                                });
                        });
                };

                var removeHaltedEvent = function (id) {
                    var patientEvents = offlineService.getItem("patientEventsInProgress");
                    offlineService.setItem("patientEventsInProgress", _.without(patientEvents, id));
                };

                var successCallBack = function (event) {
                    if (event.data.type === "Error") {
                        offlineDbService.deleteErrorFromErrorLog(event.data.uuid);
                    }
                    eventQueue.removeFromQueue(event).then(function () {
                        removeHaltedEvent(event.id);
                        if (event.tube === "event_queue") {
                            return consumeFromEventQueue();
                        } else {
                            return consumeFromErrorQueue();
                        }
                    });
                };

                var getReservedPatientEvents = function () {
                    var promises = [];
                    var patientEvents = offlineService.getItem("patientEventsInProgress");
                    _.each(_.uniq(patientEvents), function (id) {
                        promises.push(eventQueue.peekFromQueue(id));
                    });
                    return promises;
                };

                var reservedEvents = [];
                var deferred = $q.defer();
                if (!offlineService.isOfflineApp()) {
                    return $q.when();
                }
                if (offlineService.isAndroidApp()) {
                    offlineDbService = androidDbService;
                }

                var dbs = {};
                $q.all(getAllDbPromises()).then(function (allDbs) {
                    _.each(allDbs, function (db) {
                        offlineService.isAndroidApp() ? dbs[db] = db : dbs[db.getSchema().name()] = db;
                    });

                    consumeFromErrorQueue().then(function (response) {
                        $q.all(getReservedPatientEvents()).then(function (events) {
                            reservedEvents = _.union(reservedEvents, (_.without(events, null)));
                            $q.all(releaseReservedEvents(_.uniq(reservedEvents))).then(function () {
                                if (_.isArray(response) && response.indexOf("4xx error") != -1) {
                                    return;
                                }
                                return consumeFromEventQueue();
                            });
                        });
                    });
                });
                return deferred.promise;
            };
        }
    ]);

'use strict';

angular.module('bahmni.common.offline')
    .factory('offlinePull', ['offlineService', 'offlineConfigInitialization', 'offlineReferenceDataInitialization', 'offlineSyncInitialization',
        function (offlineService, offlineConfigInitialization, offlineReferenceDataInitialization, offlineSyncInitialization) {
            return function (isInitSync) {
                if (offlineService.isOfflineApp()) {
                    return offlineConfigInitialization().then(function (response) {
                        return offlineReferenceDataInitialization(true).then(function (response) {
                            return offlineSyncInitialization(isInitSync);
                        });
                    });
                }
            };
        }
    ]);

'use strict';

Bahmni.Common.Offline.MultiStageWorker = function ($q) {
    var self = this;
    this.stages = [];
    this.paused = false;
    this.currentlyExecutingStage = null;

    var checkForPause = function () {
        if (self.paused) {
            return $q.reject({});
        }
        return $q.when({});
    };

    var getStagesToBeExecuted = function () {
        var index = self.stages.indexOf(self.currentlyExecutingStage);
        index = index < 0 ? 0 : index;
        return self.stages.slice(index);
    };

    this.addStage = function (worker) {
        self.stages.push(worker);
    };

    this.execute = function () {
        self.paused = false;
        return getStagesToBeExecuted().reduce(function (promise, worker) {
            return promise.then(checkForPause).then(function () {
                self.currentlyExecutingStage = worker;
                return worker.execute();
            });
        }, checkForPause()).then(function () {
            self.currentlyExecutingStage = null;
        });
    };

    this.pause = function () {
        self.paused = true;
        if (this.currentlyExecutingStage !== null && this.currentlyExecutingStage.pause) {
            this.currentlyExecutingStage.pause();
        }
    };
};

'use strict';

angular.module('bahmni.common.offline')
    .service('schedulerService', ['offlineService', 'WorkerService', 'scheduledSync',
        function (offlineService, WorkerService, scheduledSync) {
            this.jobs = [];
            this.sync = function (config) {
                if (offlineService.isChromeApp() || offlineService.isAndroidApp()) {
                    var job = scheduledSync(config, undefined);
                    this.jobs.push(job);
                }
            };

            this.stopSync = function () {
                if (offlineService.isChromeApp() || offlineService.isAndroidApp()) {
                    _.each(this.jobs, function (job) {
                        job.stop();
                    });
                }
            };
        }
    ]);

'use strict';

angular.module('bahmni.common.offline')
    .service('appUpdateService', ['$http', 'appInfoStrategy', '$q', function ($http, appInfoStrategy, $q) {
        var isForcedUpdateRequired = function (metadataInfo) {
            var installedVersion = appInfoStrategy.getVersion();
            var forcedUpdateRequired = false;
            var latestVersion = _.max(metadataInfo.compatibleVersions);

            if (latestVersion > installedVersion) {
                metadataInfo.compatibleVersions.map(function (version) {
                    return Number(version);
                });
                forcedUpdateRequired = metadataInfo.compatibleVersions.indexOf(Number(installedVersion)) === -1;
            }
            return forcedUpdateRequired;
        };

        var getUpdateInfo = function () {
            var appUpdateInfo = localStorage.getItem("appUpdateInfo");
            appUpdateInfo = appUpdateInfo ? JSON.parse(appUpdateInfo) : appUpdateInfo;
            if (appUpdateInfo) {
                appUpdateInfo.forcedUpdateRequired = isForcedUpdateRequired(appUpdateInfo);
            }

            var config = {
                headers: {
                    'If-None-Match': appUpdateInfo ? appUpdateInfo.etag : undefined
                }
            };
            var deferred = $q.defer();

            $http.get(Bahmni.Common.Constants.offlineMetadataUrl, config).then(function (response) {
                if (response.status === 200) {
                    var metadataInfo = response.data;
                    appUpdateInfo = {
                        latestAndroidAppUrl: metadataInfo.latestAndroidAppUrl,
                        latestChromeAppUrl: metadataInfo.latestChromeAppUrl,
                        compatibleVersions: metadataInfo.compatibleVersions,
                        etag: response.headers().etag
                    };
                    localStorage.setItem("appUpdateInfo", JSON.stringify(appUpdateInfo));
                    appUpdateInfo.forcedUpdateRequired = isForcedUpdateRequired(appUpdateInfo);
                }
                deferred.resolve(appUpdateInfo);
            }).catch(function (response) {
                if (response.status === 304) {
                    deferred.resolve(appUpdateInfo);
                } else if (response.status === 404) {
                    localStorage.removeItem("appUpdateInfo");
                    deferred.resolve({});
                } else {
                    deferred.reject(response);
                }
            });
            return deferred.promise;
        };

        return {
            getUpdateInfo: getUpdateInfo
        };
    }]);
