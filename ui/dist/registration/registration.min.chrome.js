"use strict";angular.module("bahmni.registration").factory("patientServiceStrategy",["$q","offlinePatientServiceStrategy","eventQueue","$rootScope","offlineService","offlineDbService","androidDbService",function($q,offlinePatientServiceStrategy,eventQueue,$rootScope,offlineService,offlineDbService,androidDbService){offlineService.isOfflineApp()&&offlineService.isAndroidApp()&&(offlineDbService=androidDbService);var search=function(config){return offlinePatientServiceStrategy.search(config).then(function(results){return results.data})},get=function(uuid){return offlinePatientServiceStrategy.get(uuid).then(function(data){var patientData=JSON.parse(JSON.stringify(data));return patientData.patient.person.preferredName=patientData.patient.person.names[0],patientData.patient.person.preferredAddress=patientData.patient.person.addresses[0],offlinePatientServiceStrategy.getAttributeTypes().then(function(attributeTypes){return mapAttributesToGetFormat(patientData.patient.person.attributes,attributeTypes),patientData})})},create=function(patient){var allIdentifiers=_.concat(patient.extraIdentifiers,patient.primaryIdentifier),data=new Bahmni.Registration.CreatePatientRequestMapper(moment()).mapFromPatient($rootScope.patientConfiguration.attributeTypes,patient),extraIdentifiersForSearch={};return patient.extraIdentifiers.forEach(function(extraIdentifier){var name=extraIdentifier.identifierType.name||extraIdentifier.identifierType.display;extraIdentifiersForSearch[name]=extraIdentifier.identifier}),data.patient.identifiers=allIdentifiers,angular.forEach(data.patient.identifiers,function(identifier){identifier.primaryIdentifier=patient.primaryIdentifier.identifier,identifier.extraIdentifiers=extraIdentifiersForSearch}),createWithOutMapping(data)},createWithOutMapping=function(data){data.patient.identifiers=_.filter(data.patient.identifiers,function(identifier){return!_.isEmpty(identifier.identifierType.identifierSources)||void 0!==identifier.identifier}),data.patient.person.birthtime=data.patient.person.birthtime?moment(data.patient.person.birthtime).format("YYYY-MM-DDTHH:mm:ss.SSSZZ"):null,data.patient.person.auditInfo={dateCreated:moment(data.patient.person.personDateCreated).format()||moment().format()},$rootScope.currentProvider&&(data.patient.person.auditInfo=data.patient.person.auditInfo||{},data.patient.person.auditInfo.creator=$rootScope.currentProvider,data.patient.auditInfo=data.patient.auditInfo||{},data.patient.auditInfo.creator=$rootScope.currentProvider),data.patient.person.personDateCreated=void 0;var event={};return data.patient.person.addresses[0].uuid||_.each(data.patient.person.addresses,function(address){address.uuid=Bahmni.Common.Offline.UUID.generateUuid()}),data.patient.uuid?event.url=Bahmni.Registration.Constants.baseOpenMRSRESTURL+"/bahmnicore/patientprofile/"+data.patient.uuid:(data.patient.person.uuid=Bahmni.Common.Offline.UUID.generateUuid(),_.each(data.patient.person.names,function(name){name.uuid=Bahmni.Common.Offline.UUID.generateUuid()}),data.patient.uuid=data.patient.person.uuid,event.url=Bahmni.Registration.Constants.baseOpenMRSRESTURL+"/bahmnicore/patientprofile/"),event.dbName=offlineDbService.getCurrentDbName(),event.patientUuid=data.patient.uuid,offlinePatientServiceStrategy.create(data).then(function(response){return eventQueue.addToEventQueue(event),response},function(response){return $q.reject(response)})},update=function(patient,openMRSPatient,attributeTypes){var data=new Bahmni.Registration.CreatePatientRequestMapper(moment()).mapFromPatient(attributeTypes,patient);data.patient.identifiers=_.concat(patient.extraIdentifiers,patient.primaryIdentifier);var openmrsIdentifier=openMRSPatient.identifiers,extraIdentifiersForSearch={};return patient.extraIdentifiers.forEach(function(extraIdentifier){var name=extraIdentifier.identifierType.name||extraIdentifier.identifierType.display;extraIdentifiersForSearch[name]=extraIdentifier.identifier}),angular.forEach(data.patient.identifiers,function(identifier){var matchedOpenMRSIdentifier=_.find(openmrsIdentifier,{identifierType:{uuid:identifier.identifierType.uuid}});identifier.selectedIdentifierSource=matchedOpenMRSIdentifier&&matchedOpenMRSIdentifier.selectedIdentifierSource,identifier.primaryIdentifier=patient.primaryIdentifier.identifier,identifier.extraIdentifiers=extraIdentifiersForSearch}),data.patient.person.names[0].uuid=openMRSPatient.person.names[0].uuid,offlinePatientServiceStrategy.deletePatientData(data.patient.uuid).then(function(){return createWithOutMapping(data).then(function(result){var patientData=JSON.parse(JSON.stringify(result.data));return patientData.patient.person.preferredName=data.patient.person.names[0],patientData.patient.person.preferredAddress=data.patient.person.addresses[0],mapAttributesToGetFormat(patientData.patient.person.attributes,attributeTypes),$q.when({data:patientData})})})},mapAttributesToGetFormat=function(attributes,attributeTypes){angular.forEach(attributes,function(attribute){if(!attribute.voided){var foundAttribute=_.find(attributeTypes,function(attributeType){return attributeType.uuid===attribute.attributeType.uuid});if(foundAttribute&&foundAttribute.format)if("java.lang.Integer"===foundAttribute.format||"java.lang.Float"===foundAttribute.format)attribute.value=parseFloat(attribute.value);else if("java.lang.Boolean"===foundAttribute.format)attribute.value=attribute.value===!0||"true"===attribute.value;else if("org.openmrs.Concept"===foundAttribute.format){var value=attribute.value;attribute.value={display:value,uuid:attribute.hydratedObject}}}})},generateIdentifier=function(){return $q.when({})};return{search:search,get:get,create:create,update:update,generateIdentifier:generateIdentifier}}]),angular.module("bahmni.common.domain").service("observationsService",["$q","observationsServiceStrategy",function($q,observationsServiceStrategy){var fetchAndFilterObservations=function(conceptNames,index,params,listOfObservations){return observationsServiceStrategy.getAllParentsInHierarchy(conceptNames[index]).then(function(result){return params.conceptNames=result.data,observationsServiceStrategy.fetch(params.patientUuid,params.numberOfVisits,params).then(function(results){var acutalObs=filterObservation(results.data,conceptNames[index]);return listOfObservations=listOfObservations.concat(acutalObs),index++,index<conceptNames.length?fetchAndFilterObservations(conceptNames,index,params,listOfObservations):$q.when(listOfObservations)})})},fetchAndFilterObservationsForVisit=function(params){return params.conceptNames?fetchAndFilterObservations(params.conceptNames,0,params,[]):observationsServiceStrategy.fetchObsForVisit(params).then(function(results){return $q.when(results.data)})},getObservationByIterateOverGroupMembers=function(obs,conceptName,results){obs.concept.name!==conceptName||obs.voided||results.push(obs),_.each(obs.groupMembers,function(groupMember,index){groupMember.voided?delete obs.groupMembers[index]:groupMember.concept.name===conceptName?results.push(groupMember):getObservationByIterateOverGroupMembers(groupMember,conceptName,results)}),_.remove(obs.groupMembers,function(member){return void 0==member})},filterObservation=function(obsArray,conceptName){var actualObs=[];return _.each(obsArray,function(obs){getObservationByIterateOverGroupMembers(obs,conceptName,actualObs)}),actualObs};this.fetch=function(patientUuid,conceptNames,scope,numberOfVisits,visitUuid,obsIgnoreList,filterObsWithOrders,patientProgramUuid){var params={};if(obsIgnoreList&&(params.obsIgnoreList=obsIgnoreList),null!=filterObsWithOrders&&(params.filterObsWithOrders=filterObsWithOrders),visitUuid)return params.visitUuid=visitUuid,params.patientUuid=patientUuid,params.scope=scope,params.conceptNames=conceptNames,fetchAndFilterObservationsForVisit(params).then(function(results){return{data:results}});params.patientUuid=patientUuid,params.numberOfVisits=numberOfVisits,params.scope=scope,params.patientProgramUuid=patientProgramUuid;var listOfObservations=[],index=0;return fetchAndFilterObservations(conceptNames,index,params,listOfObservations).then(function(results){return{data:results}})},this.getByUuid=function(observationUuid){return $q.when({data:{results:[]}})},this.fetchForEncounter=function(encounterUuid,conceptNames){return $q.when({data:{results:[]}})},this.fetchForPatientProgram=function(patientProgramUuid,conceptNames,scope){return $q.when({data:{results:[]}})},this.getObsRelationship=function(targetObsUuid){return $q.when({data:{results:[]}})},this.getObsInFlowSheet=function(patientUuid,conceptSet,groupByConcept,conceptNames,numberOfVisits,initialCount,latestCount,groovyExtension,startDate,endDate,patientProgramUuid){return $q.when({data:{results:[]}})}}]),angular.module("bahmni.common.domain").service("encounterService",["$q","$rootScope","$bahmniCookieStore","offlineEncounterServiceStrategy","eventQueue","offlineService","offlineDbService","androidDbService",function($q,$rootScope,$bahmniCookieStore,offlineEncounterServiceStrategy,eventQueue,offlineService,offlineDbService,androidDbService){var offlineEncounterService=offlineEncounterServiceStrategy;offlineService.isOfflineApp()&&offlineService.isAndroidApp()&&(offlineDbService=androidDbService),this.buildEncounter=function(encounter){encounter.observations=encounter.observations||[],encounter.providers=encounter.providers||[];var providerData=$bahmniCookieStore.get(Bahmni.Common.Constants.grantProviderAccessDataCookieName);return _.isEmpty(encounter.providers)&&(providerData&&providerData.uuid?encounter.providers.push({uuid:providerData.uuid}):$rootScope.currentProvider&&$rootScope.currentProvider.uuid&&encounter.providers.push($rootScope.currentProvider)),encounter.observations.forEach(function(obs){obs.uuid=obs.uuid||Bahmni.Common.Offline.UUID.generateUuid(),obs.encounterUuid=encounter.encounterUuid,obs.encounterDateTime=encounter.encounterDateTime,obs.observationDateTime=encounter.observationDateTime||new Date,obs.providers=encounter.providers,obs.creatorName=encounter.creatorName,stripExtraInfo(obs)}),encounter};var getDefaultEncounterType=function(){var deferred=$q.defer();return offlineEncounterService.getDefaultEncounterType().then(function(response){deferred.resolve(response)}),deferred.promise},getEncounterTypeBasedOnLoginLocation=function(){return offlineEncounterService.getEncounterTypeBasedOnLoginLocation()},getEncounterTypeBasedOnProgramUuid=function(programUuid){return offlineEncounterService.getEncounterTypeBasedOnProgramUuid()},getDefaultEncounterTypeIfMappingNotFound=function(mapping){var encounterType=mapping;return _.isEmpty(encounterType)&&(encounterType=getDefaultEncounterType()),encounterType};this.getEncounterType=function(programUuid,loginLocationUuid){return programUuid?getEncounterTypeBasedOnProgramUuid(programUuid).then(function(response){return getDefaultEncounterTypeIfMappingNotFound(response)}):loginLocationUuid?getEncounterTypeBasedOnLoginLocation().then(function(response){return getDefaultEncounterTypeIfMappingNotFound(response.data)}):getDefaultEncounterType()},this.create=function(encounterData){return encounterData.encounterUuid=encounterData.encounterUuid||Bahmni.Common.Offline.UUID.generateUuid(),encounterData.visitUuid=encounterData.visitUuid||null,encounterData.encounterDateTime=encounterData.encounterDateTime||Bahmni.Common.Util.DateUtil.now(),encounterData.visitType=encounterData.visitType||"Field",encounterData.encounterTypeUuid=null,this.buildEncounter(encounterData),getDefaultEncounterType().then(function(encounterType){return encounterData.encounterType=encounterData.encounterType||encounterType.data,encounterData}).then(function(encounterData){return offlineEncounterService.create(encounterData)}).then(function(result){var event={type:"encounter",encounterUuid:result.data.encounterUuid,dbName:offlineDbService.getCurrentDbName()};return eventQueue.addToEventQueue(event),$q.when({data:encounterData})})},this.delete=function(encounterUuid,reason){return offlineEncounterService.delete(encounterUuid,reason)};var stripExtraInfo=function(obs){delete obs.isObservation,delete obs.isObservationNode,obs.concept={uuid:obs.concept.uuid,name:obs.concept.name,dataType:obs.concept.dataType||obs.concept.datatype,conceptClass:obs.concept.conceptClass,hiNormal:obs.concept.hiNormal,lowNormal:obs.concept.lowNormal,units:obs.concept.units},obs.groupMembers=obs.groupMembers||[],obs.groupMembers.forEach(function(groupMember){groupMember.uuid=groupMember.uuid||Bahmni.Common.Offline.UUID.generateUuid(),groupMember.encounterDateTime=obs.encounterDateTime,groupMember.observationDateTime=obs.observationDateTime,groupMember.providers=obs.providers,groupMember.creatorName=obs.creatorName,stripExtraInfo(groupMember)})};this.search=function(visitUuid,encounterDate){return offlineEncounterService.search(visitUuid,encounterDate)},this.find=function(params){return offlineEncounterService.find(params).then(function(results){return results&&results.encounter?{data:results.encounter}:{data:{bahmniDiagnoses:[],observations:[],accessionNotes:[],encounterType:null,visitType:null,patientId:null,reason:null,orders:[],providers:[],drugOrders:[],patientProgramUuid:null,visitUuid:null,patientUuid:null,encounterDateTime:null,associatedToPatientProgram:!1,encounterUuid:null,visitTypeUuid:null,encounterTypeUuid:null,locationUuid:null,disposition:null,locationName:null,context:{},extensions:{}}}})},this.findByEncounterUuid=function(encounterUuid){return $q.when({data:{results:[]}})},this.getEncountersForEncounterType=function(patientUuid,encounterTypeUuid){return $q.when({data:{results:[]}})},this.getDigitized=function(patientUuid){return $q.when({data:{results:[]}})},this.discharge=function(encounterData){return $q.when({data:{results:[]}})}}]),angular.module("bahmni.common.conceptSet").factory("conceptSetService",["$http","$q","$bahmniTranslate","offlineDbService","androidDbService","offlineService",function($http,$q,$bahmniTranslate,offlineDbService,androidDbService,offlineService){offlineService.isAndroidApp()&&(offlineDbService=androidDbService);var getConcept=function(params){return params.locale=params.locale||$bahmniTranslate.use(),offlineDbService.getConceptByName(params.name)};return{getConcept:getConcept}}]),angular.module("bahmni.registration").service("offlinePatientServiceStrategy",["$http","$q","offlineSearchDbService","offlineDbService",function($http,$q,offlineSearchDbService,offlineDbService){var search=function(config){return offlineSearchDbService.search(config.params)},getByUuid=function(uuid){return offlineDbService.getPatientByUuid(uuid)},create=function(data){return offlineDbService.createPatient(data)},deletePatientData=function(patientUuid){return offlineDbService.deletePatientData(patientUuid)},getAttributeTypes=function(){return offlineDbService.getAttributeTypes()};return{search:search,get:getByUuid,create:create,deletePatientData:deletePatientData,getAttributeTypes:getAttributeTypes}}]),angular.module("bahmni.common.domain").factory("locationService",["$bahmniCookieStore","offlineService","offlineDbService","$q",function($bahmniCookieStore,offlineService,offlineDbService,$q){var getAllByTag=function(tags){if(null!=offlineService.getItem("LoginInformation")&&!offlineService.getItem("allowMultipleLoginLocation")){var obj={data:{results:[offlineService.getItem("LoginInformation").currentLocation]}};return $q.when(obj)}return offlineDbService.getReferenceData("LoginLocations").then(function(loginLocations){if(!loginLocations){var msg=offlineService.getItem("networkError")||"Offline data not set up";return $q.reject(msg)}return loginLocations})},getByUuid=function(locationUuid){return offlineDbService.getLocationByUuid(locationUuid).then(function(loginLocations){return loginLocations})},getLoggedInLocation=function(){var cookie=$bahmniCookieStore.get(Bahmni.Common.Constants.locationCookieName);return getByUuid(cookie.uuid)},getVisitLocation=function(locationUuid){return $q.when({})};return{getAllByTag:getAllByTag,getLoggedInLocation:getLoggedInLocation,getByUuid:getByUuid,getVisitLocation:getVisitLocation}}]),angular.module("bahmni.common.domain").factory("configurationService",["$q","offlineDbService",function($q,offlineDbService){var configurationFunctions={};configurationFunctions.encounterConfig=function(){return offlineDbService.getReferenceData("RegistrationConcepts")},configurationFunctions.patientConfig=function(){return offlineDbService.getReferenceData("PatientConfig")},configurationFunctions.patientAttributesConfig=function(){return offlineDbService.getReferenceData("PersonAttributeType")},configurationFunctions.dosageFrequencyConfig=function(){return offlineDbService.getReferenceData("DosageFrequencyConfig")},configurationFunctions.dosageInstructionConfig=function(){return offlineDbService.getReferenceData("DosageInstructionConfig")},configurationFunctions.stoppedOrderReasonConfig=function(){return offlineDbService.getReferenceData("StoppedOrderReasonConfig")},configurationFunctions.consultationNoteConfig=function(){return offlineDbService.getReferenceData("ConsultationNote")},configurationFunctions.radiologyObservationConfig=function(){return $q.when({})},configurationFunctions.labOrderNotesConfig=function(){return offlineDbService.getReferenceData("LabOrderNotes")},configurationFunctions.defaultEncounterType=function(){return offlineDbService.getReferenceData("DefaultEncounterType")},configurationFunctions.radiologyImpressionConfig=function(){return offlineDbService.getReferenceData("RadiologyImpressionConfig")},configurationFunctions.addressLevels=function(){return offlineDbService.getReferenceData("AddressHierarchyLevels")},configurationFunctions.allTestsAndPanelsConcept=function(){return offlineDbService.getReferenceData("AllTestsAndPanelsConcept")},configurationFunctions.identifierTypesConfig=function(){return offlineDbService.getReferenceData("IdentifierTypes")},configurationFunctions.genderMap=function(){return offlineDbService.getReferenceData("Genders")},configurationFunctions.relationshipTypeMap=function(){return offlineDbService.getReferenceData("RelationshipTypeMap")},configurationFunctions.relationshipTypeConfig=function(){return offlineDbService.getReferenceData("RelationshipType")},configurationFunctions.loginLocationToVisitTypeMapping=function(){return offlineDbService.getReferenceData("LoginLocationToVisitTypeMapping")},configurationFunctions.loginLocationToEncounterTypeMapping=function(){return offlineDbService.getReferenceData("LoginLocationToEncounterTypeMapping")};var existingPromises={},configurations={},getConfigurations=function(configurationNames){var configurationsPromiseDefer=$q.defer(),promises=[];return configurationNames.forEach(function(configurationName){existingPromises[configurationName]||(existingPromises[configurationName]=configurationFunctions[configurationName]().then(function(response){configurations[configurationName]=response.data}),promises.push(existingPromises[configurationName]))}),$q.all(promises).then(function(){configurationsPromiseDefer.resolve(configurations)}),configurationsPromiseDefer.promise};return{getConfigurations:getConfigurations}}]),angular.module("bahmni.common.appFramework").service("loadConfigService",["offlineDbService",function(offlineDbService){this.loadConfig=function(url,contextPath){var configFile=url.substring(url.lastIndexOf("/")+1);return offlineDbService.getConfig(contextPath).then(function(config){return config?{data:config.value[configFile]}:{data:{}}})}}]),angular.module("bahmni.common.domain").service("visitService",["$q","offlineDbService",function($q,offlineDbService){this.getVisit=function(uuid,params){return $q.when({data:{results:{}}})},this.endVisit=function(visitUuid){return $q.when({data:{results:{}}})},this.createVisit=function(visitDetails){return $q.when({data:{results:{}}})},this.updateVisit=function(visitUuid,attributes){return $q.when({data:{results:{}}})},this.getVisitSummary=function(visitUuid){return offlineDbService.getVisitByUuid(visitUuid).then(function(visit){var visitSummary=visit.visitJson;return{data:visitSummary}})},this.search=function(parameters){var deferred=$q.defer();return offlineDbService.getVisitDetailsByPatientUuid(parameters.patient).then(function(visits){deferred.resolve({data:{results:visits}})}),deferred.promise},this.getVisitType=function(){return $q.when({data:{results:{}}})}}]),angular.module("bahmni.common.domain").service("offlineEncounterServiceStrategy",["$q","$rootScope","$bahmniCookieStore","offlineDbService",function($q,$rootScope,$bahmniCookieStore,offlineDbService){this.getDefaultEncounterType=function(){return offlineDbService.getReferenceData("DefaultEncounterType")},this.getEncounterTypeBasedOnLoginLocation=function(){return offlineDbService.getReferenceData("LoginLocationToEncounterTypeMapping").then(function(results){var mappings=results.data.results[0].mappings;return{data:mappings}})},this.getEncounterTypeBasedOnProgramUuid=function(programUuid){return $q.when()},this.create=function(encounterData){return offlineDbService.createEncounter(encounterData)},this.delete=function(encounterUuid,reason){return $q.when({data:{results:[]}})},this.search=function(visitUuid,encounterDate){return $q.when({data:{results:[]}})},this.find=function(params){return offlineDbService.getActiveEncounter(params)},this.getEncountersByPatientUuid=function(patientUuid){return offlineDbService.getEncountersByPatientUuid(patientUuid)}}]),angular.module("bahmni.common.domain").service("observationsServiceStrategy",["$q","offlineDbService",function($q,offlineDbService){this.fetch=function(patientUuid,numberOfVisits,params){var deffered=$q.defer();return offlineDbService.getVisitsByPatientUuid(patientUuid,numberOfVisits).then(function(visitUuids){var mappedVisitUuids=_.map(visitUuids,function(visitUuid){return visitUuid.uuid}),obsMapper=new Bahmni.Common.Domain.ObservationMapper;params.visitUuids=params.visitUuid?[params.visitUuid]:mappedVisitUuids||[],offlineDbService.getObservationsFor(params).then(function(obs){var mappedObs=_.map(obs,function(ob){return obsMapper.preProcessObs(ob.observation)});deffered.resolve({data:mappedObs})})}),deffered.promise},this.fetchObsForVisit=function(params){var deferred=$q.defer();new Bahmni.Common.Domain.ObservationMapper;return offlineDbService.getObservationsForVisit(params.visitUuid).then(function(obs){var mappedObs=_.map(obs,function(ob){return ob.observation});deferred.resolve({data:mappedObs})}),deferred.promise},this.getByUuid=function(observationUuid){return $q.when({data:{results:[]}})},this.fetchForEncounter=function(encounterUuid,conceptNames){return $q.when({data:{results:[]}})},this.fetchForPatientProgram=function(patientProgramUuid,conceptNames,scope){return $q.when({data:{results:[]}})},this.getObsRelationship=function(targetObsUuid){return $q.when({data:{results:[]}})},this.getObsInFlowSheet=function(patientUuid,conceptSet,groupByConcept,conceptNames,numberOfVisits,initialCount,latestCount,groovyExtension,startDate,endDate,patientProgramUuid){return $q.when({data:{results:[]}})},this.getAllParentsInHierarchy=function(conceptName){var deferred=$q.defer();return offlineDbService.getAllParentsInHierarchy(conceptName).then(function(rootConcept){deferred.resolve({data:rootConcept})}),deferred.promise}}]),Bahmni.Common.Util.DateTimeFormatter={getDateWithoutTime:function(datetime){return datetime?moment(datetime).format("YYYY-MM-DD"):null}},angular.module("bahmni.common.logging").service("offlineLoggingService",["$http","offlineDbService",function($http,offlineDbService){var log=function(errorUuid,failedRequest,responseStatus,stackTrace,requestPayload){return offlineDbService.insertLog(errorUuid,failedRequest,responseStatus,stackTrace,requestPayload)};return{log:log}}]),angular.module("bahmni.common.offline").service("appInfoStrategy",function(){var getVersion=function(){return Bahmni.Common.Constants.bahmniConnectVersion};return{getVersion:getVersion}}),angular.module("bahmni.common.uiHelper").controller("AppUpdateController",["$scope","ngDialog","appInfoStrategy","offlineService",function($scope,ngDialog,appInfoStrategy,offlineService){$scope.isAndroid=!1,$scope.isUpdateAvailable=function(){var installedVersion=appInfoStrategy.getVersion(),appUpdateInfo=offlineService.getItem("appUpdateInfo");return appUpdateInfo&&installedVersion<_.max(appUpdateInfo.compatibleVersions)},$scope.update=function(){ngDialog.open({template:"../common/ui-helper/views/appUpdatePopup.html",className:"test ngdialog-theme-default",data:offlineService.getItem("appUpdateInfo")||{},showClose:!0})}}]);