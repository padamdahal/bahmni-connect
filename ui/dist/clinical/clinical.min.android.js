"use strict";angular.module("bahmni.common.domain").service("visitService",["$q","androidDbService",function($q,androidDbService){this.getVisit=function(uuid,params){return $q.when({data:{results:{}}})},this.endVisit=function(visitUuid){return $q.when({data:{results:{}}})},this.createVisit=function(visitDetails){return $q.when({data:{results:{}}})},this.updateVisit=function(visitUuid,attributes){return $q.when({data:{results:{}}})},this.getVisitSummary=function(visitUuid){return androidDbService.getVisitByUuid(visitUuid).then(function(visit){var visitSummary=visit.visitJson;return visitSummary.visitType&&(visitSummary.visitType=visitSummary.visitType.display),{data:visitSummary}})},this.search=function(parameters){return androidDbService.getVisitDetailsByPatientUuid(parameters.patient).then(function(visits){return{data:{results:_.map(visits,function(visitStr){return JSON.parse(visitStr)})}}})},this.getVisitType=function(){return $q.when({data:{results:{}}})}}]),angular.module("bahmni.common.domain").service("offlineEncounterServiceStrategy",["$q","$rootScope","$bahmniCookieStore","androidDbService",function($q,$rootScope,$bahmniCookieStore,androidDbService){this.getDefaultEncounterType=function(){return androidDbService.getReferenceData("DefaultEncounterType")},this.getEncounterTypeBasedOnLoginLocation=function(){return androidDbService.getReferenceData("LoginLocationToEncounterTypeMapping").then(function(results){var mappings=results.data.results[0].mappings;return{data:mappings}})},this.getEncounterTypeBasedOnProgramUuid=function(programUuid){return $q.when()},this.create=function(encounterData){return androidDbService.createEncounter(encounterData)},this.delete=function(encounterUuid,reason){return $q.when({data:{results:[]}})},this.search=function(visitUuid,encounterDate){return $q.when({data:{results:[]}})},this.find=function(params){return androidDbService.getActiveEncounter(params)},this.getEncountersByPatientUuid=function(patientUuid){return androidDbService.getEncountersByPatientUuid(patientUuid)}}]),angular.module("bahmni.common.patient").service("patientService",["$q","androidDbService",function($q,androidDbService){this.getPatient=function(uuid){return androidDbService.getPatientByUuid(uuid).then(function(response){return response.patient.person.preferredName=response.patient.person.names[0],response.patient.person.preferredAddress=response.patient.person.addresses[0],{data:response.patient}})},this.getRelationships=function(patientUuid){return $q.when({data:{}})},this.findPatients=function(params){return $q.when({data:[]})},this.search=function(query,offset,identifier){var params={q:query,identifier:identifier,startIndex:offset||0,addressFieldName:Bahmni.Common.Offline.AddressFields.CITY_VILLAGE};return $q.when(JSON.parse(AndroidOfflineService.search(JSON.stringify(params))))},this.getPatientContext=function(uuid){var deferrable=$q.defer(),patientContextMapper=new Bahmni.PatientContextMapper;return androidDbService.getPatientByUuid(uuid).then(function(response){var patientContext=patientContextMapper.map(response.patient);deferrable.resolve({data:patientContext})}),deferrable.promise},this.getRecentPatients=function(duration){var params={q:"",startIndex:0,addressFieldName:Bahmni.Common.Offline.AddressFields.CITY_VILLAGE,duration:duration||14};return $q.when(JSON.parse(AndroidOfflineService.search(JSON.stringify(params))))}}]),angular.module("bahmni.common.orders").service("orderTypeService",["androidDbService",function(androidDbService){var self=this;self.orderTypes=[],self.loadAll=function(){return androidDbService.getReferenceData("OrderType").then(function(orderType){return self.orderTypes=orderType.data,orderType})},self.getOrderTypeUuid=function(orderTypeName){return _.result(_.find(self.orderTypes,{display:orderTypeName}),"uuid")}}]),angular.module("bahmni.common.domain").factory("locationService",["$bahmniCookieStore","offlineService","androidDbService","$q",function($bahmniCookieStore,offlineService,androidDbService,$q){var getAllByTag=function(tags){if(null!=offlineService.getItem("LoginInformation")&&!offlineService.getItem("allowMultipleLoginLocation")){var obj={data:{results:[offlineService.getItem("LoginInformation").currentLocation]}};return $q.when(obj)}return androidDbService.getReferenceData("LoginLocations").then(function(loginLocations){if(!loginLocations){var msg=offlineService.getItem("networkError")||"Offline data not set up";return $q.reject(msg)}return loginLocations})},getByUuid=function(locationUuid){return androidDbService.getLocationByUuid(locationUuid).then(function(loginLocations){return loginLocations})},getLoggedInLocation=function(){var cookie=$bahmniCookieStore.get(Bahmni.Common.Constants.locationCookieName);return getByUuid(cookie.uuid)},getVisitLocation=function(locationUuid){return $q.when({})};return{getAllByTag:getAllByTag,getLoggedInLocation:getLoggedInLocation,getByUuid:getByUuid,getVisitLocation:getVisitLocation}}]),angular.module("bahmni.common.domain").factory("configurationService",["$q","androidDbService",function($q,androidDbService){var configurationFunctions={};configurationFunctions.encounterConfig=function(){return androidDbService.getReferenceData("RegistrationConcepts")},configurationFunctions.patientConfig=function(){return androidDbService.getReferenceData("PatientConfig")},configurationFunctions.patientAttributesConfig=function(){return androidDbService.getReferenceData("PersonAttributeType")},configurationFunctions.dosageFrequencyConfig=function(){return androidDbService.getReferenceData("DosageFrequencyConfig")},configurationFunctions.dosageInstructionConfig=function(){return androidDbService.getReferenceData("DosageInstructionConfig")},configurationFunctions.stoppedOrderReasonConfig=function(){return androidDbService.getReferenceData("StoppedOrderReasonConfig")},configurationFunctions.consultationNoteConfig=function(){return androidDbService.getReferenceData("ConsultationNote")},configurationFunctions.radiologyObservationConfig=function(){return $q.when({})},configurationFunctions.labOrderNotesConfig=function(){return androidDbService.getReferenceData("LabOrderNotes")},configurationFunctions.defaultEncounterType=function(){return androidDbService.getReferenceData("DefaultEncounterType")},configurationFunctions.radiologyImpressionConfig=function(){return androidDbService.getReferenceData("RadiologyImpressionConfig")},configurationFunctions.addressLevels=function(){return androidDbService.getReferenceData("AddressHierarchyLevels")},configurationFunctions.allTestsAndPanelsConcept=function(){return androidDbService.getReferenceData("AllTestsAndPanelsConcept")},configurationFunctions.identifierTypesConfig=function(){return androidDbService.getReferenceData("IdentifierTypes")},configurationFunctions.genderMap=function(){return androidDbService.getReferenceData("Genders")},configurationFunctions.relationshipTypeMap=function(){return androidDbService.getReferenceData("RelationshipTypeMap")},configurationFunctions.relationshipTypeConfig=function(){return androidDbService.getReferenceData("RelationshipType")},configurationFunctions.loginLocationToVisitTypeMapping=function(){return androidDbService.getReferenceData("LoginLocationToVisitTypeMapping")},configurationFunctions.loginLocationToEncounterTypeMapping=function(){return androidDbService.getReferenceData("LoginLocationToEncounterTypeMapping")};var existingPromises={},configurations={},getConfigurations=function(configurationNames){var configurationsPromiseDefer=$q.defer(),promises=[];return configurationNames.forEach(function(configurationName){existingPromises[configurationName]||(existingPromises[configurationName]=configurationFunctions[configurationName]().then(function(response){configurations[configurationName]=response.data}),promises.push(existingPromises[configurationName]))}),$q.all(promises).then(function(){configurationsPromiseDefer.resolve(configurations)}),configurationsPromiseDefer.promise};return{getConfigurations:getConfigurations}}]),angular.module("bahmni.common.appFramework").service("loadConfigService",["androidDbService",function(androidDbService){this.loadConfig=function(url,contextPath){var configFile=url.substring(url.lastIndexOf("/")+1);return androidDbService.getConfig(contextPath).then(function(config){return config?{data:config.value[configFile]}:{data:{}}})}}]),angular.module("bahmni.clinical").service("diseaseTemplateService",["$q",function($q){this.getLatestDiseaseTemplates=function(patientUuid,diseaseTemplates,startDate,endDate){return $q.when({data:{}})},this.getAllDiseaseTemplateObs=function(patientUuid,diseaseName,startDate,endDate){return $q.when({data:{}})}}]),angular.module("bahmni.clinical").service("labOrderResultService",["offlineLabOrderResultsService","$q","configurationService",function(offlineLabOrderResultsService,$q,configurationService){var labOrderResultsService=offlineLabOrderResultsService,allTestsAndPanelsConcept={};configurationService.getConfigurations(["allTestsAndPanelsConcept"]).then(function(configurations){allTestsAndPanelsConcept=configurations.allTestsAndPanelsConcept.results[0]});var sanitizeData=function(labOrderResults){labOrderResults.forEach(function(result){result.accessionDateTime=Bahmni.Common.Util.DateUtil.parse(result.accessionDateTime),result.hasRange=result.minNormal&&result.maxNormal})},groupByPanel=function(accessions){var grouped=[];return accessions.forEach(function(labOrders){var panels={},accessionGroup=[];labOrders.forEach(function(labOrder){labOrder.panelName?(panels[labOrder.panelName]=panels[labOrder.panelName]||{accessionDateTime:labOrder.accessionDateTime,orderName:labOrder.panelName,tests:[],isPanel:!0},panels[labOrder.panelName].tests.push(labOrder)):(labOrder.isPanel=!1,labOrder.orderName=labOrder.testName,accessionGroup.push(labOrder))}),_.values(panels).forEach(function(val){accessionGroup.push(val)}),grouped.push(accessionGroup)}),grouped},flattened=function(accessions){return accessions.map(function(results){var flattenedResults=_(results).map(function(result){return result.isPanel===!0?[result,result.tests]:result}).flattenDeep().value();return flattenedResults})},transformGroupSort=function(results,initialAccessionCount,latestAccessionCount){var labOrderResults=results.results;sanitizeData(labOrderResults);var accessionConfig={initialAccessionCount:initialAccessionCount,latestAccessionCount:latestAccessionCount},tabularResult=new Bahmni.Clinical.TabularLabOrderResults(results.tabularResult,accessionConfig),accessions=_.groupBy(labOrderResults,function(labOrderResult){return labOrderResult.accessionUuid});if(accessions=_.sortBy(accessions,function(accession){return accession[0].accessionDateTime}),accessionConfig.initialAccessionCount||accessionConfig.latestAccessionCount){var initial=_.take(accessions,accessionConfig.initialAccessionCount||0),latest=_.takeRight(accessions,accessionConfig.latestAccessionCount||0);accessions=_.union(initial,latest)}return accessions.reverse(),{accessions:groupByPanel(accessions),tabularResult:tabularResult}},getAllForPatient=function(params){var deferred=$q.defer();return params.patientUuid||deferred.reject("patient uuid is mandatory"),labOrderResultsService.getLabOrderResultsForPatient(params).then(function(response){var results=transformGroupSort(response.data,params.initialAccessionCount,params.latestAccessionCount),sortedConceptSet=new Bahmni.Clinical.ConceptWeightBasedSorter(allTestsAndPanelsConcept),resultObject={labAccessions:flattened(results.accessions.map(sortedConceptSet.sortTestResults)),tabular:results.tabularResult};resultObject.tabular.tabularResult.orders=sortedConceptSet.sortTestResults(resultObject.tabular.tabularResult.orders),deferred.resolve(resultObject)}),deferred.promise};return{getAllForPatient:getAllForPatient}}]),angular.module("bahmni.clinical").service("offlineLabOrderResultsService",["$q","androidDbService",function($q,androidDbService){this.getLabOrderResultsForPatient=function(params){return androidDbService.getLabOrderResultsForPatient(params.patientUuid).then(function(results){return results=null===results?{results:{results:[],tabularResult:{dates:[],orders:[],values:[]}}}:results,{data:results.results}})}}]),angular.module("bahmni.common.domain").service("encounterService",["$q","$rootScope","$bahmniCookieStore","offlineEncounterServiceStrategy","eventQueue","offlineService","offlineDbService","androidDbService",function($q,$rootScope,$bahmniCookieStore,offlineEncounterServiceStrategy,eventQueue,offlineService,offlineDbService,androidDbService){var offlineEncounterService=offlineEncounterServiceStrategy;offlineService.isOfflineApp()&&offlineService.isAndroidApp()&&(offlineDbService=androidDbService),this.buildEncounter=function(encounter){encounter.observations=encounter.observations||[],encounter.providers=encounter.providers||[];var providerData=$bahmniCookieStore.get(Bahmni.Common.Constants.grantProviderAccessDataCookieName);return _.isEmpty(encounter.providers)&&(providerData&&providerData.uuid?encounter.providers.push({uuid:providerData.uuid}):$rootScope.currentProvider&&$rootScope.currentProvider.uuid&&encounter.providers.push($rootScope.currentProvider)),encounter.observations.forEach(function(obs){obs.uuid=obs.uuid||Bahmni.Common.Offline.UUID.generateUuid(),obs.encounterUuid=encounter.encounterUuid,obs.encounterDateTime=encounter.encounterDateTime,obs.observationDateTime=encounter.observationDateTime||new Date,obs.providers=encounter.providers,obs.creatorName=encounter.creatorName,stripExtraInfo(obs)}),encounter};var getDefaultEncounterType=function(){var deferred=$q.defer();return offlineEncounterService.getDefaultEncounterType().then(function(response){deferred.resolve(response)}),deferred.promise},getEncounterTypeBasedOnLoginLocation=function(){return offlineEncounterService.getEncounterTypeBasedOnLoginLocation()},getEncounterTypeBasedOnProgramUuid=function(programUuid){return offlineEncounterService.getEncounterTypeBasedOnProgramUuid()},getDefaultEncounterTypeIfMappingNotFound=function(mapping){var encounterType=mapping;return _.isEmpty(encounterType)&&(encounterType=getDefaultEncounterType()),encounterType};this.getEncounterType=function(programUuid,loginLocationUuid){return programUuid?getEncounterTypeBasedOnProgramUuid(programUuid).then(function(response){return getDefaultEncounterTypeIfMappingNotFound(response)}):loginLocationUuid?getEncounterTypeBasedOnLoginLocation().then(function(response){return getDefaultEncounterTypeIfMappingNotFound(response.data)}):getDefaultEncounterType()},this.create=function(encounterData){return encounterData.encounterUuid=encounterData.encounterUuid||Bahmni.Common.Offline.UUID.generateUuid(),encounterData.visitUuid=encounterData.visitUuid||null,encounterData.encounterDateTime=encounterData.encounterDateTime||Bahmni.Common.Util.DateUtil.now(),encounterData.visitType=encounterData.visitType||"Field",encounterData.encounterTypeUuid=null,this.buildEncounter(encounterData),getDefaultEncounterType().then(function(encounterType){return encounterData.encounterType=encounterData.encounterType||encounterType.data,encounterData}).then(function(encounterData){return offlineEncounterService.create(encounterData)}).then(function(result){var event={type:"encounter",encounterUuid:result.data.encounterUuid,dbName:offlineDbService.getCurrentDbName()};return eventQueue.addToEventQueue(event),$q.when({data:encounterData})})},this.delete=function(encounterUuid,reason){return offlineEncounterService.delete(encounterUuid,reason)};var stripExtraInfo=function(obs){delete obs.isObservation,delete obs.isObservationNode,obs.concept={uuid:obs.concept.uuid,name:obs.concept.name,dataType:obs.concept.dataType||obs.concept.datatype,conceptClass:obs.concept.conceptClass,hiNormal:obs.concept.hiNormal,lowNormal:obs.concept.lowNormal,units:obs.concept.units},obs.groupMembers=obs.groupMembers||[],obs.groupMembers.forEach(function(groupMember){groupMember.uuid=groupMember.uuid||Bahmni.Common.Offline.UUID.generateUuid(),groupMember.encounterDateTime=obs.encounterDateTime,groupMember.observationDateTime=obs.observationDateTime,groupMember.providers=obs.providers,groupMember.creatorName=obs.creatorName,stripExtraInfo(groupMember)})};this.search=function(visitUuid,encounterDate){return offlineEncounterService.search(visitUuid,encounterDate)},this.find=function(params){return offlineEncounterService.find(params).then(function(results){return results&&results.encounter?{data:results.encounter}:{data:{bahmniDiagnoses:[],observations:[],accessionNotes:[],encounterType:null,visitType:null,patientId:null,reason:null,orders:[],providers:[],drugOrders:[],patientProgramUuid:null,visitUuid:null,patientUuid:null,encounterDateTime:null,associatedToPatientProgram:!1,encounterUuid:null,visitTypeUuid:null,encounterTypeUuid:null,locationUuid:null,disposition:null,locationName:null,context:{},extensions:{}}}})},this.findByEncounterUuid=function(encounterUuid){return $q.when({data:{results:[]}})},this.getEncountersForEncounterType=function(patientUuid,encounterTypeUuid){return $q.when({data:{results:[]}})},this.getDigitized=function(patientUuid){return $q.when({data:{results:[]}})},this.discharge=function(encounterData){return $q.when({data:{results:[]}})}}]),angular.module("bahmni.common.domain").service("diagnosisService",["$q","offlineEncounterServiceStrategy",function($q,offlineEncounterServiceStrategy){var filterAndSortDiagnosis=function(diagnoses){return diagnoses=_.filter(diagnoses,function(singleDiagnosis){return 0==singleDiagnosis.revised}),diagnoses=_.sortBy(diagnoses,"diagnosisDateTime").reverse()};this.getDiagnoses=function(patientUuid,visitUuid){var deferred=$q.defer(),diagnoses=[];return offlineEncounterServiceStrategy.getEncountersByPatientUuid(patientUuid).then(function(results){_.each(results,function(result){result.encounter.bahmniDiagnoses&&(diagnoses=diagnoses.concat(result.encounter.bahmniDiagnoses))}),diagnoses=filterAndSortDiagnosis(diagnoses),deferred.resolve({data:diagnoses})}),deferred.promise},this.getAllFor=function(searchTerm){return $q.when({data:{}})},this.deleteDiagnosis=function(obsUuid){return $q.when({data:{}})},this.getDiagnosisConceptSet=function(){return $q.when({data:{}})},this.getPastAndCurrentDiagnoses=function(patientUuid,encounterUuid){return $q.when({data:{}})},this.populateDiagnosisInformation=function(patientUuid,consultation){return consultation.savedDiagnosesFromCurrentEncounter=[],consultation.pastDiagnoses=[],$q.when(consultation)}}]),angular.module("bahmni.common.domain").service("observationsService",["$q","observationsServiceStrategy",function($q,observationsServiceStrategy){var fetchAndFilterObservations=function(conceptNames,index,params,listOfObservations){return observationsServiceStrategy.getAllParentsInHierarchy(conceptNames[index]).then(function(result){return params.conceptNames=result.data,observationsServiceStrategy.fetch(params.patientUuid,params.numberOfVisits,params).then(function(results){var acutalObs=filterObservation(results.data,conceptNames[index]);return listOfObservations=listOfObservations.concat(acutalObs),index++,index<conceptNames.length?fetchAndFilterObservations(conceptNames,index,params,listOfObservations):$q.when(listOfObservations)})})},fetchAndFilterObservationsForVisit=function(params){return params.conceptNames?fetchAndFilterObservations(params.conceptNames,0,params,[]):observationsServiceStrategy.fetchObsForVisit(params).then(function(results){return $q.when(results.data)})},getObservationByIterateOverGroupMembers=function(obs,conceptName,results){obs.concept.name!==conceptName||obs.voided||results.push(obs),_.each(obs.groupMembers,function(groupMember,index){groupMember.voided?delete obs.groupMembers[index]:groupMember.concept.name===conceptName?results.push(groupMember):getObservationByIterateOverGroupMembers(groupMember,conceptName,results)}),_.remove(obs.groupMembers,function(member){return void 0==member})},filterObservation=function(obsArray,conceptName){var actualObs=[];return _.each(obsArray,function(obs){getObservationByIterateOverGroupMembers(obs,conceptName,actualObs)}),actualObs};this.fetch=function(patientUuid,conceptNames,scope,numberOfVisits,visitUuid,obsIgnoreList,filterObsWithOrders,patientProgramUuid){var params={};if(obsIgnoreList&&(params.obsIgnoreList=obsIgnoreList),null!=filterObsWithOrders&&(params.filterObsWithOrders=filterObsWithOrders),visitUuid)return params.visitUuid=visitUuid,params.patientUuid=patientUuid,params.scope=scope,params.conceptNames=conceptNames,fetchAndFilterObservationsForVisit(params).then(function(results){return{data:results}});params.patientUuid=patientUuid,params.numberOfVisits=numberOfVisits,params.scope=scope,params.patientProgramUuid=patientProgramUuid;var listOfObservations=[],index=0;return fetchAndFilterObservations(conceptNames,index,params,listOfObservations).then(function(results){return{data:results}})},this.getByUuid=function(observationUuid){return $q.when({data:{results:[]}})},this.fetchForEncounter=function(encounterUuid,conceptNames){return $q.when({data:{results:[]}})},this.fetchForPatientProgram=function(patientProgramUuid,conceptNames,scope){return $q.when({data:{results:[]}})},this.getObsRelationship=function(targetObsUuid){return $q.when({data:{results:[]}})},this.getObsInFlowSheet=function(patientUuid,conceptSet,groupByConcept,conceptNames,numberOfVisits,initialCount,latestCount,groovyExtension,startDate,endDate,patientProgramUuid){return $q.when({data:{results:[]}})}}]),angular.module("bahmni.common.domain").service("observationsServiceStrategy",["$q","androidDbService",function($q,androidDbService){this.fetch=function(patientUuid,numberOfVisits,params){var deffered=$q.defer();return androidDbService.getVisitsByPatientUuid(patientUuid,numberOfVisits).then(function(visitUuids){var mappedVisitUuids=_.map(visitUuids,function(visitUuid){return visitUuid.uuid}),obsMapper=new Bahmni.Common.Domain.ObservationMapper;params.visitUuids=params.visitUuid?[params.visitUuid]:mappedVisitUuids||[],androidDbService.getObservationsFor(params).then(function(obs){var mappedObs=_.map(obs,function(ob){return obsMapper.preProcessObs(ob.observation)});deffered.resolve({data:mappedObs})})}),deffered.promise},this.getByUuid=function(observationUuid){return $q.when({data:{results:[]}})},this.fetchForEncounter=function(encounterUuid,conceptNames){return $q.when({data:{results:[]}})},this.fetchForPatientProgram=function(patientProgramUuid,conceptNames,scope){return $q.when({data:{results:[]}})},this.getObsRelationship=function(targetObsUuid){return $q.when({data:{results:[]}})},this.getObsInFlowSheet=function(patientUuid,conceptSet,groupByConcept,conceptNames,numberOfVisits,initialCount,latestCount,groovyExtension,startDate,endDate,patientProgramUuid){return $q.when({data:{results:[]}})},this.fetchObsForVisit=function(params){var deferred=$q.defer(),obsMapper=new Bahmni.Common.Domain.ObservationMapper;return androidDbService.getObservationsForVisit(params.visitUuid).then(function(obs){var mappedObs=_.map(obs,function(ob){return obsMapper.preProcessObs(ob.observation)});deferred.resolve({data:mappedObs})}),deferred.promise},this.getAllParentsInHierarchy=function(conceptName){var deferred=$q.defer();return androidDbService.getAllParentsInHierarchy(conceptName).then(function(results){deferred.resolve({data:results})}),deferred.promise}}]),angular.module("bahmni.common.conceptSet").factory("conceptSetService",["$http","$q","$bahmniTranslate","offlineDbService","androidDbService","offlineService",function($http,$q,$bahmniTranslate,offlineDbService,androidDbService,offlineService){offlineService.isAndroidApp()&&(offlineDbService=androidDbService);var getConcept=function(params){return params.locale=params.locale||$bahmniTranslate.use(),offlineDbService.getConceptByName(params.name)};return{getConcept:getConcept}}]),Bahmni.Common.Util.DateTimeFormatter={getDateWithoutTime:function(date){return date?moment(date).format("MM-DD-YYYY"):null}},angular.module("bahmni.common.logging").service("offlineLoggingService",["$http","androidDbService",function($http,androidDbService){var log=function(errorUuid,failedRequest,responseStatus,stackTrace,requestPayload){return androidDbService.insertLog(errorUuid,failedRequest,responseStatus,stackTrace,requestPayload)};return{log:log}}]),angular.module("bahmni.clinical").factory("treatmentService",["$q","appService","offlineDbService","offlineService","androidDbService",function($q,appService,offlineDbService,offlineService,androidDbService){offlineService.isAndroidApp()&&(offlineDbService=androidDbService);var createDrugOrder=function(drugOrder){return Bahmni.Clinical.DrugOrder.create(drugOrder)},getPrescribedAndActiveDrugOrders=function(patientUuid,numberOfVisits,getOtherActive,visitUuids,startDate,endDate,getEffectiveOrdersOnly){var params={patientUuid:patientUuid,numberOfVisits:numberOfVisits,getOtherActive:getOtherActive,visitUuids:visitUuids,startDate:startDate,endDate:endDate,getEffectiveOrdersOnly:getEffectiveOrdersOnly},deferred=$q.defer(),visitDrugOrders=[];return offlineDbService.getVisitsByPatientUuid(patientUuid,numberOfVisits).then(function(visits){var mappedVisitUuids=_.map(visits,function(visit){return visit.uuid});mappedVisitUuids&&0===mappedVisitUuids.length&&deferred.resolve({data:{}}),params.visitUuids=mappedVisitUuids||[],offlineDbService.getPrescribedAndActiveDrugOrders(params).then(function(results){_.each(results,function(result){var drugOrders=result.encounter.drugOrders?result.encounter.drugOrders:[];_.each(visits,function(visit){result.encounter.visitUuid===visit.uuid&&(result.encounter.visit={startDateTime:visit.startDatetime})}),_.each(drugOrders,function(drugOrder){drugOrder.provider=result.encounter.providers[0],drugOrder.creatorName=result.encounter.providers[0].name,drugOrder.visit=result.encounter.visit}),visitDrugOrders=visitDrugOrders.concat(drugOrders)});var uuids=[];_.each(visitDrugOrders,function(visitDrugOrder){visitDrugOrder.previousOrderUuid&&uuids.push(visitDrugOrder.previousOrderUuid)});for(var index=0;index<visitDrugOrders.length;index++)for(var indx=0;indx<uuids.length;indx++)uuids[indx]===visitDrugOrders[index].uuid&&visitDrugOrders.splice(index,1);var response={visitDrugOrders:visitDrugOrders};for(var key in response)response[key]=response[key].map(createDrugOrder);deferred.resolve({data:response})})}),deferred.promise},getConfig=function(){return offlineDbService.getReferenceData("DrugOrderConfig")},getActiveDrugOrders=function(){return $q.when({data:{}})},getPrescribedDrugOrders=function(){return $q.when({data:{}})},getNonCodedDrugConcept=function(){var deferred=$q.defer();return offlineDbService.getReferenceData("NonCodedDrugConcept").then(function(response){deferred.resolve(response.data)}),deferred.promise},getAllDrugOrdersFor=function(){return $q.when({data:{}})},voidDrugOrder=function(drugOrder){return $q.when({data:{}})};return{getActiveDrugOrders:getActiveDrugOrders,getConfig:getConfig,getPrescribedDrugOrders:getPrescribedDrugOrders,getPrescribedAndActiveDrugOrders:getPrescribedAndActiveDrugOrders,getNonCodedDrugConcept:getNonCodedDrugConcept,getAllDrugOrdersFor:getAllDrugOrdersFor,voidDrugOrder:voidDrugOrder}}]),angular.module("bahmni.common.offline").service("appInfoStrategy",function(){var getVersion=function(){return AppUpdateService.getVersion()};return{getVersion:getVersion}}),angular.module("bahmni.common.uiHelper").controller("AppUpdateController",["$scope","ngDialog","offlineService","appInfoStrategy",function($scope,ngDialog,offlineService,appInfoStrategy){$scope.isAndroid=!0,$scope.isUpdateAvailable=function(){var installedVersion=appInfoStrategy.getVersion(),appUpdateInfo=offlineService.getItem("appUpdateInfo");return appUpdateInfo&&installedVersion<_.max(appUpdateInfo.compatibleVersions)},$scope.update=function(url){url||(url=offlineService.getItem("appUpdateInfo").latestAndroidAppUrl),AppUpdateService.updateApp(url),ngDialog.close()}}]);